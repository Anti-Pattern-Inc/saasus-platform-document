"use strict";(self.webpackChunksaasus_platform_document=self.webpackChunksaasus_platform_document||[]).push([[250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(87462),r=n(67294),i=n(86010),o=n(12466),s=n(16550),l=n(91980),u=n(67392),c=n(50012);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=p(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[l,u]=f({queryString:n,groupId:a}),[m,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),g=(()=>{const e=l??m;return d({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var g=n(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==s&&(m(t),l(a))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:p},o,{className:(0,i.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function T(e){const t=(0,g.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},28541:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>u,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),i=n(74866),o=n(85162);const s={title:"Implementation using SaaSus Platform (Serverless)",slug:"implementing-authentication-using-saasus-serverless",excerpt:"",hidden:!1,createdAt:"Mon Jul 31 2023 03:24:01 GMT+0000 (Coordinated Universal Time)",updatedAt:"Thu Dec 07 2023 01:25:35 GMT+0000 (Coordinated Universal Time)"},l=void 0,u={unversionedId:"implementation-guide/implementing-authentication-using-saasus-serverless",id:"implementation-guide/implementing-authentication-using-saasus-serverless",title:"Implementation using SaaSus Platform (Serverless)",description:"When configuring the backend as serverless, the following implementations are required:",source:"@site/docs/implementation-guide/implementing-authentication-using-saasus-serverless.md",sourceDirName:"implementation-guide",slug:"/implementation-guide/implementing-authentication-using-saasus-serverless",permalink:"/docs/implementation-guide/implementing-authentication-using-saasus-serverless",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/implementation-guide/implementing-authentication-using-saasus-serverless.md",tags:[],version:"current",frontMatter:{title:"Implementation using SaaSus Platform (Serverless)",slug:"implementing-authentication-using-saasus-serverless",excerpt:"",hidden:!1,createdAt:"Mon Jul 31 2023 03:24:01 GMT+0000 (Coordinated Universal Time)",updatedAt:"Thu Dec 07 2023 01:25:35 GMT+0000 (Coordinated Universal Time)"},sidebar:"tutorialSidebar",previous:{title:"Implementing Authentication Using SaaSus Platform (API Server)",permalink:"/docs/implementation-guide/implementing-authentication-using-saasus-platform-apiserver"},next:{title:"Metering API Implementation Sample and Examples of Use (Laravel)",permalink:"/docs/implementation-guide/metering-api-sample"}},c={},m=[{value:"1. Frontend Implementation",id:"1-frontend-implementation",level:2},{value:"1.1. Explanation of the Implementation Sample",id:"11-explanation-of-the-implementation-sample",level:3},{value:"1.1.1. Post-Authentication Transition Destination Screen",id:"111-post-authentication-transition-destination-screen",level:4},{value:"1.1.2. Tenant Onboarding Screen",id:"112-tenant-onboarding-screen",level:4},{value:"1.1.3. User List Screen (Top Page)",id:"113-user-list-screen-top-page",level:4},{value:"1.2. How to Use the Implementation Sample",id:"12-how-to-use-the-implementation-sample",level:3},{value:"2. Backend Implementation",id:"2-backend-implementation",level:2},{value:"2.1. Explanation of the Implementation Sample",id:"21-explanation-of-the-implementation-sample",level:3},{value:"2.1.1. JWT Retrieval API",id:"211-jwt-retrieval-api",level:4},{value:"2.1.2. User Information Retrieval API",id:"212-user-information-retrieval-api",level:4},{value:"2.1.3. Tenant Onboarding API",id:"213-tenant-onboarding-api",level:4},{value:"2.1.4. User List Retrieval API",id:"214-user-list-retrieval-api",level:4},{value:"2.2. Implementation Sample",id:"22-implementation-sample",level:3}],p={toc:m},d="wrapper";function f(e){let{components:t,...s}=e;return(0,r.kt)(d,(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When configuring the backend as serverless, the following implementations are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Store the token (JWT), which is the authentication information for SaaSus, in the browser's local storage."),(0,r.kt)("li",{parentName:"ul"},"SaaS users authenticate themselves using the JWT."),(0,r.kt)("li",{parentName:"ul"},"The frontend is implemented with React, Vue.js, etc."),(0,r.kt)("li",{parentName:"ul"},"The backend is implemented using serverless services such as Lambda.")),(0,r.kt)("h1",{id:"flow-jwt-acquisition--tenant-onboarding"},"Flow (JWT Acquisition ~ Tenant Onboarding)"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(69072).Z,width:"1100",height:"821"})),(0,r.kt)("h1",{id:"implementation-samples"},"Implementation Samples"),(0,r.kt)("h2",{id:"1-frontend-implementation"},"1. Frontend Implementation"),(0,r.kt)("h3",{id:"11-explanation-of-the-implementation-sample"},"1.1. Explanation of the Implementation Sample"),(0,r.kt)("h4",{id:"111-post-authentication-transition-destination-screen"},"1.1.1. Post-Authentication Transition Destination Screen"),(0,r.kt)("p",null,"After logging in from the login screen generated by SaaSus, the URL set as the post-authentication redirect will be called."),(0,r.kt)("p",null,"To test using this implementation sample, please set the redirect to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/callback"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(21690).Z,width:"2464",height:"736"})),(0,r.kt)("p",null,"After authentication, a temporary code (code=xxxxx) necessary for retrieving authentication information is passed in the query parameters of the redirect URL. Please implement a process to retrieve the JWT using this temporary code and save the JWT to local storage."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/pages/Callback.tsx"},"React implementation sample"))),(0,r.kt)("h4",{id:"112-tenant-onboarding-screen"},"1.1.2. Tenant Onboarding Screen"),(0,r.kt)("p",null,"It is necessary to check if the user is logged in. Therefore, implement as follows:\nSet ",(0,r.kt)("inlineCode",{parentName:"p"},"jwttoken")," to the JWT stored in local storage.\nYou can confirm that the user is logged in if data is retrievable."),(0,r.kt)("p",null,"After login confirmation, implement the screen according to whether self-signup is used or not."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"With self-signup: Implement a screen for tenant onboarding."),(0,r.kt)("li",{parentName:"ul"},"Without self-signup: Implement a screen to display after login.")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"jsx",label:"React",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"try {\n  const jwtToken = window.localStorage.getItem('SaaSusIdToken');\n  const apiConfig = new Configuration({\n    accessToken: jwtToken || 'dummyToken',\n    basePath: 'https://xxxxx.lambda-url.ap-northeast-1.on.aws',\n  });\n\n  const userInfoApi = new UserInfoApi(apiConfig);\n  const { data } = await userInfoApi.getLoginUser();\n  return data;\n} catch (e: any) {\n  return thunkAPI.rejectWithValue(e);\n}\n")))),(0,r.kt)("h4",{id:"113-user-list-screen-top-page"},"1.1.3. User List Screen (Top Page)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/pages/UserPage.tsx"},"React Implementation Sample"))),(0,r.kt)("h3",{id:"12-how-to-use-the-implementation-sample"},"1.2. How to Use the Implementation Sample"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/saasus-platform/implementation-sample-front-react/blob/main/README.md"},"React"))),(0,r.kt)("h2",{id:"2-backend-implementation"},"2. Backend Implementation"),(0,r.kt)("h3",{id:"21-explanation-of-the-implementation-sample"},"2.1. Explanation of the Implementation Sample"),(0,r.kt)("h4",{id:"211-jwt-retrieval-api"},"2.1.1. JWT Retrieval API"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { AuthClient } from "saasus-sdk";\n\nexport const handler = async (event: any): Promise<any> => {\n  const authClient = new AuthClient();\n\n  const code = event.queryStringParameters.code;\n\n  const res = await authClient.credentialApi.getAuthCredentials(code);\n  const token = res.data.id_token;\n\n  return {\n    statusCode: res.status,\n    body: JSON.stringify({\n      id_token: await token,\n    }),\n  };\n};\n')))),(0,r.kt)("h4",{id:"212-user-information-retrieval-api"},"2.1.2. User Information Retrieval API"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { AuthClient } from "saasus-sdk";\n\nexport const handler = async (event: any): Promise<any> => {\n  const authClient = new AuthClient();\n\n  const token = event.headers.authorization.replace("Bearer ", "");\n  const userinfo = await authClient.userInfoApi.getUserInfo(token);\n\n  let response = "";\n  if (userinfo.data.tenants.length == 0) {\n    response = JSON.stringify({\n      id: await userinfo.data.id,\n      email: await userinfo.data.email,\n      completed_sign_up: false,\n    });\n  } else {\n    response = JSON.stringify({\n      completed_sign_up: true,\n    });\n  }\n\n  return {\n    statusCode: userinfo.status,\n    body: response,\n  };\n};\n')))),(0,r.kt)("h4",{id:"213-tenant-onboarding-api"},"2.1.3. Tenant Onboarding API"),(0,r.kt)("p",null,"To confirm that the API request comes from a user logged into the SaaSus Platform, always confirm login by retrieving user information."),(0,r.kt)("p",null,"The self-signup process is as follows:"),(0,r.kt)("p",null,"Prerequisite) The self-signup user becomes the administrator of the new tenant:\na. Create a tenant.\nb. Link the logged-in user to the created tenant.\nc. Set the logged-in user as the administrator of the tenant."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { AuthClient } from "saasus-sdk";\n\nexport const handler = async (event: any): Promise<any> => {\n  const body = JSON.parse(event.body);\n\n  const authClient = new AuthClient();\n\n  const token = event.headers.authorization.replace("Bearer ", "");\n  const userinfo = await authClient.userInfoApi.getUserInfo(token);\n\n  // Create tenant\n  // Tenant name: Tenant name entered on screen\n  // Back office staff email: Email of the person logged in\n  // Connect instance ID: Connect instance ID entered on screen\n  // AWS account ID: AWS account ID entered on screen\n  // IAM role ARN: IAM role ARN entered on screen\n  const tenantProps: TenantProps = {\n    name: body.tenant_name,\n    back_office_staff_email: userinfo.data.email,\n    attributes: {\n      connect_instance_id: body.connect_instance_id,\n      aws_account_id: body.aws_account_id,\n      iam_role_arn_for_cdk: body.iam_role_arn_for_cdk,\n    },\n  };\n  const createTenant = await authClient.tenantApi.createTenant(tenantProps);\n\n  // Link tenant to user\n  // Connect user ID: Connect user ID entered on screen\n  const createTenantUserParam: CreateTenantUserParam = {\n    attributes: { connect_user_id: body.connect_user_id },\n    email: userinfo.data.email,\n  };\n  await authClient.tenantUserApi.createTenantUser(\n    createTenant.data.id,\n    createTenantUserParam\n  );\n\n  // Set roles\n  const createTenantUserRolesParam: CreateTenantUserRolesParam = {\n    role_names: ["admin"],\n  };\n  await authClient.tenantUserApi.createTenantUserRoles(\n    createTenant.data.id,\n    userinfo.data.id,\n    3,\n    createTenantUserRolesParam\n  );\n\n  return {\n    statusCode: userinfo.status,\n    body: "",\n  };\n};\n')))),(0,r.kt)("h4",{id:"214-user-list-retrieval-api"},"2.1.4. User List Retrieval API"),(0,r.kt)("p",null,"To confirm that the API request is from a user logged into the SaaSus Platform,",(0,r.kt)("br",{parentName:"p"}),"\n","please always perform a login check by retrieving user information."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"React Implementation Sample (In Preparation)")),(0,r.kt)("h3",{id:"22-implementation-sample"},"2.2. Implementation Sample"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"React (In Preparation)")))}f.isMDXComponent=!0},69072:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-01-1b49cc3a8770cf500a965bca64b35b16.png"},21690:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-02-6c182132c9826cede4a323a0bfc95320.png"}}]);