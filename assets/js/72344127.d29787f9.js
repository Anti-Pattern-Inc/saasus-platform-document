"use strict";(self.webpackChunksaasus_platform_document=self.webpackChunksaasus_platform_document||[]).push([[4605],{1360:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/authentication-methods-05-139cb90742ea1e5dee56ee6c0c03fc1f.png"},5190:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/authentication-methods-03-c69afc2f227c5dbb2b5fc735d2a4e781.png"},8948:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/authentication-methods-01-91460e01c4935e405ccd8e2b62a96beb.png"},11470:(e,n,t)=>{t.d(n,{A:()=>T});var r=t(96540),a=t(34164),s=t(23104),i=t(56347),o=t(205),u=t(57485),c=t(31682),l=t(70679);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p({value:e,tabValues:n}){return n.some((n=>n.value===e))}function f({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,u.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=d(e),[i,u]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[c,h]=f({queryString:t,groupId:a}),[m,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,l.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:a}),v=(()=>{const e=c??m;return p({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{v&&u(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);u(e),h(e),g(e)}),[h,g,s]),tabValues:s}}var g=t(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function k({className:e,block:n,selectedValue:t,selectValue:r,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),c=e=>{const n=e.currentTarget,a=o.indexOf(n),s=i[a].value;s!==t&&(u(n),r(s))},l=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:i.map((({value:e,label:n,attributes:r})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:l,onClick:c,...r,className:(0,a.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function I({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function A(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",v.tabList),children:[(0,x.jsx)(k,{...n,...e}),(0,x.jsx)(I,{...n,...e})]})}function T(e){const n=(0,g.A)();return(0,x.jsx)(A,{...e,children:h(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var s=t(74848);function i({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,t),hidden:n,children:e})}},27855:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/authentication-methods-02-402513592ad00c0d5f186b02b7ecaa4e.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},60187:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>u,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"part-6/usecase/authentication-methods","title":"Authentication Methods","description":"In web applications, including SaaS, there are two main authentication methods:","source":"@site/versioned_docs/version-1.11/part-6/usecase/authentication-methods.mdx","sourceDirName":"part-6/usecase","slug":"/part-6/usecase/authentication-methods","permalink":"/docs/part-6/usecase/authentication-methods","draft":false,"unlisted":false,"tags":[],"version":"1.11","frontMatter":{"title":"Authentication Methods","slug":"authentication-methods","excerpt":"","hidden":false,"createdAt":"Fri Feb 07 2025 02:41:08 GMT+0000 (Coordinated Universal Time)","updatedAt":"Wed Jan 17 2024 08:25:52 GMT+0000 (Coordinated Universal Time)"},"sidebar":"docsSidebar","previous":{"title":"Step-by-Step Guide to Setting Up Complicated Pricing Plans","permalink":"/docs/part-6/usecase/about-rate-plans/basic-charge-preference"},"next":{"title":"FAQ","permalink":"/docs/part-7/faq"}}');var a=t(74848),s=t(28453),i=t(11470),o=t(19365);const u={title:"Authentication Methods",slug:"authentication-methods",excerpt:"",hidden:!1,createdAt:"Fri Feb 07 2025 02:41:08 GMT+0000 (Coordinated Universal Time)",updatedAt:"Wed Jan 17 2024 08:25:52 GMT+0000 (Coordinated Universal Time)"},c="Authentication Methods",l={},h=[{value:"Session-Based Authentication",id:"session-based-authentication",level:3},{value:"Token-Based Authentication",id:"token-based-authentication",level:3},{value:"Differences Between Session-Based and Token-Based Authentication",id:"differences-between-session-based-and-token-based-authentication",level:3},{value:"ID Token",id:"id-token",level:3},{value:"Refresh Token",id:"refresh-token",level:3},{value:"Access Token",id:"access-token",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"authentication-methods",children:"Authentication Methods"})}),"\n",(0,a.jsxs)(n.p,{children:["In web applications, including SaaS, there are two main authentication methods:",(0,a.jsx)("br",{}),"\n\u30fbSession-based authentication",(0,a.jsx)("br",{}),"\n\u30fbToken-based authentication",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["SaaSus Platform adopts ",(0,a.jsx)(n.strong,{children:"token-based authentication"}),".",(0,a.jsx)("br",{}),"\nThe following sections provide an overview of each authentication method."]}),"\n",(0,a.jsx)(n.h1,{id:"types-of-authentication",children:"Types of Authentication"}),"\n",(0,a.jsx)(n.h3,{id:"session-based-authentication",children:"Session-Based Authentication"}),"\n",(0,a.jsxs)(n.p,{children:["Session-based authentication is a method in which the client authenticates using a ",(0,a.jsx)(n.strong,{children:"session ID generated by the server."}),(0,a.jsx)("br",{}),"\nThis method allows ",(0,a.jsx)(n.strong,{children:"for stateful communication"}),"; however, it ",(0,a.jsx)(n.strong,{children:"places a higher load on the server compared to token-based authentication"}),".\n",(0,a.jsx)(n.img,{alt:"01",src:t(8948).A+"",width:"1148",height:"240"})]}),"\n",(0,a.jsx)(n.h3,{id:"token-based-authentication",children:"Token-Based Authentication"}),"\n",(0,a.jsxs)(n.p,{children:["Token-based authentication is a method in which the client authenticates using ",(0,a.jsx)(n.strong,{children:"token information"}),".",(0,a.jsx)("br",{}),"\nThis method does not require the server to store authentication information, making ",(0,a.jsx)(n.strong,{children:"it lower in server load compared to session-based authentication"})," and enabling ",(0,a.jsx)(n.strong,{children:"stateless communication"}),".\n",(0,a.jsx)(n.img,{alt:"02",src:t(27855).A+"",width:"880",height:"238"})]}),"\n",(0,a.jsx)(n.h3,{id:"differences-between-session-based-and-token-based-authentication",children:"Differences Between Session-Based and Token-Based Authentication"}),"\n",(0,a.jsxs)(n.p,{children:["Session-based authentication ",(0,a.jsx)(n.strong,{children:"stores authentication information on the server"}),", whereas token-based authentication ",(0,a.jsx)(n.strong,{children:"does not store authentication information on the server and relies solely on token validation for authentication"}),".",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h1,{id:"authentication-in-saasus-platform",children:"Authentication in SaaSus Platform"}),"\n",(0,a.jsxs)(n.p,{children:["SaaSus Platform adopts ",(0,a.jsx)(n.strong,{children:"token-based authentication"}),".",(0,a.jsx)("br",{}),"\nToken generation and validation are performed using the SaaSus SDK, which calls the SaaSus Platform API.\n",(0,a.jsx)(n.img,{alt:"03",src:t(5190).A+"",width:"1143",height:"333"})]}),"\n",(0,a.jsx)(n.h1,{id:"authentication-timing",children:"Authentication Timing"}),"\n",(0,a.jsx)(n.p,{children:"When executing processes that require login, authentication must be performed at the time the server receives the request."}),"\n",(0,a.jsxs)(n.p,{children:["In SaaSus Platform, authentication is carried out for each request using the SaaSus SDK.",(0,a.jsx)("br",{}),"\nBy executing the user information retrieval process in the SDK, the following information can be obtained:",(0,a.jsx)("br",{}),"\n\u30fbToken validation",(0,a.jsx)("br",{}),"\n\u30fbRetrieval of logged-in user information (user data, tenant data, permissions)",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["If there are multiple processes that require login, it is necessary to check the login status by retrieving user information using the SaaSus SDK at the start of each process.\n",(0,a.jsx)(n.img,{alt:"04",src:t(98265).A+"",width:"1008",height:"426"})]}),"\n",(0,a.jsxs)(n.p,{children:["As the number of processes increases, implementing authentication individually becomes challenging.",(0,a.jsx)("br",{}),"\nTherefore, it is recommended to utilize the middleware functionality of the framework to introduce a unified authentication check mechanism.\n",(0,a.jsx)(n.img,{alt:"05",src:t(1360).A+"",width:"946",height:"424"})]}),"\n",(0,a.jsx)(n.h1,{id:"types-of-tokens",children:"Types of Tokens"}),"\n",(0,a.jsxs)(n.p,{children:["SaaSus Platform generates the following three types of tokens:",(0,a.jsx)("br",{}),"\n\u30fbID Token",(0,a.jsx)("br",{}),"\n\u30fbAccess Token",(0,a.jsx)("br",{}),"\n\u30fbRefresh Token",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h3,{id:"id-token",children:"ID Token"}),"\n",(0,a.jsxs)(n.p,{children:["The ID token is used for authentication and has a validity period of one hour.",(0,a.jsx)("br",{}),"\nOnce the token expires, it becomes invalid, and the SaaS user will be logged out."]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"// In the case of Laravel, use the standard Auth Middleware of the SaaSus SDK in the routing file.\n// Define routes for features that require authentication on the SaaSus Platform.\nRoute::middleware(\\AntiPatternInc\\Saasus\\Laravel\\Middleware\\Auth::class)->group(function () {\n    Route::get('/userinfo', [IndexController::class, 'userinfo']);\n    Route::get('/users', [IndexController::class, 'users']);\n    Route::get('/tenant_attributes', [IndexController::class, 'tenantAttributes']);\n    Route::get('/user_attributes', [IndexController::class, 'userAttributes']);\n    Route::post('/user_register', [IndexController::class, 'userRegister']);\n    Route::delete('/user_delete', [IndexController::class, 'userDelete']);\n    Route::get('/delete_user_log', [IndexController::class, 'deleteUserLog']);\n    Route::get('/pricing_plan', [IndexController::class, 'pricingPlan']);\n    Route::get('/tenant_attributes_list', [IndexController::class, 'tenantAttributesList']);\n    Route::post('/self_sign_up', [IndexController::class, 'selfSignUp']);\n    Route::post('/logout', [IndexController::class, 'logout']);\n});\n"})})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// In the case of Express, use the standard AuthMiddleware of the SaaSus SDK.\n// Define routes for features that require authentication on the SaaSus Platform.\nimport { AuthMiddleware } from 'saasus-sdk'\n\napp.use([\n  '/userinfo', \n  '/users', \n  '/tenant_attributes', \n  '/user_register', \n  '/user_delete', \n  '/delete_user_log', \n  '/pricing_plan', \n  '/tenant_attributes_list', \n  '/self_sign_up'\n], AuthMiddleware)\n"})})}),(0,a.jsx)(o.A,{value:"go",label:"Go",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// By using the created authMiddlewareEcho, user authentication is performed, and UserInfo is set in the context.\nauthMiddleware := authMiddlewareEcho(idTokenGetter)\n\ne.GET("/userinfo", getMe, authMiddleware)\ne.GET("/users", getUsers, authMiddleware)\ne.GET("/tenant_attributes", getTenantAttributes, authMiddleware)\ne.GET("/user_attributes", getUserAttributes, authMiddleware)\ne.GET("/pricing_plan", getPricingPlan, authMiddleware)\ne.POST("/user_register", userRegister, authMiddleware)\ne.DELETE("/user_delete", userDelete, authMiddleware)\ne.GET("/delete_user_log", getDeleteUserLogs, authMiddleware)\ne.POST("/self_sign_up", selfSignup, authMiddleware)\ne.POST("/logout", logout, authMiddleware)\n\nfunc authMiddlewareEcho(getter middleware.IDTokenGetter) echo.MiddlewareFunc {\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tuserInfo, err := middleware.Authenticate(c.Request().Context(), getter.GetIDToken(c.Request()))\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(c.Response().Writer, "Unauthorized "+err.Error(), http.StatusUnauthorized)\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\tc.Set(string(ctxlib.UserInfoKey), userInfo)\n\t\t\treturn next(c)\n\t\t}\n\t}\n}\n'})})}),(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# In the case of FastAPI, create an authentication method.\ndef fastapi_auth(request: Request) -> Union[dict, HTTPException]:\n    auth_header = request.headers.get("Authorization", "")\n    token = auth_header.replace("Bearer ", "") if "Bearer " in auth_header else ""\n    referer = request.headers.get("Referer", "")\n    user_info, error = auth.authenticate(id_token=token, referer=referer)\n    if error:\n        raise HTTPException(status_code=401, detail=str(error))\n    return user_info\n\n# Call the created authentication method in routes that require authentication.\n@app.get("/userinfo")\ndef get_user_info(user_info: dict = Depends(fastapi_auth)):\n    return user_info\n'})})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Create a method to obtain the ID token\npublic static String getIDToken(HttpServletRequest request) {\n    String authHeader = request.getHeader("Authorization");\n    if (authHeader != null) {\n        StringTokenizer st = new StringTokenizer(authHeader);\n        if (st.countTokens() == 2 && st.nextToken().equalsIgnoreCase("Bearer")) {\n            return st.nextToken();\n        }\n    }\n    return "";\n}\n\n@GetMapping(value = "/userinfo", produces = "application/json")\npublic ResponseEntity<?> getMe(HttpSession session, HttpServletRequest request) throws Exception {\n    AuthApiClient apiClient = new Configuration().getAuthApiClient();\n    apiClient.setReferer(request.getHeader("Referer"));\n\n    UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n    UserInfo userInfo = null;\n    try {\n        // Call the created method to obtain the ID token when executing authentication-required processes.\n        userInfo = userInfoApi.getUserInfo(getIDToken(request));\n        System.out.println(userInfo);\n    } catch (ApiException e) {\n        System.err.println("Exception when calling UserInfoApi#getUserInfo");\n        System.err.println("Status code: " + e.getCode());\n        System.err.println("Reason: " + e.getResponseBody());\n        System.err.println("Response headers: " + e.getResponseHeaders());\n        e.printStackTrace();\n        throw e;\n    }\n\n    System.out.println(userInfo.toJson());\n    return ResponseEntity.ok(userInfo.toJson());\n}\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#(.Net8)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Create a method to obtain the ID token\nstring? GetBearerToken(HttpContext context)\n{\n    if (context.Request.Headers.TryGetValue("Authorization", out var authHeader) &&\n        authHeader.ToString().StartsWith("Bearer "))\n    {\n        return authHeader.ToString().Substring("Bearer ".Length).Trim();\n    }\n    return null;\n}\n\napp.MapGet("/userinfo", async (HttpContext context) =>\n{\n    // Call the created method to obtain the ID token when executing authentication-required processes.\n    var token = GetBearerToken(context);\n    if (string.IsNullOrEmpty(token))\n    {\n        return Results.Unauthorized();\n    }\n\n    try\n    {\n        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n        var userInfoApi = new UserInfoApi(authApiClientConfig);\n        var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n        var jsonResponse = userInfo.ToJson();\n        return Results.Text(jsonResponse, "application/json");\n    }\n    catch (Exception ex)\n    {\n        return HandleApiException(ex);\n    }\n});\n'})})}),(0,a.jsx)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Create a method to obtain the ID token\nprivate string GetBearerToken(HttpRequestMessage request)\n{\n    var authHeader = request.Headers.Authorization;\n    if (authHeader != null && authHeader.Scheme.Equals("Bearer", StringComparison.OrdinalIgnoreCase))\n    {\n        return authHeader.Parameter?.Trim() ?? throw new HttpResponseException(HttpStatusCode.Unauthorized);\n    }\n\n    throw new HttpResponseException(HttpStatusCode.Unauthorized);\n}\n\n[HttpGet]\n[Route("userinfo")]\npublic async Task<IHttpActionResult> GetUserInfo()\n{\n    try\n    {\n        // Call the created method to obtain the ID token when executing authentication-required processes.\n        var token = GetBearerToken(Request);\n        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n        var userInfoApi = new UserInfoApi(authApiClientConfig);\n        var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n        return Ok(userInfo);\n    }\n    catch (Exception ex)\n    {\n        return HandleApiException(ex);\n    }\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"refresh-token",children:"Refresh Token"}),"\n",(0,a.jsxs)(n.p,{children:["If a longer login session is required, the refresh token can be used to regenerate the ID token, enabling continuous login.",(0,a.jsx)("br",{}),"\nThe refresh token has a validity period of one month."]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"public function refresh(Request $request)\n{\n    // Obtain the refresh token\n    $refreshToken = $request->cookie('SaaSusRefreshToken');\n    if (!is_string($refreshToken)) {\n        return response('Refresh token not found', Response::HTTP_BAD_REQUEST);\n    }\n\n    try {\n        $authClient = $this->client->getAuthClient();\n\n        // The first argument is for setting the temporary code, so specify Blank.\n        // Set the authentication flow to refreshTokenAuth in the second argument, and set the refresh token retrieved from the Cookie in the third argument.\n        $response = $authClient->getAuthCredentials([\n            '',\n            'refreshTokenAuth',\n            $refreshToken\n        ]);\n\n        return response()->json($response->getBody());\n    } catch (\\Exception $e) {\n        return response('Error occurred', Response::HTTP_INTERNAL_SERVER_ERROR);\n    }\n}\n"})})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"app.get('/refresh', async (request: Request, response: Response) => {\n    // Obtain the refresh token\n    const refreshToken = request.cookies.SaaSusRefreshToken\n    if (typeof refreshToken !== 'string') {\n        response.status(400).send('Refresh token not found')\n        return\n    }\n\n    const client = new AuthClient()\n    // The first argument is for setting the temporary code, so specify Blank.\n    // Set the authentication flow to refreshTokenAuth in the second argument, and set the refresh token retrieved from the Cookie in the third argument.\n    const credentials = (\n        await client.credentialApi.getAuthCredentials(\n        '',\n        'refreshTokenAuth',\n        refreshToken\n        )\n    ).data\n    response.send(credentials)\n})\n"})})}),(0,a.jsx)(o.A,{value:"go",label:"Go",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'func refresh(c echo.Context) error {\n    // Obtain the refresh token\n\ttoken, err := c.Cookie("SaaSusRefreshToken")\n\tif err != nil {\n\t\treturn c.String(http.StatusInternalServerError, "internal server error")\n\t}\n\tc.Logger().Error("SaaSusRefreshToken: %v", token.Value)\n\n    // Set the refresh token retrieved from the Cookie in the second argument.\n\tcredentials, err := credential.GetAuthCredentialsWithRefreshTokenAuth(context.Background(), token.Value)\n\tif err != nil {\n\t\treturn c.String(http.StatusInternalServerError, "internal server error")\n\t}\n\n\treturn c.JSON(http.StatusOK, credentials)\n}\n'})})}),(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@app.get("/refresh")\ndef refresh(request: Request):\n    # Obtain the refresh token\n    saasus_refresh_token = request.cookies.get("SaaSusRefreshToken")\n    if not saasus_refresh_token:\n        raise HTTPException(status_code=400, detail="SaaSusRefreshToken is missing")\n\n    try:\n        # Obtain new authentication credentials using the refresh token.\n        credentials = callback.get_refresh_token_auth_credentials(saasus_refresh_token)\n\n        return credentials\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n'})})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Obtain the refresh token from the cookie.\n@GetMapping(value = "/refresh", produces = "application/json")\npublic ResponseEntity<?> refresh(HttpSession session, HttpServletRequest request,\n        @CookieValue(name = "SaaSusRefreshToken", defaultValue = "") String cookieValue) throws Exception {\n    if (cookieValue == "") {\n        return ResponseEntity.badRequest().body("No refresh token found");\n    }\n\n    AuthApiClient apiClient = new Configuration().getAuthApiClient();\n    apiClient.setReferer(request.getHeader("Referer"));\n    CredentialApi apiInstance = new CredentialApi(apiClient);\n    Credentials result = null;\n    try {\n        // Set the first argument to null to specify a temporary code.\n        // Set the second argument to refreshTokenAuth for the authentication flow, and set the third argument to the refresh token obtained from the cookie.\n        result = apiInstance.getAuthCredentials(null, "refreshTokenAuth", cookieValue);\n    } catch (ApiException e) {\n        System.err.println("Exception when calling CredentialApi#getAuthCredentials");\n        System.err.println("Status code: " + e.getCode());\n        System.err.println("Reason: " + e.getResponseBody());\n        System.err.println("Response headers: " + e.getResponseHeaders());\n        e.printStackTrace();\n        throw e;\n    }\n    return ResponseEntity.ok(result.toJson());\n}\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#(.Net8)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'app.MapGet("/refresh", async (HttpContext context) =>\n{\n    // Retrieve the refresh token from the cookie.\n    var refreshToken = context.Request.Cookies["SaaSusRefreshToken"];\n    if (string.IsNullOrEmpty(refreshToken))\n    {\n        return Results.BadRequest("No refresh token found.");\n    }\n\n    try\n    {\n        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n        var credentialApi = new CredentialApi(authApiClientConfig);\n        // Set the first argument to null to specify a temporary code.\n        // Set the second argument to refreshTokenAuth for the authentication flow, and set the third argument to the refresh token obtained from the cookie.\n        var credentials = await credentialApi.GetAuthCredentialsAsync(null, "refreshTokenAuth", refreshToken);\n\n        var jsonResponse = credentials.ToJson();\n        return Results.Text(jsonResponse, "application/json");\n    }\n    catch (Exception ex)\n    {\n        return HandleApiException(ex);\n    }\n});\n'})})}),(0,a.jsx)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[HttpGet]\n[Route("refresh")]\npublic async Task<IHttpActionResult> Refresh()\n{\n    try\n    {\n        // Retrieve the refresh token from the cookie.\n        var refreshTokenCookie = Request.Headers.GetCookies("SaaSusRefreshToken").FirstOrDefault();\n        if (refreshTokenCookie == null)\n        {\n            return BadRequest("No refresh token found.");\n        }\n\n        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n        var credentialApi = new CredentialApi(authApiClientConfig);\n        // Set the first argument to null to specify a temporary code.\n        // Set the second argument to refreshTokenAuth for the authentication flow, and set the third argument to the refresh token obtained from the cookie.\n        var credentials = await credentialApi.GetAuthCredentialsAsync(null, "refreshTokenAuth", refreshTokenCookie["SaaSusRefreshToken"].Value);\n\n        return Ok(credentials);\n    }\n    catch (Exception ex)\n    {\n        return HandleApiException(ex);\n    }\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"access-token",children:"Access Token"}),"\n",(0,a.jsxs)(n.p,{children:["The access token is required when using features that require authorization.",(0,a.jsx)("br",{}),"\nFor example, it is used for functions that require specific permissions, such as inviting users to a tenant."]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"    // Retrieve information from the request.\n    $email = $request->input('email');\n    $tenantId = $request->input('tenantId');\n    if (!$email || !$tenantId) {\n        return response()->json(['message' => 'Missing required fields'], Response::HTTP_BAD_REQUEST);\n    }\n\n    // Retrieve UserInfo.\n    $userInfo = $request->userinfo;\n    if (!$userInfo) {\n        return response()->json(['detail' => 'No user'], Response::HTTP_BAD_REQUEST);\n    }\n\n    try {\n        // Retrieve the access token of the user creating the invitation.\n        $accessToken = $request->header('X-Access-Token');\n\n        // If the access token is not included in the request header, return an error.\n        if (empty($accessToken)) {\n            return response()->json(['error' => 'Access token is missing'], 401);\n        }\n\n        // Create the parameters for the tenant invitation.\n        $createTenantInvitationParamEnvsItem = new CreateTenantInvitationParamEnvsItem();\n        $createTenantInvitationParamEnvsItem\n            ->setId(3) // Specify the ID of the production environment: 3.\n            ->setRoleNames(['admin']);\n        $createTenantInvitationParam = new CreateTenantInvitationParam();\n        $createTenantInvitationParam\n            ->setEmail($email)\n            ->setAccessToken($accessToken)\n            ->setEnvs([$createTenantInvitationParamEnvsItem]);\n\n        // Call the tenant invitation API.\n        $authClient = $this->client->getAuthClient();\n        $authClient->createTenantInvitation(\n            $tenantId,\n            $createTenantInvitationParam\n        );\n\n        return response()->json(['message' => 'Create tenant user invitation successfully']);\n    } catch (\\Exception $e) {\n        Log::error($e->getMessage());\n        return response()->json(['detail' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR);\n    }\n"})})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"    const { email, password, tenantId, userAttributeValues }: UserRegisterRequest = request.body\n    if (!email || !password || !tenantId) {\n        return response.status(400).send({ message: 'Missing required fields' });\n    }\n\n    const userInfo = request.userInfo\n    if (userInfo === undefined) {\n        return response.status(400).json({ detail: 'No user' })\n    }\n\n    try {\n        // Retrieve the access token of the user creating the invitation.\n        const accessToken = request.header('X-Access-Token')\n\n        // If the access token is not included in the request header, return an error.\n        if (!accessToken) {\n        return response.status(401).json({ detail: 'Access token is missing' })\n        }\n\n        // Create the parameters for the tenant invitation.\n        const invitedUserEnvironmentInformationInner: InvitedUserEnvironmentInformationInner = {\n        id: 3,  // Specify the ID of the production environment: 3.\n        role_names: ['admin']\n        }\n        const createTenantInvitationParam: CreateTenantInvitationParam = {\n        email: email,\n        access_token: accessToken,\n        envs: [invitedUserEnvironmentInformationInner]\n        }\n\n        // Call the tenant invitation API.\n        const client = new AuthClient()\n        await client.invitationApi.createTenantInvitation(tenantId, createTenantInvitationParam)\n\n        response.json({ message: 'Create tenant user invitation successfully' })\n    } catch (error) {\n        console.error(error);\n        response.status(500).json({ detail: error });\n    }\n"})})}),(0,a.jsx)(o.A,{value:"go",label:"Go",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'var request UserRegisterRequest\n\tif err := c.Bind(&request); err != nil {\n\t\treturn c.JSON(http.StatusBadRequest, echo.Map{"error": "Invalid request"})\n\t}\n\n\temail := request.Email\n\ttenantID := request.TenantID\n\n\tuserInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)\n\tif !ok {\n\t\tc.Logger().Error("failed to get user info")\n\t\treturn c.String(http.StatusInternalServerError, "internal server error")\n\t}\n\n\t// Retrieve the access token of the user creating the invitation.\n\taccessToken := c.Request().Header.Get("X-Access-Token")\n\n\t// If the access token is not included in the request header, return an error.\n\tif accessToken == "" {\n\t\treturn c.String(http.StatusBadRequest, "Access token is missing")\n\t}\n\n\t// Create the parameters for the tenant invitation.\n\tcreateTenantInvitationJSONRequestBody := authapi.CreateTenantInvitationJSONRequestBody{\n\t\tAccessToken: accessToken,\n\t\tEmail:       email,\n\t\tEnvs: []struct {\n\t\t\tId        uint64   `json:"id"`\n\t\t\tRoleNames []string `json:"role_names"`\n\t\t}{\n\t\t\t{\n\t\t\t\tId:        3,                 // Specify the ID of the production environment: 3.\n\t\t\t\tRoleNames: []string{"admin"},\n\t\t\t},\n\t\t},\n\t}\n\n\t// Call the tenant invitation API.\n\tauthClient.CreateTenantInvitation(context.Background(), tenantID, createTenantInvitationJSONRequestBody)\n\n\treturn c.JSON(http.StatusOK, echo.Map{"message": "Create tenant user invitation successfully"})\n'})})}),(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Retrieve information from the request.\nemail = request.email\ntenant_id = request.tenantId\n\ntry:\n    # Retrieve the access token of the user creating the invitation.\n    access_token = fast_request.headers.get("X-Access-Token")\n\n    # If the access token is not included in the request header, return an error.\n    if not access_token:\n        raise HTTPException(status_code=401, detail="Access token is missing")\n    \n    # Create the parameters for the tenant invitation.\n    invited_user_environment_information_inner = InvitedUserEnvironmentInformationInner(\n        id=3, # Specify the ID of the production environment: 3.\n        role_names=[\'admin\']\n    )\n    create_tenant_invitation_param = CreateTenantInvitationParam(\n        email=email,\n        access_token=access_token,\n        envs=[invited_user_environment_information_inner]\n    )\n\n    # Call the tenant invitation API.\n    InvitationApi(api_client=api_client).create_tenant_invitation(tenant_id=tenant_id, create_tenant_invitation_param=create_tenant_invitation_param)\n\n    return {"message": "Create tenant user invitation successfully"}\nexcept Exception as e:\n    print(e)\n    raise HTTPException(status_code=500, detail=str(e))\n'})})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'try {\n    String email = requestBody.getEmail();\n    String tenantId = requestBody.getTenantId();\n\n    AuthApiClient apiClient = new Configuration().getAuthApiClient();\n    apiClient.setReferer(request.getHeader("Referer"));\n\n    UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n    UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));\n\n    // Retrieve the access token from the request header.\n    String accessToken = request.getHeader("X-Access-Token");\n\n    // If the access token is not included in the request header, return an error.\n    if (accessToken == null || accessToken.isEmpty()) {\n        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Access token is missing");\n    }\n\n    // Create the parameters for the tenant invitation.\n    InvitedUserEnvironmentInformationInner invitedUserEnvironmentInformationInner = new InvitedUserEnvironmentInformationInner()\n        .id(3) // Specify the ID of the production environment: 3.\n        .addRoleNamesItem("admin");\n    CreateTenantInvitationParam createTenantInvitationParam = new CreateTenantInvitationParam()\n        .email(email)\n        .accessToken(accessToken)\n        .addEnvsItem(invitedUserEnvironmentInformationInner);\n\n    // Call the tenant invitation API.\n    InvitationApi invitationApi = new InvitationApi(apiClient);\n    invitationApi.createTenantInvitation(tenantId, createTenantInvitationParam);\n\n    Map<String, String> successResponse = new HashMap<>();\n    successResponse.put("message", "Create tenant user invitation successfully");\n    return ResponseEntity.ok(successResponse);\n} catch (ApiException e) {\n    System.err.println("API Exception: " + e.getMessage());\n    throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "API Exception: " + e.getMessage(), e);\n} catch (Exception e) {\n    System.err.println("Unexpected Exception: " + e.getMessage());\n    throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Unexpected Exception: " + e.getMessage(), e);\n}\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#(.Net8)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var validationResults = new List<ValidationResult>();\nvar validationContext = new ValidationContext(requestBody);\nif (!Validator.TryValidateObject(requestBody, validationContext, validationResults, true))\n{\n    var errors = validationResults.Select(vr => new { Field = vr.MemberNames.FirstOrDefault(), Error = vr.ErrorMessage });\n    return Results.BadRequest(new { error = "Validation failed.", details = errors });\n}\n\nstring email = requestBody.Email;\nstring tenantId = requestBody.TenantId;\n\ntry\n{\n    // Retrieve the access token from the request header.\n    var accessToken = context.Request.Headers["X-Access-Token"].FirstOrDefault();\n\n    // If the access token is not included in the request header, return an error.\n    if (string.IsNullOrEmpty(accessToken))\n    {\n        return Results.Unauthorized();\n    }\n\n    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n    var invitationApi = new InvitationApi(authApiClientConfig);\n\n    // Create an object to add to the envs.\n    var invitedEnv = new InvitedUserEnvironmentInformationInner(\n        id: 3, // Specify the ID of the production environment: 3.\n        roleNames: new List<string> { "admin" }\n    );\n\n    // Create a list of envs\n    var envsList = new List<InvitedUserEnvironmentInformationInner> { invitedEnv };\n\n    // Create the parameters for the tenant invitation.\n    var createTenantInvitationParam = new CreateTenantInvitationParam(\n        email,\n        accessToken,\n        envsList\n    );\n\n    // Call the tenant invitation API.\n    invitationApi.CreateTenantInvitation(tenantId, createTenantInvitationParam);\n\n    return Results.Ok(new { message = "Create tenant user invitation successfully" });\n}\ncatch (Exception ex)\n{\n    Console.Error.WriteLine($"Error: {ex.Message}");\n    return Results.Problem(detail: ex.Message, statusCode: 500);\n}\n'})})}),(0,a.jsx)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'if (!ModelState.IsValid)\n    return BadRequest(ModelState);\n\nstring email = request.Email;\nstring tenantId = request.TenantId;\n\ntry\n{\n    // Retrieve the access token from the request header.\n    var accessToken = HttpContext.Current.Request.Headers.Get("X-Access-Token");\n\n    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n    var invitationApi = new InvitationApi(authApiClientConfig);\n\n    // Create an object to add to the envs.\n    var invitedEnv = new InvitedUserEnvironmentInformationInner(\n        id: 3, // Specify the ID of the production environment: 3.\n        roleNames: new List<string> { "admin" }\n    );\n\n    // Create a list of envs\n    var envsList = new List<InvitedUserEnvironmentInformationInner> { invitedEnv };\n\n    // Create the parameters for the tenant invitation.\n    var createTenantInvitationParam = new CreateTenantInvitationParam(\n        email,\n        accessToken,\n        envsList\n    );\n\n    // Call the tenant invitation API.\n    invitationApi.CreateTenantInvitation(tenantId, createTenantInvitationParam);\n\n    return Ok(new { message = "Create tenant user invitation successfully", request });\n}\ncatch (Exception ex)\n{\n    return HandleApiException(ex);\n}\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},98265:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/authentication-methods-04-f7fd41c0dec574629a36a08c6deeed6b.png"}}]);