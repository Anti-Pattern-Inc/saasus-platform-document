"use strict";(self.webpackChunksaasus_platform_document=self.webpackChunksaasus_platform_document||[]).push([[949],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},43869:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"part-6/implementation-guide/implementing-multi-factor-authentication-apiserver","title":"Implementing Multi-Factor Authentication (API Server)","description":"This document provides sample implementations for Multi-Factor Authentication (MFA) in a SaaS application.","source":"@site/versioned_docs/version-1.11/part-6/implementation-guide/implementing-multi-factor-authentication-apiserver.md","sourceDirName":"part-6/implementation-guide","slug":"/part-6/implementation-guide/implementing-multi-factor-authentication-apiserver","permalink":"/docs/part-6/implementation-guide/implementing-multi-factor-authentication-apiserver","draft":false,"unlisted":false,"tags":[],"version":"1.11","frontMatter":{"title":"Implementing Multi-Factor Authentication (API Server)","slug":"implementing-multi-factor-authentication-apiserver","excerpt":"","hidden":false,"createdAt":"Fri Feb 28 2025 09:00:00 GMT+0000 (Coordinated Universal Time)","updatedAt":"Fri Feb 28 2025 09:00:00 GMT+0000 (Coordinated Universal Time)"},"sidebar":"docsSidebar","previous":{"title":"Implementation Example Using Metering API","permalink":"/docs/part-6/implementation-guide/example-implementation-using-metering-api"},"next":{"title":"About SaaS User Accounts","permalink":"/docs/part-6/usecase/about-saas-user-accounts"}}');var a=t(74848),s=t(28453),i=t(65537),o=t(79329);const c={title:"Implementing Multi-Factor Authentication (API Server)",slug:"implementing-multi-factor-authentication-apiserver",excerpt:"",hidden:!1,createdAt:"Fri Feb 28 2025 09:00:00 GMT+0000 (Coordinated Universal Time)",updatedAt:"Fri Feb 28 2025 09:00:00 GMT+0000 (Coordinated Universal Time)"},l="MFA Implementation Samples",u={},p=[{value:"<strong>1. Frontend Implementation</strong>",id:"1-frontend-implementation",level:2},{value:"<strong>1.1. Added Components</strong>",id:"11-added-components",level:3},{value:"<strong>1.1.1. MFA Settings Dialog</strong>",id:"111-mfa-settings-dialog",level:4},{value:"<strong>1.1.2. Header User Menu</strong>",id:"112-header-user-menu",level:4},{value:"1.2. How to Use the Sample Implementation",id:"12-how-to-use-the-sample-implementation",level:3},{value:"<strong>2. Backend Implementation</strong>",id:"2-backend-implementation",level:2},{value:"<strong>2.1. Added Endpoints</strong>",id:"21-added-endpoints",level:3},{value:"<strong>2.1.1. Get MFA Status API</strong>",id:"211-get-mfa-status-api",level:4},{value:"<strong>2.1.2. Generate Secret Code for MFA App Registration API</strong>",id:"212-generate-secret-code-for-mfa-app-registration-api",level:4},{value:"<strong>2.1.3. Verify MFA Authentication Code API</strong>",id:"213-verify-mfa-authentication-code-api",level:4},{value:"<strong>2.1.4. Enable MFA API</strong>",id:"214-enable-mfa-api",level:4},{value:"<strong>2.1.5. Disable MFA API</strong>",id:"215-disable-mfa-api",level:4},{value:"<strong>3. How to Use the Sample Implementation</strong>",id:"3-how-to-use-the-sample-implementation",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This document provides sample implementations for Multi-Factor Authentication (MFA) in a SaaS application."}),"\n",(0,a.jsx)(n.p,{children:"For detailed API specifications, please refer to the API Documentation."}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"mfa-implementation-samples",children:(0,a.jsx)(n.strong,{children:"MFA Implementation Samples"})})}),"\n",(0,a.jsx)(n.h2,{id:"1-frontend-implementation",children:(0,a.jsx)(n.strong,{children:"1. Frontend Implementation"})}),"\n",(0,a.jsx)(n.h3,{id:"11-added-components",children:(0,a.jsx)(n.strong,{children:"1.1. Added Components"})}),"\n",(0,a.jsx)(n.p,{children:"To manage MFA authentication settings, the following components have been added."}),"\n",(0,a.jsx)(n.h4,{id:"111-mfa-settings-dialog",children:(0,a.jsx)(n.strong,{children:"1.1.1. MFA Settings Dialog"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/components/dialogs/UserMfaSettingDialog.tsx",children:"React Sample Implementation"}),(0,a.jsx)(n.br,{}),"\n","\u2192 A dialog component that allows users to enable/disable MFA and check MFA status."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"112-header-user-menu",children:(0,a.jsx)(n.strong,{children:"1.1.2. Header User Menu"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/components/header/HeaderUserbox.tsx",children:"React Sample Implementation"}),(0,a.jsx)(n.br,{}),"\n","\u2192 Added an item to open the MFA settings dialog in the user menu."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"12-how-to-use-the-sample-implementation",children:"1.2. How to Use the Sample Implementation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)("a",{href:"https://github.com/saasus-platform/implementation-sample-front-react/blob/main/README.md",target:"_blank",children:"React"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"2-backend-implementation",children:(0,a.jsx)(n.strong,{children:"2. Backend Implementation"})}),"\n",(0,a.jsx)(n.p,{children:"To implement MFA functionality, the following endpoints have been added."}),"\n",(0,a.jsx)(n.h3,{id:"21-added-endpoints",children:(0,a.jsx)(n.strong,{children:"2.1. Added Endpoints"})}),"\n",(0,a.jsx)(n.h4,{id:"211-get-mfa-status-api",children:(0,a.jsx)(n.strong,{children:"2.1.1. Get MFA Status API"})}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"go",label:"Go",default:!0,children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'e.GET("/mfa_status", getMfaStatus, authMiddleware)'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// Retrieve MFA status (enabled/disabled)\nfunc getMfaStatus(c echo.Context) error {\n\t// Retrieve user information from context\n\tuserInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)\n\tif !ok {\n\t\tc.Logger().Error("Failed to get user info")\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})\n\t}\n\n\t// Use the SaaSus API to get the user\'s MFA status\n\tresponse, err := authClient.GetUserMfaPreferenceWithResponse(context.Background(), userInfo.Id)\n\tif err != nil || response.JSON200 == nil {\n\t\tc.Logger().Errorf("Failed to get MFA status: %v", err)\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve MFA status"})\n\t}\n\n\t// Return MFA enabled/disabled status\n\treturn c.JSON(http.StatusOK, map[string]bool{"enabled": response.JSON200.Enabled})\n}\n'})})]}),(0,a.jsxs)(o.A,{value:"python",label:"Python",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@app.get("/mfa_status")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Retrieve MFA status (enabled/disabled)\ndef get_mfa_status(auth_user: dict = Depends(fastapi_auth), request: Request = None):\n    try:\n        # Use the SaaSus API to retrieve the user\'s MFA preference\n        response = SaasUserApi(api_client=api_client).get_user_mfa_preference(user_id=auth_user.id)\n        # Return the MFA enabled/disabled status\n        return {"enabled": response.enabled}\n    except Exception as e:\n        print(e)\n        raise HTTPException(status_code=500, detail=str(e))\n'})})]}),(0,a.jsxs)(o.A,{value:"java",label:"Java",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@GetMapping(value = "/mfa_status", produces = "application/json")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    /**\n     * Retrieve MFA status (enabled/disabled)\n     */\n    public ResponseEntity<?> getMfaStatus(HttpServletRequest request) {\n        try {\n            // Initialize the SaaSus API client\n            AuthApiClient apiClient = new Configuration().getAuthApiClient();\n            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));\n\n            // Retrieve user information\n            UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));\n\n            // Retrieve MFA status\n            SaasUserApi saasUserApi = new SaasUserApi(apiClient);\n            Boolean enabled = saasUserApi.getUserMfaPreference(userInfo.getId()).getEnabled();\n\n            Map<String, Boolean> result = new HashMap<>();\n            result.put("enabled", enabled);\n            return ResponseEntity.ok(result);\n        } catch (ApiException e) {\n            System.err.println("API Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        } catch (Exception e) {\n            System.err.println("Unexpected Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        }\n    }\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp",label:"C#(.Net8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'app.MapGet("/mfa_status")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'            app.MapGet("/mfa_status", async (HttpContext context) =>\n            {\n                // Get bearer token from Authorization header\n                var token = GetBearerToken(context);\n                if (string.IsNullOrEmpty(token))\n                {\n                    return Results.Unauthorized();\n                }\n\n                try\n                {\n                    // Initialize SaaSus API client and retrieve user info\n                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n                    var userInfoApi = new UserInfoApi(authApiClientConfig);\n                    var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                    // Retrieve MFA preference\n                    var saasUserApi = new SaasUserApi(authApiClientConfig);\n                    var mfaPref = await saasUserApi.GetUserMfaPreferenceAsync(userInfo.Id);\n\n                    // Return result in JSON\n                    return Results.Json(new { enabled = mfaPref.Enabled });\n                }\n                catch (Exception ex)\n                {\n                    return HandleApiException(ex);\n                }\n            });\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'[HttpGet, Route("mfa_status")]'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"        // Retrieve MFA status (enabled/disabled)\n        public async Task<IHttpActionResult> GetMfaStatus()\n        {\n            try\n            {\n                // Get bearer token from Authorization header\n                var token = GetBearerToken(Request);\n\n                // Initialize the SaaSus API client\n                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n\n                // Retrieve user information\n                var userInfoApi = new UserInfoApi(authApiClientConfig);\n                var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                // Retrieve MFA preference\n                var saasUserApi = new SaasUserApi(authApiClientConfig);\n                var mfaPref = await saasUserApi.GetUserMfaPreferenceAsync(userInfo.Id);\n\n                // Return result\n                return Ok(new { enabled = mfaPref.Enabled });\n            }\n            catch (Exception ex)\n            {\n                return HandleApiException(ex);\n            }\n        }\n"})})]})]}),"\n",(0,a.jsx)(n.h4,{id:"212-generate-secret-code-for-mfa-app-registration-api",children:(0,a.jsx)(n.strong,{children:"2.1.2. Generate Secret Code for MFA App Registration API"})}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"go",label:"Go",default:!0,children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'e.GET("/mfa_setup", getMfaSetup, authMiddleware)'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// Retrieve MFA setup information (generate QR code)\n// The frontend application must include X-Access-Token in the request header\nfunc getMfaSetup(c echo.Context) error {\n\t// Retrieve X-Access-Token from the request header\n\taccessToken := c.Request().Header.Get("X-Access-Token")\n\tif accessToken == "" {\n\t\treturn c.JSON(http.StatusUnauthorized, map[string]string{"error": "Access token is missing"})\n\t}\n\n\t// Retrieve user information from context\n\tuserInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)\n\tif !ok {\n\t\tc.Logger().Error("Failed to get user info")\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})\n\t}\n\n\t// Use the SaaSus API to generate a secret code for MFA authentication app registration\n\tresponse, err := authClient.CreateSecretCodeWithResponse(context.Background(), userInfo.Id, authapi.CreateSecretCodeJSONRequestBody{\n\t\tAccessToken: accessToken,\n\t})\n\tif err != nil || response.JSON201 == nil {\n\t\tc.Logger().Errorf("Failed to create secret code: %v", err)\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to generate QR code"})\n\t}\n\n\t// Generate a QR code URL for Google Authenticator and other authentication apps\n\tqrCodeUrl := "otpauth://totp/SaaSusPlatform:" + userInfo.Email + "?secret=" + response.JSON201.SecretCode + "&issuer=SaaSusPlatform"\n\n\t// Return the QR code URL\n\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t"qrCodeUrl": qrCodeUrl,\n\t})\n}\n'})})]}),(0,a.jsxs)(o.A,{value:"python",label:"Python",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@app.get("/mfa_setup")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Retrieve MFA setup information (generate QR code)\n# The frontend application must include X-Access-Token in the request header\ndef get_mfa_setup(request: Request, auth_user: dict = Depends(fastapi_auth)):\n    # Get X-Access-Token from request headers\n    access_token = request.headers.get("X-Access-Token")\n    if not access_token:\n        # Return 401 if access token is missing\n        raise HTTPException(status_code=401, detail="Access token is missing")\n\n    try:\n        create_secret_code_param = CreateSecretCodeParam(access_token=access_token)\n        # Use the SaaSus API to generate a secret code for MFA authentication app registration\n        response = SaasUserApi(api_client=api_client).create_secret_code(user_id=auth_user.id, create_secret_code_param=create_secret_code_param)\n        # Generate a QR code URL for Google Authenticator and other authentication apps\n        qr_code_url = f"otpauth://totp/SaaSusPlatform:{auth_user.email}?secret={response.secret_code}&issuer=SaaSusPlatform"\n        # Return the QR code URL\n        return {"qrCodeUrl": qr_code_url}\n    except Exception as e:\n        print(e)\n        raise HTTPException(status_code=500, detail=str(e))\n'})})]}),(0,a.jsxs)(o.A,{value:"java",label:"Java",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@GetMapping(value = "/mfa_setup", produces = "application/json")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    /**\n     * Retrieve MFA setup information (generate QR code)\n     */\n    public ResponseEntity<?> getMfaSetup(HttpServletRequest request) {\n        try {\n            // Get access token from request header\n            String accessToken = request.getHeader("X-Access-Token");\n            if (accessToken == null || accessToken.isEmpty()) {\n                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Access token is missing");\n            }\n\n            // Initialize the SaaSus API client and retrieve user info\n            AuthApiClient apiClient = new Configuration().getAuthApiClient();\n            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));\n            UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));\n\n            // Generate secret code\n            SaasUserApi saasUserApi = new SaasUserApi(apiClient);\n            SoftwareTokenSecretCode code = saasUserApi.createSecretCode(\n                userInfo.getId(),\n                new CreateSecretCodeParam().accessToken(accessToken)\n            );\n\n            // Generate a QR code URL for Google Authenticator and other authentication apps\n            String qrCodeUrl = "otpauth://totp/SaaSusPlatform:" + userInfo.getEmail() +\n                    "?secret=" + code.getSecretCode() + "&issuer=SaaSusPlatform";\n                    \n            Map<String, String> result = new HashMap<>();\n            result.put("qrCodeUrl", qrCodeUrl);\n            return ResponseEntity.ok(result);\n        } catch (ApiException e) {\n            System.err.println("API Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        } catch (Exception e) {\n            System.err.println("Unexpected Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        }\n    }\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp",label:"C#(.Net8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'app.MapGet("/mfa_setup")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'            app.MapGet("/mfa_setup", async (HttpContext context) =>\n            {\n                // Get access token and ID token\n                var token = GetBearerToken(context);\n                var accessToken = context.Request.Headers["X-Access-Token"].FirstOrDefault();\n                if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(accessToken))\n                {\n                    return Results.Unauthorized();\n                }\n\n                try\n                {\n                    // Initialize API client and retrieve user info\n                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n                    var userInfoApi = new UserInfoApi(authApiClientConfig);\n                    var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                    // Generate secret code\n                    var saasUserApi = new SaasUserApi(authApiClientConfig);\n                    var secretCode = await saasUserApi.CreateSecretCodeAsync(\n                        userInfo.Id,\n                        new CreateSecretCodeParam(accessToken)\n                    );\n\n                    // Generate a QR code URL for Google Authenticator and other authentication apps\n                    var qrCodeUrl = $"otpauth://totp/SaaSusPlatform:{userInfo.Email}?secret={secretCode.SecretCode}&issuer=SaaSusPlatform";\n\n                    return Results.Json(new { qrCodeUrl });\n                }\n                catch (Exception ex)\n                {\n                    return HandleApiException(ex);\n                }\n            });\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'[HttpGet, Route("mfa_setup")]'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'        // Retrieve MFA setup information (generate QR code)\n        public async Task<IHttpActionResult> SetupMfa()\n        {\n            try\n            {\n                // Get token and access token\n                var token = GetBearerToken(Request);\n                var accessToken = HttpContext.Current.Request.Headers.Get("X-Access-Token");\n\n                if (string.IsNullOrEmpty(accessToken))\n                {\n                    return Content(HttpStatusCode.Unauthorized, "Missing X-Access-Token header");\n                }\n\n                // Initialize API client\n                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n\n                // Retrieve user info\n                var userInfoApi = new UserInfoApi(authApiClientConfig);\n                var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                // Generate secret code\n                var saasUserApi = new SaasUserApi(authApiClientConfig);\n                var secretCode = await saasUserApi.CreateSecretCodeAsync(\n                    userInfo.Id,\n                    new CreateSecretCodeParam(accessToken)\n                );\n\n                // Generate a QR code URL for Google Authenticator and other authentication apps\n                var qrCodeUrl = $"otpauth://totp/SaaSusPlatform:{userInfo.Email}?secret={secretCode.SecretCode}&issuer=SaaSusPlatform";\n\n                return Ok(new { qrCodeUrl });\n            }\n            catch (Exception ex)\n            {\n                return HandleApiException(ex);\n            }\n        }\n'})})]})]}),"\n",(0,a.jsx)(n.h4,{id:"213-verify-mfa-authentication-code-api",children:(0,a.jsx)(n.strong,{children:"2.1.3. Verify MFA Authentication Code API"})}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"go",label:"Go",default:!0,children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'e.POST("/mfa_verify", verifyMfa, authMiddleware)'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// Verify the user\'s MFA authentication code\n// The frontend application must include X-Access-Token in the request header\nfunc verifyMfa(c echo.Context) error {\n\t// Retrieve user information from context\n\tuserInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)\n\tif !ok {\n\t\tc.Logger().Error("Failed to get user info")\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})\n\t}\n\n\t// Retrieve X-Access-Token from the request header\n\taccessToken := c.Request().Header.Get("X-Access-Token")\n\tif accessToken == "" {\n\t\treturn c.JSON(http.StatusUnauthorized, map[string]string{"error": "Access token is missing"})\n\t}\n\n\t// Retrieve the verification code from the request body\n\tvar requestBody struct {\n\t\tVerificationCode string `json:"verification_code"`\n\t}\n\tif err := c.Bind(&requestBody); err != nil {\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid request: malformed JSON or incorrect parameters"})\n\t}\n\tif requestBody.VerificationCode == "" {\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{"error": "Verification code is required"})\n\t}\n\n\t// Use the SaaSus API to register the authentication application\n\tresponse, err := authClient.UpdateSoftwareTokenWithResponse(context.Background(), userInfo.Id, authapi.UpdateSoftwareTokenJSONRequestBody{\n\t\tAccessToken:      accessToken,\n\t\tVerificationCode: requestBody.VerificationCode,\n\t})\n\tif err != nil || response.StatusCode() != http.StatusOK {\n\t\tc.Logger().Errorf("MFA verification failed: Status Code %d, Response %s", response.StatusCode(), string(response.Body))\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "MFA verification failed"})\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{"message": "MFA verification successful"})\n}\n'})})]}),(0,a.jsxs)(o.A,{value:"python",label:"Python",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@app.post("/mfa_verify")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Verify the user\'s MFA authentication code\n# The frontend application must include X-Access-Token in the request header\ndef verify_mfa(request: Request, mfa_request: VerifyMfaRequest, auth_user: dict = Depends(fastapi_auth)):\n    # Get X-Access-Token from request headers\n    access_token = request.headers.get("X-Access-Token")\n    if not access_token:\n        # Return 401 if access token is missing\n        raise HTTPException(status_code=401, detail="Access token is missing")\n\n    try:\n        update_software_token_param = UpdateSoftwareTokenParam(\n            access_token=access_token,\n            verification_code=mfa_request.verification_code\n        )\n\n        # Use the SaaSus API to register the authentication application\n        SaasUserApi(api_client=api_client).update_software_token(\n            user_id=auth_user.id, \n            update_software_token_param=update_software_token_param\n        )\n\n        return {"message": "MFA verification successful"}\n    except Exception as e:\n        print(e)\n        raise HTTPException(status_code=500, detail=str(e))\n'})})]}),(0,a.jsxs)(o.A,{value:"java",label:"Java",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@PostMapping(value = "/mfa_verify", produces = "application/json")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    /**\n     * Verify the user\'s MFA authentication code\n     */\n    public ResponseEntity<?> verifyMfa(@RequestBody Map<String, String> requestBody, HttpServletRequest request) {\n        try {\n            // Get access token and verification code\n            String accessToken = request.getHeader("X-Access-Token");\n            if (accessToken == null || accessToken.isEmpty()) {\n                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Access token is missing");\n            }\n\n            String verificationCode = requestBody.get("verification_code");\n            if (verificationCode == null || verificationCode.isEmpty()) {\n                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Verification code is required");\n            }\n\n            // Initialize the SaaSus API client and retrieve user info\n            AuthApiClient apiClient = new Configuration().getAuthApiClient();\n            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));\n            UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));\n\n            // Use the SaaSus API to verify the code and register the software token\n            SaasUserApi saasUserApi = new SaasUserApi(apiClient);\n            saasUserApi.updateSoftwareToken(\n                userInfo.getId(),\n                new UpdateSoftwareTokenParam()\n                    .accessToken(accessToken)\n                    .verificationCode(verificationCode)\n            );\n\n            Map<String, String> successResponse = new HashMap<>();\n            successResponse.put("message", "MFA verification successful");\n            return ResponseEntity.ok(successResponse);\n        } catch (ApiException e) {\n            System.err.println("API Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        } catch (Exception e) {\n            System.err.println("Unexpected Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        }\n    }\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp",label:"C#(.Net8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'app.MapPost("/mfa_verify")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'            app.MapPost("/mfa_verify", async ([FromBody] MfaVerifyRequest requestBody, HttpContext context) =>\n            {\n                // Get tokens and verification code\n                var token = GetBearerToken(context);\n                var accessToken = context.Request.Headers["X-Access-Token"].FirstOrDefault(); \n                string verificationCode = requestBody.VerificationCode;\n\n                if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(verificationCode))\n                {\n                    return Results.BadRequest("Missing required information.");\n                }\n\n                try\n                {\n                    // Initialize API client and retrieve user info\n                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n                    var userInfoApi = new UserInfoApi(authApiClientConfig);\n                    var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                    // Use the SaaSus API to verify the code and register the software token\n                    var saasUserApi = new SaasUserApi(authApiClientConfig);\n                    await saasUserApi.UpdateSoftwareTokenAsync(\n                        userInfo.Id,\n                        new UpdateSoftwareTokenParam(accessToken, verificationCode)\n                    );\n\n                    return Results.Ok(new { message = "MFA verification successful" });\n                }\n                catch (Exception ex)\n                {\n                    return HandleApiException(ex);\n                }\n            });\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'[HttpPost, Route("mfa_verify")]'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'        // Verify the user\'s MFA authentication code\n        public async Task<IHttpActionResult> VerifyMfa([FromBody] MfaVerifyRequest request)\n        {\n            try\n            {\n                // Get token and access token\n                var token = GetBearerToken(Request);\n                var accessToken = HttpContext.Current.Request.Headers.Get("X-Access-Token");\n                var verificationCode = request.VerificationCode;\n\n                if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(verificationCode))\n                {\n                    return BadRequest("Missing accessToken or verificationCode");\n                }\n\n                // Initialize API client and retrieve user info\n                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n                var userInfoApi = new UserInfoApi(authApiClientConfig);\n                var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                // Use the SaaSus API to verify the code and register the software token\n                var saasUserApi = new SaasUserApi(authApiClientConfig);\n                await saasUserApi.UpdateSoftwareTokenAsync(\n                    userInfo.Id,\n                    new UpdateSoftwareTokenParam(accessToken, verificationCode)\n                );\n\n                return Ok(new { message = "MFA verification successful" });\n            }\n            catch (Exception ex)\n            {\n                return HandleApiException(ex);\n            }\n        }\n'})})]})]}),"\n",(0,a.jsx)(n.h4,{id:"214-enable-mfa-api",children:(0,a.jsx)(n.strong,{children:"2.1.4. Enable MFA API"})}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"go",label:"Go",default:!0,children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'e.POST("/mfa_enable", enableMfa, authMiddleware)'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// Enable MFA for the user\nfunc enableMfa(c echo.Context) error {\n\t// Retrieve user information from context\n\tuserInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)\n\tif !ok {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})\n\t}\n\n\t// Create request body to enable MFA\n\tmethod := authapi.SoftwareToken\n\trequestBody := authapi.UpdateUserMfaPreferenceJSONRequestBody{\n\t\tEnabled: true,\n\t\tMethod:  &method,\n\t}\n\n\t// Use the SaaSus API to enable MFA\n\t_, err := authClient.UpdateUserMfaPreferenceWithResponse(context.Background(), userInfo.Id, requestBody)\n\tif err != nil {\n\t\tc.Logger().Errorf("Failed to enable MFA: %v", err)\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to enable MFA"})\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{"message": "MFA has been enabled"})\n}\n'})})]}),(0,a.jsxs)(o.A,{value:"python",label:"Python",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@app.post("/mfa_enable")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Enable MFA for the user\ndef enable_mfa(auth_user: dict = Depends(fastapi_auth)):\n    try:\n        # Create request body to enable MFA\n        body = MfaPreference(enabled=True, method=\'softwareToken\')\n\n        # Use the SaaSus API to enable MFA\n        SaasUserApi(api_client=api_client).update_user_mfa_preference(user_id=auth_user.id, body=body)\n\n        return {"message": "MFA has been enabled"}\n    except Exception as e:\n        print(e)\n        raise HTTPException(status_code=500, detail=str(e))\n'})})]}),(0,a.jsxs)(o.A,{value:"java",label:"Java",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@PostMapping(value = "/mfa_enable", produces = "application/json")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    /**\n     * Enable MFA for the user\n     */\n    public ResponseEntity<?> enableMfa(HttpServletRequest request) {\n        try {\n            // Initialize the SaaSus API client and retrieve user info\n            AuthApiClient apiClient = new Configuration().getAuthApiClient();\n            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));\n            UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));\n\n            // Create request body to enable MFA\n            MfaPreference mfaPreference = new MfaPreference()\n                .enabled(true)\n                .method(MfaPreference.MethodEnum.SOFTWARETOKEN);\n\n            SaasUserApi saasUserApi = new SaasUserApi(apiClient);\n            saasUserApi.updateUserMfaPreference(userInfo.getId(), mfaPreference);\n\n            Map<String, String> successResponse = new HashMap<>();\n            successResponse.put("message", "MFA has been enabled");\n            return ResponseEntity.ok(successResponse);\n        } catch (ApiException e) {\n            System.err.println("API Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        } catch (Exception e) {\n            System.err.println("Unexpected Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        }\n    }\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp",label:"C#(.Net8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'app.MapPost("/mfa_enable")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'            app.MapPost("/mfa_enable", async (HttpContext context) =>\n            {\n                // Retrieve ID token\n                var token = GetBearerToken(context);\n                if (string.IsNullOrEmpty(token))\n                {\n                    return Results.Unauthorized();\n                }\n\n                try\n                {\n                    // Initialize API client and retrieve user info\n                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n                    var userInfoApi = new UserInfoApi(authApiClientConfig);\n                    var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                    // Send request to enable MFA\n                    var saasUserApi = new SaasUserApi(authApiClientConfig);\n                    var mfaPreference = new MfaPreference(enabled: true, method: MfaPreference.MethodEnum.SoftwareToken);\n                    await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);\n\n                    return Results.Ok(new { message = "MFA has been enabled" });\n                }\n                catch (Exception ex)\n                {\n                    return HandleApiException(ex);\n                }\n            });\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'[HttpPost, Route("mfa_enable")]'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'        // Enable MFA endpoint\n        public async Task<IHttpActionResult> EnableMfa()\n        {\n            try\n            {\n                var token = GetBearerToken(Request);\n                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n                var userInfoApi = new UserInfoApi(authApiClientConfig);\n                var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                var saasUserApi = new SaasUserApi(authApiClientConfig);\n                var mfaPreference = new MfaPreference(enabled: true, method: MfaPreference.MethodEnum.SoftwareToken);\n                await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);\n\n                return Ok(new { message = "MFA has been enabled" });\n            }\n            catch (Exception ex)\n            {\n                return HandleApiException(ex);\n            }\n        }\n'})})]})]}),"\n",(0,a.jsx)(n.h4,{id:"215-disable-mfa-api",children:(0,a.jsx)(n.strong,{children:"2.1.5. Disable MFA API"})}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"go",label:"Go",default:!0,children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'e.POST("/mfa_disable", disableMfa, authMiddleware)'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// Disable MFA for the user\nfunc disableMfa(c echo.Context) error {\n\t// Retrieve user information from context\n\tuserInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)\n\tif !ok {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})\n\t}\n\n\t// Create request body to disable MFA\n\tmethod := authapi.SoftwareToken\n\trequestBody := authapi.UpdateUserMfaPreferenceJSONRequestBody{\n\t\tEnabled: false,\n\t\tMethod:  &method,\n\t}\n\n\t// Use the SaaSus API to disable MFA\n\t_, err := authClient.UpdateUserMfaPreferenceWithResponse(context.Background(), userInfo.Id, requestBody)\n\tif err != nil {\n\t\tc.Logger().Errorf("Failed to disable MFA: %v", err)\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to disable MFA"})\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{"message": "MFA has been disabled"})\n}\n'})})]}),(0,a.jsxs)(o.A,{value:"python",label:"Python",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@app.post("/mfa_disable")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Disable MFA for the user\ndef disable_mfa(auth_user: dict = Depends(fastapi_auth)):\n    try:\n        # Create request body to disable MFA\n        body = MfaPreference(enabled=False, method=\'softwareToken\')\n\n        # Use the SaaSus API to disable MFA\n        SaasUserApi(api_client=api_client).update_user_mfa_preference(user_id=auth_user.id, body=body)\n\n        return {"message": "MFA has been disabled"}\n    except Exception as e:\n        print(e)\n        raise HTTPException(status_code=500, detail=str(e))\n'})})]}),(0,a.jsxs)(o.A,{value:"java",label:"Java",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'@PostMapping(value = "/mfa_disable", produces = "application/json")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    /**\n     * Disable MFA for the user\n     */\n    public ResponseEntity<?> disableMfa(HttpServletRequest request) {\n        try {\n            // Initialize the SaaSus API client and retrieve user info\n            AuthApiClient apiClient = new Configuration().getAuthApiClient();\n            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));\n            UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));\n\n            // Create request body to disable MFA\n            MfaPreference mfaPreference = new MfaPreference()\n                .enabled(false)\n                .method(MfaPreference.MethodEnum.SOFTWARETOKEN);\n\n            SaasUserApi saasUserApi = new SaasUserApi(apiClient);\n            saasUserApi.updateUserMfaPreference(userInfo.getId(), mfaPreference);\n\n            Map<String, String> successResponse = new HashMap<>();\n            successResponse.put("message", "MFA has been disabled");\n            return ResponseEntity.ok(successResponse);\n        } catch (ApiException e) {\n            System.err.println("API Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        } catch (Exception e) {\n            System.err.println("Unexpected Exception: " + e.getMessage());\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        }\n    }\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp",label:"C#(.Net8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'app.MapPost("/mfa_disable")'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'            app.MapPost("/mfa_disable", async (HttpContext context) =>\n            {\n                // Retrieve ID token\n                var token = GetBearerToken(context);\n                if (string.IsNullOrEmpty(token))\n                {\n                    return Results.Unauthorized();\n                }\n\n                try\n                {\n                    // Initialize API client and retrieve user info\n                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);\n                    var userInfoApi = new UserInfoApi(authApiClientConfig);\n                    var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                    // Send request to disable MFA\n                    var saasUserApi = new SaasUserApi(authApiClientConfig);\n                    var mfaPreference = new MfaPreference(enabled: false, method: MfaPreference.MethodEnum.SoftwareToken);\n                    await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);\n\n                    return Results.Ok(new { message = "MFA has been disabled" });\n                }\n                catch (Exception ex)\n                {\n                    return HandleApiException(ex);\n                }\n            });\n'})})]}),(0,a.jsxs)(o.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'[HttpPost, Route("mfa_disable")]'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'        // Disable MFA endpoint\n        public async Task<IHttpActionResult> DisableMfa()\n        {\n            try\n            {\n                var token = GetBearerToken(Request);\n                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());\n                var userInfoApi = new UserInfoApi(authApiClientConfig);\n                var userInfo = await userInfoApi.GetUserInfoAsync(token);\n\n                var saasUserApi = new SaasUserApi(authApiClientConfig);\n                var mfaPreference = new MfaPreference(enabled: false, method: MfaPreference.MethodEnum.SoftwareToken);\n                await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);\n\n                return Ok(new { message = "MFA has been disabled" });\n            }\n            catch (Exception ex)\n            {\n                return HandleApiException(ex);\n            }\n        }\n'})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"3-how-to-use-the-sample-implementation",children:(0,a.jsx)(n.strong,{children:"3. How to Use the Sample Implementation"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/saasus-platform/implementation-sample-api-go/blob/main/README.md",children:"Go (Echo)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/saasus-platform/implementation-sample-api-python",children:"Python(FastAPI)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/saasus-platform/implementation-sample-api-java",children:"Java(Maven)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/README.md",children:"C#(.NET 8)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/README.md",children:"C#(.NET Framework 4.8)"})}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>b});var r=t(96540),a=t(34164),s=t(65627),i=t(56347),o=t(50372),c=t(30604),l=t(11861),u=t(78749);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function f(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=d(e),[i,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[l,p]=h({queryString:t,groupId:a}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,u.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),A=(()=>{const e=l??m;return f({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{A&&c(A)}),[A]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!f({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),g(e)}),[p,g,s]),tabValues:s}}var g=t(9136);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function v(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=c.indexOf(n),a=o[t].value;a!==r&&(l(n),i(a))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{c.push(e)},onKeyDown:p,onClick:u,...s,className:(0,a.A)("tabs__item",A.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function S(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function I(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",A.tabList),children:[(0,x.jsx)(v,{...n,...e}),(0,x.jsx)(S,{...n,...e})]})}function b(e){const n=(0,g.A)();return(0,x.jsx)(I,{...e,children:p(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var s=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,i),hidden:t,children:n})}}}]);