"use strict";(self.webpackChunksaasus_platform_document=self.webpackChunksaasus_platform_document||[]).push([[5252],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),g=i,d=m["".concat(l,".").concat(g)]||m[g]||p[g]||r;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),i=n(86010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(87462),i=n(67294),r=n(86010),o=n(12466),s=n(16550),l=n(91980),u=n(67392),c=n(50012);function m(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}function p(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=p(e),[o,s]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[l,u]=d({queryString:n,groupId:a}),[m,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,i.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),f=(()=>{const e=l??m;return g({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!g({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,r]),tabValues:r}}var f=n(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==s&&(m(t),l(a))},g=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:g,onClick:p},o,{className:(0,r.Z)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function C(e){const t=h(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",y.tabList)},i.createElement(b,(0,a.Z)({},e,t)),i.createElement(k,(0,a.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return i.createElement(C,(0,a.Z)({key:String(t)},e))}},71042:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>m});var a=n(87462),i=(n(67294),n(3905)),r=n(74866),o=n(85162);const s={title:"Implementation Example Using Metering API",slug:"example_implementation_using_metering_api",excerpt:"",hidden:!1,createdAt:"Wed Dec 27 2023 08:53:56 GMT+0000 (Coordinated Universal Time)",updatedAt:"Wed Dec 27 2023 09:01:38 GMT+0000 (Coordinated Universal Time)"},l=void 0,u={unversionedId:"implementation-guide/example_implementation_using_metering_api",id:"implementation-guide/example_implementation_using_metering_api",title:"Implementation Example Using Metering API",description:"Overview",source:"@site/docs/implementation-guide/example_implementation_using_metering_api.mdx",sourceDirName:"implementation-guide",slug:"/implementation-guide/example_implementation_using_metering_api",permalink:"/saasus-platform-document/docs/next/implementation-guide/example_implementation_using_metering_api",draft:!1,tags:[],version:"current",frontMatter:{title:"Implementation Example Using Metering API",slug:"example_implementation_using_metering_api",excerpt:"",hidden:!1,createdAt:"Wed Dec 27 2023 08:53:56 GMT+0000 (Coordinated Universal Time)",updatedAt:"Wed Dec 27 2023 09:01:38 GMT+0000 (Coordinated Universal Time)"},sidebar:"tutorialSidebar",previous:{title:"Metering API Implementation Sample and Examples of Use (Laravel)",permalink:"/saasus-platform-document/docs/next/implementation-guide/metering-api-sample"},next:{title:"About SaaS User Accounts",permalink:"/saasus-platform-document/docs/next/usecase/about-saas-user-accounts"}},c={},m=[{value:"Overview",id:"overview",level:2},{value:"Creating the Pricing Plan",id:"creating-the-pricing-plan",level:2},{value:"Creating Pricing Units",id:"creating-pricing-units",level:3},{value:"Creating Feature Menus",id:"creating-feature-menus",level:3},{value:"Creating the Pricing Plan",id:"creating-the-pricing-plan-1",level:3},{value:"Applying the Pricing Plan",id:"applying-the-pricing-plan",level:2},{value:"Implementation Sample",id:"implementation-sample",level:2}],p={toc:m},g="wrapper";function d(e){let{components:t,...s}=e;return(0,i.kt)(g,(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Let's consider a SaaS with plans set up for metered billing based on the number of users and active users."),(0,i.kt)("p",null,"We will create a feature that allows tenant administrators to check the usage based on the date and metering units."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Creating the Pricing Plan for This Implementation Example")),(0,i.kt)("h2",{id:"creating-the-pricing-plan"},"Creating the Pricing Plan"),(0,i.kt)("h3",{id:"creating-pricing-units"},"Creating Pricing Units"),(0,i.kt)("p",null,"We will create pricing units for the number of users and active users."),(0,i.kt)("p",null,"In this example, we are creating usage units, but when actually operating, consider creating tiered units or tiered usage units as referenced in the link below."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/saas-development-console/tiered_unit"},"About the Difference in Billing Calculation between Tiered Units and Tiered Usage Units")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Go to Pricing Plan -> Pricing Unit Settings from the development console.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'In the Pricing Unit Settings screen, click the "\u25bc" next to "Create Fixed Unit Pricing" and select "Create Usage Unit Pricing", then click the "Create Usage Unit Pricing" button.'),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{src:n(49848).Z,width:"420",height:"410"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set the pricing units for the number of users and active users."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{src:n(27478).Z,width:"1478",height:"1388"})),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{src:n(54649).Z,width:"1482",height:"1390"})))),(0,i.kt)("h3",{id:"creating-feature-menus"},"Creating Feature Menus"),(0,i.kt)("p",null,"Create feature menus to set the created pricing units."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Go to Pricing Plan -> Feature Menu Settings from the development console.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Click on "Create Feature Menu" at the top right.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a feature menu with the pricing units for the number of users and active users set."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{src:n(1058).Z,width:"1192",height:"1424"})))),(0,i.kt)("h3",{id:"creating-the-pricing-plan-1"},"Creating the Pricing Plan"),(0,i.kt)("p",null,"Create a pricing plan with the created feature menus set."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Go to Pricing Plan -> Pricing Plan Settings from the development console.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Click on "Create Pricing Plan" at the top right.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a pricing plan with the created feature menus set."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{src:n(6739).Z,width:"1342",height:"1462"})))),(0,i.kt)("h2",{id:"applying-the-pricing-plan"},"Applying the Pricing Plan"),(0,i.kt)("p",null,"Apply the pricing plan from the SaaSus operation console."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Click on Pricing Plan Settings in the SaaSus operation console.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Click the "Plan Settings" button in the row of the tenant you want to apply the pricing plan to.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set the created pricing plan and save it with the application date set to immediate effect."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{src:n(87776).Z,width:"1496",height:"1246"})))),(0,i.kt)("p",null,"After this, the pricing plan will be applied in 5 minutes.")),(0,i.kt)("h2",{id:"implementation-sample"},"Implementation Sample"),(0,i.kt)("p",null,"In the Laravel implementation sample, APIs for obtaining login user information and tenant information are omitted."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"React Implementation Sample")),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"typescript",label:"App.tsx",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { BrowserRouter, Route, Routes } from "react-router-dom";\n\nimport Auth from "./components/route/Auth.tsx";\nimport Tenant from "./components/route/Tenant.tsx";\nimport Callback from "./pages/Callback";\nimport UsageCheck from "./pages/UsageCheck.tsx";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Routes>\n                <Route path="/callback" element={<Callback />} />\n                <Route path="/" element={<Auth />}>\n                    <Route path="/tenants/:tenantId" element={<Tenant />}>\n                        <Route path="usage-check" element={<UsageCheck />} />\n                    </Route>\n                </Route>\n            </Routes>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n')))),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"typescript",label:"Auth.tsx",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import axios from "axios";\nimport React, { useEffect, useState } from "react";\nimport { Outlet } from "react-router-dom";\n\nconst LOGIN_URL = import.meta.env.VITE_LOGIN_URL;\nconst API_ENDPOINT = import.meta.env.VITE_API_URL;\n\nconst Auth: React.FC = () => {\n    const [authUser, setAuthUser] = useState<User>()\n    const [authUserFetching, setAuthUserFetching] = useState(true);\n    // Fetching information of the logged-in user\n    const getUserInfo = async () => {\n        try {\n            const jwtToken = window.localStorage.getItem("SaaSusIdToken");\n            const res = await axios.get<User>(`${API_ENDPOINT}/api/userinfo`, {\n                headers: {\n                    "X-Requested-With": "XMLHttpRequest",\n                    Authorization: `Bearer ${jwtToken}`,\n                },\n                withCredentials: true,\n            });\n            // If unable to fetch logged-in user information (login not confirmed), redirect to login screen\n            if (!res) {\n                window.location.href = LOGIN_URL;\n            } else {\n                setAuthUser(res.data)\n                setAuthUserFetching(false);\n            }\n        } catch {\n            window.location.href = LOGIN_URL;\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            await getUserInfo();\n        })()\n    }, []);\n\n    // Passing logged-in user information and user info update function as Outlet Context\n    return authUserFetching ? <></> : <Outlet context={{ authUser, getUserInfo }} />;\n};\n\nexport default Auth;\n\n')))),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"typescript",label:"UsageCheck.tsx",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import React, { useEffect, useState } from 'react';\nimport axios, { isAxiosError } from \"axios\";\nimport { useOutletContext } from \"react-router-dom\";\nimport { DateTime } from 'luxon';\nimport styled from \"styled-components\";\nimport { SubmitHandler, useForm, useWatch } from \"react-hook-form\";\n\n// Defining interface for usage counts\ninterface UsageCount {\n    count: number;\n    date: string | undefined;\n    month: string | undefined;\n    timestamp: number | undefined;\n    meteringUnitName: 'user_count' | 'active_user_count'; // Target meter names defined in the pricing plan creation\n}\n\n// Defining form schemas for different search types\ninterface MonthSearchFormSchema {\n    type: 'month';\n    month: string;\n    date: null | undefined;\n    meteringUnitName: null | undefined;\n}\n\ninterface MonthMeteringUnitNameSearchFormSchema {\n    type: 'month';\n    month: string;\n    meteringUnitName: string;\n    date: null | undefined;\n}\n\ninterface DateSearchFormSchema {\n    type: 'date';\n    date: string;\n    month: null | undefined;\n    meteringUnitName: null | undefined;\n}\n\ninterface DateMeteringUnitNameSearchFormSchema {\n    type: 'date';\n    date: string;\n    meteringUnitName: string;\n    month: null | undefined;\n}\n\ntype SearchFormSchema = MonthMeteringUnitNameSearchFormSchema | MonthSearchFormSchema | DateMeteringUnitNameSearchFormSchema | DateSearchFormSchema;\n\n// Dictionary for metering unit names\nconst METERING_UNIT_NAME_DICT_ARRAY = [\n    {\n        key: 'user_count', // Target meter name for user count defined in the pricing plan creation\n        displayName: 'Number of Users', // Display name for user count\n    },\n    {\n        key: 'active_user_count', // Target meter name for active user count defined in the pricing plan creation\n        displayName: 'Number of Active Users', // Display name for active user count\n    },\n]\n\nconst LOGIN_URL = import.meta.env.VITE_LOGIN_URL;\nconst API_ENDPOINT = import.meta.env.VITE_API_URL ?? \"\";\n\nconst UsageCheck: React.FC = () => {\n    const { tenant } = useOutletContext<UserRouterContext & TenantRouterContext>();\n    const [meteringUnitCountList, setMeteringUnitCountList] = useState<Array<UsageCount>>([]);\n    const [targetMonthOrDate, setTargetMonthOrDate] = useState('');\n    const jwtToken = window.localStorage.getItem(\"SaaSusIdToken\");\n    const { register, control, handleSubmit, formState: { isDirty, isValid }, getValues } = useForm<SearchFormSchema>();\n    const searchType = useWatch({ control, name: 'type' });\n\n    /**\n     * Retrieve the metering unit count for the specified date\n     * @param date\n     * @param meteringUnitName\n     */\n    const fetchUsageCountOfSpecifiedDate = async (date: string, meteringUnitName: string) => {\n        try {\n            const res = await axios.get<UsageCount>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/${meteringUnitName}/date/${date}/count`, {\n                headers: {\n                    \"X-Requested-With\": \"XMLHttpRequest\",\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${jwtToken}`,\n                },\n            })\n            setMeteringUnitCountList([res.data]);\n        } catch (e) {\n            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {\n                window.location.href = LOGIN_URL;\n            }\n        }\n    }\n\n    /**\n     * Retrieve all metering unit counts for the specified month\n     * @param month\n     */\n    const fetchAllUsageCountOfSpecifiedMonth = async (month: string) => {\n        try {\n            const res = await axios.get<Array<UsageCount>>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/month/${month}/count`, {\n                headers: {\n                    \"X-Requested-With\": \"XMLHttpRequest\",\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${jwtToken}`,\n                },\n            })\n            setMeteringUnitCountList(res.data);\n        } catch (e) {\n            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {\n                window.location.href = LOGIN_URL;\n            }\n        }\n    }\n\n    /**\n     * Retrieve all metering unit counts for the specified date\n     * @param date\n     */\n    const fetchAllUsageCountOfSpecifiedDate = async (date: string) => {\n        try {\n            const res = await axios.get<Array<UsageCount>>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/date/${date}/count`, {\n                headers: {\n                    \"X-Requested-With\": \"XMLHttpRequest\",\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${jwtToken}`,\n                },\n            })\n            setMeteringUnitCountList(res.data);\n        } catch (e) {\n            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {\n                window.location.href = LOGIN_URL;\n            }\n        }\n    }\n\n    /**\n     * Retrieve the metering unit count for the specified month\n     * @param month\n     * @param meteringUnitName\n     */\n    const fetchUsageCountOfSpecifiedMonth = async (month: string, meteringUnitName: string) => {\n        try {\n            const res = await axios.get<UsageCount>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/${meteringUnitName}/month/${month}/count`, {\n                headers: {\n                    \"X-Requested-With\": \"XMLHttpRequest\",\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${jwtToken}`,\n                },\n            })\n            setMeteringUnitCountList([res.data]);\n        } catch (e) {\n            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {\n                window.location.href = LOGIN_URL;\n            }\n        }\n    }\n\n    useEffect(() => {\n        const month = DateTime.now().toFormat('yyyy-MM');\n        setTargetMonthOrDate(month);\n        fetchAllUsageCountOfSpecifiedMonth(month);\n    }, []);\n\n    const onSearchSubmit: SubmitHandler<SearchFormSchema> = async (data) => {\n        if (data.type === 'month') {\n            if (!data.meteringUnitName) {\n                await fetchAllUsageCountOfSpecifiedMonth(data.month);\n            } else {\n                await fetchUsageCountOfSpecifiedMonth(data.month, data.meteringUnitName);\n            }\n            setTargetMonthOrDate(data.month);\n        } else {\n            if (!data.meteringUnitName) {\n                await fetchAllUsageCountOfSpecifiedDate(data.date);\n            } else {\n                await fetchUsageCountOfSpecifiedDate(data.date, data.meteringUnitName);\n            }\n            setTargetMonthOrDate(data.date);\n        }\n    }\n\n    return (\n        <div>\n            <h2>Usage Check</h2>\n            <form onSubmit={handleSubmit(onSearchSubmit)}>\n                <label>Method of Specifying Search Target</label>\n                <select {...register('type', {required: 'Please select.'})}>\n                    <option></option>\n                    <option value=\"month\">Year-Month</option>\n                    <option value=\"date\">Year-Month-Day</option>\n                </select>\n                {searchType && (\n                    <>\n                        <label>{searchType === 'month' ? 'Target Year-Month' : 'Target Year-Month-Day'}</label>\n                        <input {...register(searchType, { required: 'Required' })} />\n                        <label>Metering Unit Name</label>\n                        <select {...register('meteringUnitName')}>\n                            <option></option>\n                            {METERING_UNIT_NAME_DICT_ARRAY.map(({ key, displayName }) => (\n                                <option key={key} value={key}>{displayName}</option>\n                            ))}\n                        </select>\n                    </>\n                )}\n                <button type=\"submit\" disabled={!isDirty || !isValid}>Search</button>\n            </form>\n\n            <h3>Search Target Date: {targetMonthOrDate}</h3>\n            {METERING_UNIT_NAME_DICT_ARRAY.map(({key, displayName}) => {\n                const formMeteringUnitName = getValues('meteringUnitName')\n                return (!formMeteringUnitName || formMeteringUnitName && formMeteringUnitName === key) && (\n                    <UsageCountWrapper key={key}>\n                        <p>{displayName}\uff1a{meteringUnitCountList.find(({meteringUnitName}) => key === meteringUnitName)?.count ?? 0} cases</p>\n                    </UsageCountWrapper>\n                );\n            })}\n        </div>\n    )\n}\n\n\nconst UsageCountWrapper = styled.div`\n    border-bottom: 1px solid #333;\n`\n\nexport default UsageCheck;\n\n"))))),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Laravel Implementation Sample")),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"php",label:"routes/api.php",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"Route::middleware(\\AntiPatternInc\\Saasus\\Laravel\\Middleware\\Auth::class)->group(function () {\n    Route::get('/userinfo', 'App\\Http\\Controllers\\UserinfoController@index')->name('userinfo.index');\n    \n    Route::get('/tenant/{tenantId}', 'App\\Http\\Controllers\\TenantController@show')->name('tenant.index');\n\n    Route::get('/tenants/{tenantId}/metering/{meteringUnitName}/date/{date}/count', 'App\\Http\\Controllers\\MeteringController@getCountOfSpecifiedDate')->name('metering.get-count-of-specified-date');\n    Route::get('/tenants/{tenantId}/metering/{meteringUnitName}/month/{month}/count', 'App\\Http\\Controllers\\MeteringController@getCountOfSpecifiedMonth')->name('metering.get-count-of-specified-month');\n    Route::get('/tenants/{tenantId}/metering/date/{date}/count', 'App\\Http\\Controllers\\MeteringController@getAllMeteringCountOfSpecifiedDate')->name('metering.get-all-unit-count-of-specified-date');\n    Route::get('/tenants/{tenantId}/metering/month/{month}/count', 'App\\Http\\Controllers\\MeteringController@getAllMeteringCountOfSpecifiedMonth')->name('metering.get-all-unit-count-of-specified-month');  \n}\n")))),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"typescript",label:"MeteringController.php",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse AntiPatternInc\\Saasus\\Sdk\\Pricing\\Model\\MeteringUnitMonthCount;\n\nclass MeteringController extends Controller\n{\n    /**\n     * Retrieve the unit count for the specified date\n     *\n     * @see https://docs.saasus.io/reference/getmeteringunitdatecountbytenantidandunitnameanddate\n     *\n     * @param string $tenantId\n     * @param string $meteringUnitName\n     * @param string $date\n     * @return array\n     */\n    public function getCountOfSpecifiedDate(string $tenantId, string $meteringUnitName, string $date)\n    {\n        $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n        $pricingApi = $client->getPricingClient();\n        $unitCount = $pricingApi->getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(\n            $tenantId,\n            $meteringUnitName,\n            $date\n        );\n\n        return [\n            'count' => $unitCount->getCount(),\n            'date' => $unitCount->getDate(),\n            'meteringUnitName' => $unitCount->getMeteringUnitName(),\n        ];\n    }\n\n    /**\n     * Retrieve the unit count for the specified month\n     *\n     * @see https://docs.saasus.io/reference/getmeteringunitmonthcountbytenantidandunitnameandmonth\n     *\n     * @param string $tenantId\n     * @param string $meteringUnitName\n     * @param string $month\n     * @return array\n     */\n    public function getCountOfSpecifiedMonth(string $tenantId, string $meteringUnitName, string $month)\n    {\n        $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n        $pricingApi = $client->getPricingClient();\n        $unitCount = $pricingApi->getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(\n            $tenantId, $meteringUnitName, $month\n        );\n\n        return [\n            'count' => $unitCount->getCount(),\n            'month' => $unitCount->getMonth(),\n            'meteringUnitName' => $unitCount->getMeteringUnitName(),\n        ];\n    }\n\n    /**\n     * Retrieve all unit counts for the specified date\n     *\n     * @param string $tenantId\n     * @param string $date\n     * @return \\AntiPatternInc\\Saasus\\Sdk\\Pricing\\Model\\MeteringUnitDateCount[]\n     */\n    public function getAllMeteringCountOfSpecifiedDate(string $tenantId, string $date)\n    {\n        $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n        $pricingApi = $client->getPricingClient();\n        $allMeteringCount = $pricingApi->getMeteringUnitDateCountsByTenantIdAndDate(\n            $tenantId, $date\n        );\n\n        return array_map(function ($unitCount) {\n            return [\n                'count' => $unitCount->getCount(),\n                'date' => $unitCount->getDate(),\n                'meteringUnitName' => $unitCount->getMeteringUnitName(),\n            ];\n        }, $allMeteringCount->getCounts());\n    }\n\n    /**\n     * Retrieve all unit counts for the specified month\n     *\n     * @param string $tenantId\n     * @param string $month\n     * @return MeteringUnitMonthCount[]\n     */\n    public function getAllMeteringCountOfSpecifiedMonth(string $tenantId, string $month)\n    {\n        $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n        $pricingApi = $client->getPricingClient();\n        $allMeteringCount = $pricingApi->getMeteringUnitMonthCountsByTenantIdAndMonth(\n            $tenantId, $month\n        );\n\n        return array_map(function ($unitCount) {\n            return [\n                'count' => $unitCount->getCount(),\n                'month' => $unitCount->getMonth(),\n                'meteringUnitName' => $unitCount->getMeteringUnitName(),\n            ];\n        }, $allMeteringCount->getCounts());\n    }\n}\n"))))))}d.isMDXComponent=!0},49848:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-03-5f62134394eab11e58bcb987a05f91ce.png"},27478:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-04-c6394c965aa5a75594797e98e4733c32.png"},54649:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-05-cbc881907fc165b07ff8e853f198403f.png"},1058:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-06-ed17e0e5d1d13de81462827622cb9fe7.png"},6739:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-07-8e6400118bf6674399e80f5881a92ba6.png"},87776:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-08-2f769734d924e11269db5ac87c10e5da.png"}}]);