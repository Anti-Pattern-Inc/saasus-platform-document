"use strict";(self.webpackChunksaasus_platform_document=self.webpackChunksaasus_platform_document||[]).push([[1706],{21022:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/tenant-8400c0f155fe16a0a7c36bc55b294379.png"},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var a=t(96540);const i={},r=a.createContext(i);function s(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(r.Provider,{value:e},n.children)}},31413:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"usecase/about-saas-user-accounts/create-tenant","title":"Creating a Tenant","description":"Once self-signup is complete, the next step is to create a tenant.","source":"@site/versioned_docs/version-1.11/usecase/about-saas-user-accounts/create-tenant.mdx","sourceDirName":"usecase/about-saas-user-accounts","slug":"/usecase/about-saas-user-accounts/create-tenant","permalink":"/docs/usecase/about-saas-user-accounts/create-tenant","draft":false,"unlisted":false,"tags":[],"version":"1.11","frontMatter":{"title":"Creating a Tenant","slug":"create-tenant","excerpt":"","hidden":false,"createdAt":"Wed Nov 01 2023 06:48:33 GMT+0000 (Coordinated Universal Time)","updatedAt":"Thu Dec 21 2023 22:58:57 GMT+0000 (Coordinated Universal Time)"},"sidebar":"guideSidebar","previous":{"title":"About SaaS User Accounts","permalink":"/docs/usecase/about-saas-user-accounts"},"next":{"title":"Assigning Users to Tenants and Setting Roles","permalink":"/docs/usecase/about-saas-user-accounts/add-tenant-user"}}');var i=t(74848),r=t(28453),s=t(65537),l=t(79329);const o={title:"Creating a Tenant",slug:"create-tenant",excerpt:"",hidden:!1,createdAt:"Wed Nov 01 2023 06:48:33 GMT+0000 (Coordinated Universal Time)",updatedAt:"Thu Dec 21 2023 22:58:57 GMT+0000 (Coordinated Universal Time)"},c=void 0,u={},d=[];function p(n){const e={code:"code",img:"img",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Once self-signup is complete, the next step is to create a tenant."}),"\n",(0,i.jsxs)(e.p,{children:["In this case, the ",(0,i.jsx)("a",{href:"/docs/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans#free-plan",target:"_blank",children:"Free Plan"})," created in the tutorial will be automatically applied when creating a tenant."]}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(l.A,{value:"php",label:"PHP",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"    // Retrieving validated data\n    $validated = $request->validated();\n\n    // Using the SaaSusSDK\n    $client = new ApiClient();\n    $authClient = $this->client->getAuthClient();\n    $pricingClient = $this->client->getPricingClient();\n\n    // Searching for pricing plans\n    $pricingPlans = $pricingClient->getPricingPlans();\n    $nextPlanId = \"\";\n    foreach ($pricingPlans->getPricingPlans() as $pricingPlan) {\n        if ($pricingPlan['display_name'] == 'Free Plan') {\n            $nextPlanId = $pricingPlan['id'];\n        }\n    }\n\n    // Raise an error if the plan id could not be obtained\n    if (empty($nextPlanId)) {\n        return response()->json(['detail' => 'Failed to retrieve plan information.'], Response::HTTP_INTERNAL_SERVER_ERROR);\n    }\n\n    // Tenant creation\n    // Tenant name: Name entered on the screen\n    // Back office staff email: Logged-in user's email address\n    $tenant = $authClient->createTenant((object)array(\n        'name' => $tenantName,\n        'back_office_staff_email' => $email,\n    ));\n\n    // Retrieve the ID of the created tenant\n    $tenantId = $tenant->getId();\n\n    // Specify a time at least 5 minutes in the future from the current time when changing the plan\n    $currentTimeWith5MinutesAfterUnixTime = Carbon::now('UTC')->addMinutes(5)->timestamp;\n\n    // Update plan information\n    $authClient->updateTenantPlan($tenantId, (object)array(\n        'next_plan_id' => $nextPlanId,\n        'using_next_plan_from' => $currentTimeWith5MinutesAfterUnixTime,\n    ));\n"})})}),(0,i.jsx)(l.A,{value:"nodejs",label:"Node.js",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"    // Retrieving validated data\n    const { tenantName, userAttributeValues }: SelfSignUpRequest = request.body;\n    if (!tenantName) {\n    return response.status(400).send({ message: 'Missing required fields' });\n    }\n\n    const userInfo = request.userInfo\n    if (userInfo === undefined) {\n    return response.status(400).json({ detail: 'No user' })\n    }\n\n    // Searching for pricing plans\n    const pricingClient = new PricingClient()\n    const pricingPlans = (await pricingClient.pricingPlansApi.getPricingPlans()).data.pricing_plans\n    let nextPlanId = \"\"\n    for (const pricingPlan of pricingPlans) {\n        if (pricingPlan.display_name === \"Free Plan\") {\n            nextPlanId = pricingPlan.id;\n        }\n    }\n\n    // Raise an error if the plan id could not be obtained\n    if (!nextPlanId) {\n        return response.status(400).send({ message: 'Failed to retrieve plan information.' });\n    }\n\n    // Tenant creation\n    // Tenant name: Name entered on the screen\n    // Back office staff email: Logged-in user's email address\n    const tenantProps: TenantProps = {\n        name: tenantName,\n        attributes: [],\n        back_office_staff_email: userInfo.email\n    }\n    const client = new AuthClient()\n    const createdTenant = (await client.tenantApi.createTenant(tenantProps)).data\n\n    // Retrieve the ID of the created tenant\n    const tenantId = createdTenant.id\n\n    // Specify a time at least 5 minutes in the future from the current time when changing the plan\n    const currentTimeWith5MinutesAfterUnixTime = dayjs().add(5, 'minute').unix()\n    const planReservation: PlanReservation = {\n        next_plan_id: nextPlanId,\n        using_next_plan_from: currentTimeWith5MinutesAfterUnixTime\n    }\n\n    // Update plan information\n    await client.tenantApi.updateTenantPlan(tenantId, planReservation)\n"})})}),(0,i.jsx)(l.A,{value:"go",label:"Go",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'\t// Retrieving validated data\n\tvar request SelfSignupRequest\n\ttenantName := request.TenantName\n\tuserAttributeValues := request.UserAttributeValues\n\n\t// Searching for pricing plans\n\tpricingPlans, err := pricingClient.GetPricingPlansWithResponse(context.Background())\n\tvar nextPlanId string\n\tif pricingPlans.JSON200 != nil {\n\t\tfor _, pricingPlan := range pricingPlans.JSON200.PricingPlans {\n\t\t\tif pricingPlan.DisplayName == "Free Plan" {\n\t\t\t\tnextPlanId = pricingPlan.Id\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\t// Raise an error if the plan id could not be obtained\n\tif nextPlanId == "" {\n\t\treturn c.JSON(http.StatusInternalServerError, echo.Map{"error": "Failed to retrieve plan information."})\n\t}\n\n\t// Tenant creation\n\t// Tenant name: Name entered on the screen\n\t// Back office staff email: Logged-in user\'s email address\n\ttenantProps := authapi.CreateTenantParam{\n\t\tName:                 tenantName,\n\t\tBackOfficeStaffEmail: userInfo.Email,\n\t}\n\n\ttenantResp, err := authClient.CreateTenantWithResponse(context.Background(), tenantProps)\n\tif err != nil {\n\t\tc.Logger().Errorf("Failed to create tenant: %v", err)\n\t\treturn c.JSON(http.StatusInternalServerError, echo.Map{"error": "Failed to create tenant"})\n\t}\n\n\t// Retrieve the ID of the created tenant\n\ttenantID := tenantResp.JSON201.Id\n\n\t// Specify a time at least 5 minutes in the future from the current time when changing the plan\n\tcurrentTimeWith5MinutesAfterUnixTime := time.Now().Add(5 * time.Minute).Unix()\n\n\t// Convert int64 to int  \n\tusingNextPlanFrom := int(currentTimeWith5MinutesAfterUnixTime)\n\n\tplanReservation := authapi.PlanReservation{\n\t\tNextPlanId:        &nextPlanId,\n\t\tNextPlanTaxRateId: nil,\n\t\tUsingNextPlanFrom: &usingNextPlanFrom,\n\t}\n\n\t// Update plan information\n\tauthClient.UpdateTenantPlan(context.Background(), tenantID, planReservation)\n'})})}),(0,i.jsx)(l.A,{value:"python",label:"Python",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'    # Retrieving validated data\n    tenant_name = request.tenantName\n    user_attribute_values = request.userAttributeValues\n\n    try:\n        # Searching for pricing plans\n        pricing_plan_api = PricingPlansApi(api_client=pricing_api_client)\n        pricing_plans = pricing_plan_api.get_pricing_plans().to_dict()\n        next_plan_id = ""\n        for pricing_plan in pricing_plans["pricing_plans"]:\n            if pricing_plan["display_name"] == "Free Plan":\n                next_plan_id = pricing_plan["id"]\n\n        # Raise an error if the plan id could not be obtained\n        if not next_plan_id:\n            raise HTTPException(status_code=500, detail="Failed to retrieve plan information.")\n\n        # Tenant creation\n        # Tenant name: Name entered on the screen\n        # Back office staff email: Logged-in user\'s email address\n        tenant_props = TenantProps(\n            name=tenant_name,\n            attributes={},\n            back_office_staff_email=auth_user.email\n        )\n\n        tenant_api = TenantApi(api_client=api_client)\n        created_tenant = tenant_api.create_tenant(body=tenant_props)\n\n        # Retrieve the ID of the created tenant\n        tenant_id = created_tenant.id\n\n        # Get JST (Japan Standard Time) timezone\n        jst = pytz.timezone(\'Asia/Tokyo\')\n\n        # Get the current local time (JST)\n        local_time = datetime.now(jst)\n\n        # Specify a time at least 5 minutes in the future from the current time when changing the plan\n        current_time_with_5_minutes_after_unix_time = int((local_time + timedelta(minutes=5)).timestamp())\n        plan_reservation = PlanReservation(\n            next_plan_id = next_plan_id,\n            using_next_plan_from = current_time_with_5_minutes_after_unix_time\n        )\n\n        # Update plan information\n        TenantApi(api_client=api_client).update_tenant_plan(\n            tenant_id=tenant_id,\n            body=plan_reservation\n        )\n'})})}),(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'    // Retrieving validated data\n    String tenantName = (String) requestBody.get("tenantName");\n    Map<String, Object> userAttributeValues = requestBody.get("userAttributeValues") != null\n            ? (Map<String, Object>) requestBody.get("userAttributeValues")\n            : new HashMap<>();\n\n    AuthApiClient apiClient = new Configuration().getAuthApiClient();\n    apiClient.setReferer(request.getHeader("Referer"));\n    UserInfoApi userInfoApi = new UserInfoApi(apiClient);\n    UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));\n\n    if (userInfo.getTenants() != null && !userInfo.getTenants().isEmpty()) {\n        System.err.println("User is already associated with a tenant");\n        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User is already associated with a tenant");\n    }\n\n    // Searching for pricing plans\n    PricingApiClient pricingApiClient = new Configuration().getPricingApiClient();\n    pricingApiClient.setReferer(request.getHeader("Referer"));\n    PricingPlansApi pricingPlansApi = new PricingPlansApi(pricingApiClient);\n    PricingPlans pricingPlans = null;\n    pricingPlans = pricingPlansApi.getPricingPlans();\n    String nextPlanId = "";\n    for (PricingPlan pricingPlan : pricingPlans.getPricingPlans()) {\n        if ("Free Plan".equals(pricingPlan.getDisplayName())) {\n            nextPlanId = pricingPlan.getId();\n            break;\n        }\n    }\n\n    // Raise an error if the plan id could not be obtained\n    if (nextPlanId == null || nextPlanId.isEmpty()) {\n        return ResponseEntity\n            .status(HttpStatus.HTTP_INTERNAL_SERVER_ERROR)\n            .body("Failed to retrieve plan information.");\n    }\n\n    TenantApi tenantApi = new TenantApi(apiClient);\n    \n    // Tenant creation\n    // Tenant name: Name entered on the screen\n    // Back office staff email: Logged-in user\'s email address\n    TenantProps tenantProps = new TenantProps()\n            .name(tenantName)\n            .backOfficeStaffEmail(userInfo.getEmail());\n    \n    Tenant createdTenant = tenantApi.createTenant(tenantProps);\n\n    // Retrieve the ID of the created tenant\n    String tenantId = createdTenant.getId();\n\n    // Specify a time at least 5 minutes in the future from the current time when changing the plan\n    long currentTimeWith5MinutesAfterUnixTime = Instant.now()\n        .plus(5, ChronoUnit.MINUTES)\n        .getEpochSecond();\n\n    PlanReservation planReservation = new PlanReservation()\n            .nextPlanId(nextPlanId)\n            .usingNextPlanFrom((int) currentTimeWith5MinutesAfterUnixTime);\n\n    // Update plan information\n    tenantApi.updateTenantPlan(tenantId, planReservation);\n'})})}),(0,i.jsx)(l.A,{value:"csharp",label:"C#(.Net8)",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'        // Retrieving validated data\n        string tenantName = requestBody.TenantName;\n        var userAttributeValues = requestBody.UserAttributeValues ?? new Dictionary<string, object>();\n\n        // Searching for pricing plans\n        var pricingClientConfig = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);\n        var pricingPlansApi = new PricingPlansApi(pricingClientConfig);\n        var pricingPlans = pricingPlansApi.GetPricingPlans();\n        string nextPlanId = "";\n        foreach (var pricingPlan in pricingPlans.VarPricingPlans)\n        {\n            if (pricingPlan.DisplayName == "Free Plan")\n            {\n                nextPlanId = pricingPlan.Id;\n                break;\n            }\n        }\n\n        // Raise an error if the plan id could not be obtained\n        if (string.IsNullOrEmpty(nextPlanId))\n        {\n            Results.Problem(detail: "Failed to retrieve plan information.", statusCode: 500);\n        }\n\n        // Tenant creation\n        // Tenant name: Name entered on the screen\n        // Back office staff email: Logged-in user\'s email address\n        var tenantApi = new TenantApi(authApiClientConfig);\n        var tenantProps = new TenantProps(\n            name: tenantName,\n            attributes: new Dictionary<string, object>(),\n            backOfficeStaffEmail: userInfo.Email\n        );\n        var createdTenant = await tenantApi.CreateTenantAsync(tenantProps);\n\n        // Retrieve the ID of the created tenant\n        var tenantId = createdTenant.Id;\n\n        // Specify a time at least 5 minutes in the future from the current time when changing the plan\n        var currentTimeWith5MinutesAfterUnixTime = DateTimeOffset.UtcNow.AddMinutes(5).ToUnixTimeSeconds();\n        var planReservation = new PlanReservation\n        {\n            NextPlanId = nextPlanId,\n            UsingNextPlanFrom = (int)currentTimeWith5MinutesAfterUnixTime\n        };\n\n        // Update plan information\n        tenantApi.UpdateTenantPlan(tenantId, planReservation);\n'})})}),(0,i.jsx)(l.A,{value:"csharp(.Netfw4.8)",label:"C#(.Netfw4.8)",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'        // Retrieving validated data\n        string tenantName = request.TenantName;\n        var userAttributeValues = request.UserAttributeValues ?? new Dictionary<string, object>();\n        \n        // Searching for pricing plans\n        var pricingApiClientConfig = CreateClientConfiguration(c => c.GetPricingApiClientConfig());\n        var pricingPlansApi = new PricingPlansApi(pricingApiClientConfig);\n        pricingapi.Model.PricingPlans pricingPlans = await pricingPlansApi.GetPricingPlansAsync();\n        string nextPlanId = "";\n        foreach (var pricingPlan in pricingPlans.VarPricingPlans)\n        {\n            if (pricingPlan.DisplayName == "Free Plan")\n            {\n                nextPlanId = pricingPlan.Id;\n                break;\n            }\n        }\n\n        // Raise an error if the plan id could not be obtained\n        if (string.IsNullOrEmpty(nextPlanId))\n        {\n            return InternalServerError();\n        }\n\n        // Tenant creation\n        // Tenant name: Name entered on the screen\n        // Back office staff email: Logged-in user\'s email address\n        var tenantProps = new TenantProps(\n            name: tenantName,\n            attributes: new Dictionary<string, object>(),\n            backOfficeStaffEmail: userInfo.Email\n        );\n        var createdTenant = await tenantApi.CreateTenantAsync(tenantProps);\n\n        // Retrieve the ID of the created tenant\n        var tenantId = createdTenant.Id;\n\n        // Specify a time at least 5 minutes in the future from the current time when changing the plan\n        var currentTimeWith5MinutesAfterUnixTime = new DateTimeOffset(DateTime.UtcNow.AddMinutes(5)).ToUnixTimeSeconds();\n        var planReservation = new PlanReservation(\n            nextPlanId: nextPlanId,\n            usingNextPlanFrom: (int)currentTimeWith5MinutesAfterUnixTime\n        );\n\n        // Update plan information\n        tenantApi.UpdateTenantPlan(tenantId, planReservation);\n'})})})]}),"\n",(0,i.jsx)(e.p,{children:'You can check if the tenant was created successfully using the API by visiting "SaaS Operation Console > Tenant Management".'}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"tenant",src:t(21022).A+"",width:"2876",height:"792"})})]})}function f(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},65537:(n,e,t)=>{t.d(e,{A:()=>_});var a=t(96540),i=t(34164),r=t(65627),s=t(56347),l=t(50372),o=t(30604),c=t(11861),u=t(78749);function d(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return d(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:i}}=n;return{value:e,label:t,attributes:a,default:i}}))}(t);return function(n){const e=(0,c.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function f(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function g(n){let{queryString:e=!1,groupId:t}=n;const i=(0,s.W6)(),r=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(r),(0,a.useCallback)((n=>{if(!r)return;const e=new URLSearchParams(i.location.search);e.set(r,n),i.replace({...i.location,search:e.toString()})}),[r,i])]}function m(n){const{defaultValue:e,queryString:t=!1,groupId:i}=n,r=p(n),[s,o]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!f({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:r}))),[c,d]=g({queryString:t,groupId:i}),[m,h]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[i,r]=(0,u.Dv)(t);return[i,(0,a.useCallback)((n=>{t&&r.set(n)}),[t,r])]}({groupId:i}),P=(()=>{const n=c??m;return f({value:n,tabValues:r})?n:null})();(0,l.A)((()=>{P&&o(P)}),[P]);return{selectedValue:s,selectValue:(0,a.useCallback)((n=>{if(!f({value:n,tabValues:r}))throw new Error(`Can't select invalid tab value=${n}`);o(n),d(n),h(n)}),[d,h,r]),tabValues:r}}var h=t(9136);const P={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(74848);function b(n){let{className:e,block:t,selectedValue:a,selectValue:s,tabValues:l}=n;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=n=>{const e=n.currentTarget,t=o.indexOf(e),i=l[t].value;i!==a&&(c(e),s(i))},d=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=o.indexOf(n.currentTarget)+1;e=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(n.currentTarget)-1;e=o[t]??o[o.length-1];break}}e?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},e),children:l.map((n=>{let{value:e,label:t,attributes:r}=n;return(0,v.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{o.push(n)},onKeyDown:d,onClick:u,...r,className:(0,i.A)("tabs__item",P.tabItem,r?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function T(n){let{lazy:e,children:t,selectedValue:r}=n;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=s.find((n=>n.props.value===r));return n?(0,a.cloneElement)(n,{className:(0,i.A)("margin-top--md",n.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==r})))})}function x(n){const e=m(n);return(0,v.jsxs)("div",{className:(0,i.A)("tabs-container",P.tabList),children:[(0,v.jsx)(b,{...e,...n}),(0,v.jsx)(T,{...e,...n})]})}function _(n){const e=(0,h.A)();return(0,v.jsx)(x,{...n,children:d(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>s});t(96540);var a=t(34164);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function s(n){let{children:e,hidden:t,className:s}=n;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,s),hidden:t,children:e})}}}]);