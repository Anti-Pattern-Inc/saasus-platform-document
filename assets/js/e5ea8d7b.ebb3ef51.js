"use strict";(self.webpackChunksaasus_platform_document=self.webpackChunksaasus_platform_document||[]).push([[8640],{19833:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"part-4/mcp-server/export-metering-data","title":"Metering Data CSV Export Procedure","description":"Overview","source":"@site/versioned_docs/version-1.11/part-4/mcp-server/export-metering-data.md","sourceDirName":"part-4/mcp-server","slug":"/part-4/mcp-server/export-metering-data","permalink":"/docs/part-4/mcp-server/export-metering-data","draft":false,"unlisted":false,"tags":[],"version":"1.11","frontMatter":{"title":"Metering Data CSV Export Procedure","slug":"export-metering-data","excerpt":"How to export metering values for each tenant and month using MCP Server","hidden":false,"createdAt":"Wed Aug 27 2025 01:00:00 GMT+0000 (Coordinated Universal Time)","updatedAt":"Wed Aug 27 2025 01:00:00 GMT+0000 (Coordinated Universal Time)"},"sidebar":"docsSidebar","previous":{"title":"User List CSV Export Procedure","permalink":"/docs/part-4/mcp-server/export-user-info-csv"},"next":{"title":"User Behavior History Analysis Procedure","permalink":"/docs/part-4/mcp-server/user-behavior-analysis"}}');var i=n(74848),r=n(28453);const o={title:"Metering Data CSV Export Procedure",slug:"export-metering-data",excerpt:"How to export metering values for each tenant and month using MCP Server",hidden:!1,createdAt:"Wed Aug 27 2025 01:00:00 GMT+0000 (Coordinated Universal Time)",updatedAt:"Wed Aug 27 2025 01:00:00 GMT+0000 (Coordinated Universal Time)"},s="SaaSus Platform Metering Data CSV Export Procedure",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Request Text for MCP Server",id:"request-text-for-mcp-server",level:2},{value:"Basic Request Text",id:"basic-request-text",level:3},{value:"Output File Format",id:"output-file-format",level:2},{value:"CSV Header",id:"csv-header",level:3},{value:"Data Row Examples (Monthly)",id:"data-row-examples-monthly",level:3},{value:"Data Row Examples (Daily)",id:"data-row-examples-daily",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"Customization",id:"customization",level:2},{value:"Adding Fields",id:"adding-fields",level:3},{value:"Changing Filter Conditions",id:"changing-filter-conditions",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"saasus-platform-metering-data-csv-export-procedure",children:"SaaSus Platform Metering Data CSV Export Procedure"})}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"This document describes the procedure for retrieving metering values for each tenant and month in SaaSus Platform and exporting them in CSV format."}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"SaaSus API MCP Server must be configured"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"request-text-for-mcp-server",children:"Request Text for MCP Server"}),"\n",(0,i.jsx)(t.h3,{id:"basic-request-text",children:"Basic Request Text"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Please export metering data to CSV.\n\n[Export Settings]\nOutput format = CSV\nFilename = saasus_metering_data.csv\nIntermediate deliverables not required\nOutput the result CSV file directly\nOutput each tenant\'s metering data for each period as separate rows\nPeriod unit = Day or Month (change as needed)\nDo not use cache, always retrieve the latest information\n\n[Data Retrieval Method]\n\n[Required Requirements]\nExecute complete data retrieval without omissions.\n\n[Retrieval Steps]\n1. Retrieve all tenants: Get all tenant list using `gettenants` API\n2. Retrieve all metering units: Get all metering unit list using `getmeteringunits` API\n3. Efficient data retrieval:\n   \n   For daily units:\n   - Execute `getmeteringunitdatecountsbytenantidanddate` API for each tenant ID \xd7 each date combination\n   \n   For monthly units:\n   - Execute `getmeteringunitmonthcountsbytenantidandmonth` API for each tenant ID \xd7 each month combination\n   \n   - Only include data in CSV if it actually exists\n   - Skip tenant \xd7 period combinations if data does not exist (counts array is empty)\n4. Data verification: Check the contents of counts array in each API response and only adopt data if it is not an empty array\n\n[Field Settings]\nTenant ID = true\nTenant Name = true\nMeter Name = true\nUsage = true\nPeriod = true\n; If there are other custom attributes, please add them below\n; Custom Attribute 1 = true\n; Custom Attribute 2 = true\n\n[Field Descriptions]\nTenant ID: Unique identifier for the tenant\nTenant Name: Display name of the tenant\nMeter Name: Display name of the metering unit (display_name)\nUsage: Usage amount for the specified period\nPeriod: Metering target period (monthly: 2025-8, daily: 2025-08-15)\n\n[Export Conditions]\n; Set filter conditions when exporting metering data\n; Example: To export metering data for a specific tenant only, set as follows:\n; Tenant Name = Specific tenant name\n; Example: To export metering data for a specific period only, set as follows:\n; Period = 2025-8\n;\n; Monthly example:\n; Period unit = Month\n; Period Start = 2025-6\n; Period End = 2025-8\n; Daily example:\n; Period unit = Day\n; Period Start = 2025-08-01\n; Period End = 2025-08-31\n; Example: To export metering data for a specific meter only, set as follows:\n; Meter Name = API Calls\nPeriod unit = Month\nPeriod Start = 2025-6\nPeriod End = 2025-8\n\n[Output Example]\n; Below is an example of the output CSV (monthly case)\n; Tenant ID,Tenant Name,Meter Name,Usage,Period\n; tenant-001,Sample Tenant 1,Active Users,13,2025-08-27\n; tenant-001,Sample Tenant 1,Comments,3,2025-08-27\n; tenant-002,Sample Tenant 2,Test Usage,5,2025-08-27\n\n; Below is an example of daily output (daily case)\n; Tenant ID,Tenant Name,Meter Name,Usage,Period\n; tenant-001,Sample Tenant 1,API Calls,1200,2025-7\n; tenant-001,Sample Tenant 1,Storage,550,2025-7\n; tenant-002,Sample Tenant 2,API Calls,850,2025-7\n; tenant-002,Sample Tenant 2,Storage,320,2025-7\n\n[Important Notes]\n1. Complete combination check: Execute data existence confirmation for all tenant \xd7 all period combinations\n2. API usage priority: \n   - Daily: `getmeteringunitdatecountsbytenantidanddate` (get all meters for the target day in one call)\n   - Monthly: `getmeteringunitmonthcountsbytenantidandmonth` (get all meters for the target month in one call)\n   - Avoid individual meter unit retrieval for efficiency\n3. Data quality assurance: Distinguish between cases where usage is 0 and cases where data does not exist\n4. Progress reporting: Show progress like "Processing \u25cbth/Total \u25cb tenant \xd7 period combinations" during data retrieval\n'})}),"\n",(0,i.jsx)(t.h2,{id:"output-file-format",children:"Output File Format"}),"\n",(0,i.jsx)(t.h3,{id:"csv-header",children:"CSV Header"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csv",children:"Tenant ID,Tenant Name,Meter Name,Usage,Period\n"})}),"\n",(0,i.jsx)(t.h3,{id:"data-row-examples-monthly",children:"Data Row Examples (Monthly)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csv",children:"tenant-001,Sample Tenant 1,Active Users,13,2025-08-27\ntenant-001,Sample Tenant 1,Comments,3,2025-08-27\ntenant-002,Sample Tenant 2,Test Usage,5,2025-08-27\n"})}),"\n",(0,i.jsx)(t.h3,{id:"data-row-examples-daily",children:"Data Row Examples (Daily)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csv",children:"tenant-001,Sample Tenant 1,API Calls,1200,2025-7\ntenant-001,Sample Tenant 1,Storage,550,2025-7\ntenant-002,Sample Tenant 2,API Calls,850,2025-7\ntenant-002,Sample Tenant 2,Storage,320,2025-7\n"})}),"\n",(0,i.jsx)(t.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If a single tenant uses multiple meters, they will be output as separate rows for each meter"}),"\n",(0,i.jsx)(t.li,{children:"If a single tenant has data for multiple periods, they will be output as separate rows for each period"}),"\n",(0,i.jsx)(t.li,{children:"When a period range is specified, data for all periods within the specified range will be output"}),"\n",(0,i.jsx)(t.li,{children:"When outputting in daily units, the number of rows may increase significantly (e.g., approximately 30 rows \xd7 number of tenants \xd7 number of meters for one month)"}),"\n",(0,i.jsx)(t.li,{children:"When filter conditions are specified, only metering data that matches the conditions will be output"}),"\n",(0,i.jsx)(t.li,{children:"The output data is the latest information at the time of execution (cache is not used)"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(t.h3,{id:"adding-fields",children:"Adding Fields"}),"\n",(0,i.jsxs)(t.p,{children:["If you want to include custom attributes in the output, set the corresponding items to ",(0,i.jsx)(t.code,{children:"true"})," in the [Field Settings] section."]}),"\n",(0,i.jsx)(t.h3,{id:"changing-filter-conditions",children:"Changing Filter Conditions"}),"\n",(0,i.jsx)(t.p,{children:"To filter metering data by specific conditions, specify the conditions in the [Export Conditions] section. It is also possible to combine multiple conditions."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(96540);const i={},r=a.createContext(i);function o(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);