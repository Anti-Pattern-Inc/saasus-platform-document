"use strict";(self.webpackChunksaasus_platform_document=self.webpackChunksaasus_platform_document||[]).push([[2376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=s(n),d=i,g=p["".concat(l,".").concat(d)]||p[d]||c[d]||r;return n?a.createElement(g,u(u({ref:t},m),{},{components:n})):a.createElement(g,u({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,u=new Array(r);u[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,u[1]=o;for(var s=2;s<r;s++)u[s]=n[s];return a.createElement.apply(null,u)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(67294),i=n(86010);const r={tabItem:"tabItem_Ymn6"};function u(e){let{children:t,hidden:n,className:u}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,u),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(87462),i=n(67294),r=n(86010),u=n(12466),o=n(16550),l=n(91980),s=n(67392),m=n(50012);function p(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}function c(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=c(e),[u,o]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[l,s]=g({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,m.Nk)(n);return[a,(0,i.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),f=(()=>{const e=l??p;return d({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:u,selectValue:(0,i.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),h(e)}),[s,h,r]),tabValues:r}}var f=n(72389);const $={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function C(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:s}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,u.o5)(),c=e=>{const t=e.currentTarget,n=m.indexOf(t),a=s[n].value;a!==o&&(p(t),l(a))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;t=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;t=m[n]??m[m.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:u}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:d,onClick:c},u,{className:(0,r.Z)("tabs__item",$.tabItem,u?.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function U(e){const t=h(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",$.tabList)},i.createElement(C,(0,a.Z)({},e,t)),i.createElement(v,(0,a.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return i.createElement(U,(0,a.Z)({key:String(t)},e))}},7607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905)),r=n(74866),u=n(85162);const o={title:"Metering API Implementation Sample and Examples of Use (Laravel)",slug:"metering-api-sample",excerpt:"",hidden:!1,createdAt:"Tue Nov 14 2023 06:22:12 GMT+0000 (Coordinated Universal Time)",updatedAt:"Wed Dec 27 2023 09:00:19 GMT+0000 (Coordinated Universal Time)"},l=void 0,s={unversionedId:"implementation-guide/meteringapisamplelaravelandusecase",id:"implementation-guide/meteringapisamplelaravelandusecase",title:"Metering API Implementation Sample and Examples of Use (Laravel)",description:"We will describe Laravel implementation samples for each Metering API using SDK and an example of a feature using the Metering API.",source:"@site/docs/implementation-guide/meteringapisamplelaravelandusecase.md",sourceDirName:"implementation-guide",slug:"/implementation-guide/metering-api-sample",permalink:"/docs/implementation-guide/metering-api-sample",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/implementation-guide/meteringapisamplelaravelandusecase.md",tags:[],version:"current",frontMatter:{title:"Metering API Implementation Sample and Examples of Use (Laravel)",slug:"metering-api-sample",excerpt:"",hidden:!1,createdAt:"Tue Nov 14 2023 06:22:12 GMT+0000 (Coordinated Universal Time)",updatedAt:"Wed Dec 27 2023 09:00:19 GMT+0000 (Coordinated Universal Time)"},sidebar:"tutorialSidebar",previous:{title:"Implementation using SaaSus Platform (Serverless)",permalink:"/docs/implementation-guide/implementing-authentication-using-saasus-serverless"},next:{title:"Implementation Example Using Metering API",permalink:"/docs/implementation-guide/example_implementation_using_metering_api"}},m={},p=[{value:"Get the Metering Unit Count for a Specified Date",id:"get-the-metering-unit-count-for-a-specified-date",level:2},{value:"Use Case",id:"use-case",level:3},{value:"Implementation Sample",id:"implementation-sample",level:3},{value:"Use Case",id:"use-case-1",level:3},{value:"Implementation Sample",id:"implementation-sample-1",level:3},{value:"Use Case",id:"use-case-2",level:3},{value:"Implementation Sample",id:"implementation-sample-2",level:3},{value:"Get the Metering Unit Count for Today",id:"get-the-metering-unit-count-for-today",level:2},{value:"Use Case",id:"use-case-3",level:3},{value:"Implementation Sample",id:"implementation-sample-3",level:3},{value:"Update the Current Time Metering Unit Count",id:"update-the-current-time-metering-unit-count",level:2},{value:"Use Case",id:"use-case-4",level:3},{value:"Implementation Sample",id:"implementation-sample-4",level:3},{value:"Get the Metering Unit Count for the Current Month",id:"get-the-metering-unit-count-for-the-current-month",level:2},{value:"Use Case",id:"use-case-5",level:3},{value:"Implementation Sample",id:"implementation-sample-5",level:3},{value:"Get the Metering Unit Count for a Specified Month",id:"get-the-metering-unit-count-for-a-specified-month",level:2},{value:"Use Case",id:"use-case-6",level:3},{value:"Implementation Sample",id:"implementation-sample-6",level:3},{value:"Get All Metering Unit Counts for a Specified Date",id:"get-all-metering-unit-counts-for-a-specified-date",level:2},{value:"Use Case",id:"use-case-7",level:3},{value:"Implementation Sample",id:"implementation-sample-7",level:3},{value:"Use Case",id:"use-case-8",level:3},{value:"Implementation Sample",id:"implementation-sample-8",level:3}],c={toc:p},d="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We will describe Laravel implementation samples for each Metering API using SDK and an example of a feature using the Metering API."),(0,i.kt)("p",null,"Please check the API documentation for details of each API."),(0,i.kt)("h1",{id:"laravel-implementation-sample"},"Laravel Implementation Sample"),(0,i.kt)("h2",{id:"get-the-metering-unit-count-for-a-specified-date"},"Get the Metering Unit Count for a Specified Date"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate"},"API Documentation")),(0,i.kt)("h3",{id:"use-case"},"Use Case"),(0,i.kt)("p",null,"Please use this when you want to show usage to tenants."),(0,i.kt)("h3",{id:"implementation-sample"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:"PHP",PHP:!0},"/**\n * Get the Metering Unit Count for a Specified Date\n *\n * @see https://docs.saasus.io/reference/getmeteringunitdatecountbytenantidandunitnameanddate\n *\n * @param string $tenantId Tenant ID\n * @param string $meteringUnitName Metering Unit Name\n * @param string $date Date in yyyy-mm-dd format\n * @return array\n */\npublic function getCountOfSpecifiedDate(string $tenantId, string $meteringUnitName, string $date)\n{\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $unitCount = $pricingApi->getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(\n        $tenantId,\n        $meteringUnitName,\n        $date\n    );\n  \n    return [\n        'count' => $unitCount->getCount(),\n        'date' => $unitCount->getDate(),\n        'meteringUnitName' => $unitCount->getMeteringUnitName(),\n    ];\n}\n")))),"## Update the Metering Unit Count for a Specified Timestamp",(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/UpdateMeteringUnitTimestampCount"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-1"},"Use Case"),(0,i.kt)("p",null,"Please use this for adjustments in case of mistakes in usage updates in past data."),(0,i.kt)("h3",{id:"implementation-sample-1"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Update the Metering Unit Count for a Specified Timestamp\n *\n * @see https://docs.saasus.io/reference/updatemeteringunittimestampcount\n *\n * @param string $tenantId Tenant ID\n * @param string $meteringUnitName Metering Unit Name\n * @param int $timestamp Timestamp in seconds\n * @param Request $request\n * @return array\n */\npublic function updateCountOfSpecifiedTimestamp(string $tenantId, string $meteringUnitName, int $timestamp, Request $request)\n{\n    // Retrieve the update method and count from the request\n    ['method' => $method, 'count' => $count] = $request->only(['method', 'count']);\n    $updateMeteringUnitTimeStampParam = new UpdateMeteringUnitTimestampCountParam();\n    $updateMeteringUnitTimeStampParam->setMethod($method)\n        ->setCount($count);\n    $unitCount = $this->saasusClient->getPricingClient()->updateMeteringUnitTimestampCount(\n        $tenantId, $meteringUnitName, $timestamp,\n        $updateMeteringUnitTimeStampParam\n    );\n  \n    return [\n        'count' => $unitCount->getCount(),\n        'timestamp' => $unitCount->getTimestamp(),\n        'meteringUnitName' => $unitCount->getMeteringUnitName(),\n     ];\n}\n")))),"## Delete the Metering Unit Count for a Specified Timestamp",(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/DeleteMeteringUnitTimestampCount"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-2"},"Use Case"),(0,i.kt)("p",null,"Please use this for adjustments in case of mistakes in usage updates in past data."),(0,i.kt)("h3",{id:"implementation-sample-2"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Delete the Metering Unit Count for a Specified Timestamp\n *\n * @see https://docs.saasus.io/reference/deletemeteringunittimestampcount\n *\n * @param string $tenantId Tenant ID\n * @param string $meteringUnitName Metering Unit Name\n * @param int $timestamp Timestamp in seconds\n * @return array\n */\npublic function deleteCountOfSpecifiedTimestamp(string $tenantId, string $meteringUnitName, int $timestamp)\n{\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $pricingApi->deleteMeteringUnitTimestampCount(\n        $tenantId, $meteringUnitName, $timestamp\n    );\n\n    return ['status' => 'success'];\n}\n")))),(0,i.kt)("h2",{id:"get-the-metering-unit-count-for-today"},"Get the Metering Unit Count for Today"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/GetMeteringUnitDateCountByTenantIdAndUnitNameToday"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-3"},"Use Case"),(0,i.kt)("p",null,"Please use this when you want to show the usage to tenants."),(0,i.kt)("h3",{id:"implementation-sample-3"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Get the Metering Unit Count for Today\n *\n * @see https://docs.saasus.io/reference/getmeteringunitdatecountbytenantidandunitnametoday\n *\n * @param string $tenantId Tenant ID\n * @param string $meteringUnitName Metering Unit Name\n * @return array\n */\npublic function getCountOfCurrentDay(string $tenantId, string $meteringUnitName)\n{\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $unitCount = $pricingApi->getMeteringUnitDateCountByTenantIdAndUnitNameToday(\n        $tenantId, $meteringUnitName\n    );\n\n    return [\n        'count' => $unitCount->getCount(),\n        'date' => $unitCount->getDate(),\n        'meteringUnitName' => $unitCount->getMeteringUnitName(),\n    ];\n}\n")))),(0,i.kt)("h2",{id:"update-the-current-time-metering-unit-count"},"Update the Current Time Metering Unit Count"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/UpdateMeteringUnitTimestampCountNow"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-4"},"Use Case"),(0,i.kt)("p",null,"Please use this when updating the unit count, such as at times of changes in usage like the number of users."),(0,i.kt)("h3",{id:"implementation-sample-4"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Update the Current Time Metering Unit Count\n * \n * @see https://docs.saasus.io/reference/updatemeteringunittimestampcountnow\n *\n * @param string $tenantId Tenant ID\n * @param string $meteringUnitName Metering Unit Name\n * @param Request $request\n * @return array\n */\npublic function updateCountOfNow(string $tenantId, string $meteringUnitName, Request $request)\n{\n    // Retrieve the update method and count from the request\n    ['method' => $method, 'count' => $count] = $request->only(['method', 'count']);\n    $updateMeteringUnitTimeStampNowParam = new UpdateMeteringUnitTimestampCountNowParam();\n    $updateMeteringUnitTimeStampNowParam->setMethod($method)\n        ->setCount($count);\n\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $count = $pricingApi->updateMeteringUnitTimestampCountNow(\n        $tenantId, $meteringUnitName, $updateMeteringUnitTimeStampNowParam\n    );\n\n    return [\n        'count' => $count->getCount(),\n        'timestamp' => $count->getTimestamp(),\n        'meteringUnitName' => $count->getMeteringUnitName(),\n    ];\n}\n")))),(0,i.kt)("h2",{id:"get-the-metering-unit-count-for-the-current-month"},"Get the Metering Unit Count for the Current Month"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-5"},"Use Case"),(0,i.kt)("p",null,"Please use this when you want to show usage to tenants."),(0,i.kt)("h3",{id:"implementation-sample-5"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Get the Metering Unit Count for the Current Month\n *\n * @see https://docs.saasus.io/reference/getmeteringunitmonthcountbytenantidandunitnamethismonth\n *\n * @param string $tenantId Tenant ID\n * @param string $meteringUnitName Metering Unit Name\n * @return array\n */\npublic function getCountOfCurrentMonth(string $tenantId, string $meteringUnitName)\n{\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $unitCount = $pricingApi->getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth($tenantId, $meteringUnitName);\n\n    return [\n        'count' => $unitCount->getCount(),\n        'month' => $unitCount->getMonth(),\n        'meteringUnitName' => $unitCount->getMeteringUnitName(),\n    ];\n}\n")))),(0,i.kt)("h2",{id:"get-the-metering-unit-count-for-a-specified-month"},"Get the Metering Unit Count for a Specified Month"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-6"},"Use Case"),(0,i.kt)("p",null,"Please use this when you want to show usage to tenants."),(0,i.kt)("h3",{id:"implementation-sample-6"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Get the Metering Unit Count for a Specified Month\n *\n * @see https://docs.saasus.io/reference/getmeteringunitmonthcountbytenantidandunitnameandmonth\n *\n * @param string $tenantId Tenant ID\n * @param string $meteringUnitName Metering Unit Name\n * @param string $month Month in yyyy-mm format\n * @return array\n */\npublic function getCountOfSpecifiedMonth(string $tenantId, string $meteringUnitName, string $month)\n{\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $unitCount = $pricingApi->getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(\n        $tenantId, $meteringUnitName, $month\n    );\n\n    return [\n        'count' => $unitCount->getCount(),\n        'month' => $unitCount->getMonth(),\n        'meteringUnitName' => $unitCount->getMeteringUnitName(),\n    ];\n}\n")))),(0,i.kt)("h2",{id:"get-all-metering-unit-counts-for-a-specified-date"},"Get All Metering Unit Counts for a Specified Date"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/GetMeteringUnitDateCountsByTenantIdAndDate"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-7"},"Use Case"),(0,i.kt)("p",null,"Please use this when you want to show usage to tenants."),(0,i.kt)("h3",{id:"implementation-sample-7"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Get All Metering Unit Counts for a Specified Date\n *\n * @see https://docs.saasus.io/reference/getmeteringunitdatecountsbytenantidanddate\n *\n * @param string $tenantId Tenant ID\n * @param string $date Date in yyyy-mm-dd format\n * @return \\AntiPatternInc\\Saasus\\Sdk\\Pricing\\Model\\MeteringUnitDateCount[]\n */\npublic function getAllMeteringCountOfSpecifiedDate(string $tenantId, string $date)\n{\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $allMeteringCount = $pricingApi->getMeteringUnitDateCountsByTenantIdAndDate(\n        $tenantId, $date\n    );\n\n    return array_map(function ($count) {\n        return [\n            'count' => $unitCount->getCount(),\n            'date' => $unitCount->getDate(),\n            'meteringUnitName' => $unitCount->getMeteringUnitName(),\n        ];\n    }, $allMeteringCount->getCounts());\n}\n")))),"## Get All Metering Unit Counts for a Specified Month",(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../reference/pricing-api#tag/metering/operation/GetMeteringUnitMonthCountsByTenantIdAndMonth"},"API Documentation")),(0,i.kt)("h3",{id:"use-case-8"},"Use Case"),(0,i.kt)("p",null,"Please use this when you want to show usage to tenants."),(0,i.kt)("h3",{id:"implementation-sample-8"},"Implementation Sample"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Get All Metering Unit Counts for a Specified Month\n *\n * @see https://docs.saasus.io/reference/getmeteringunitmonthcountsbytenantidandmonth\n *\n * @param string $tenantId Tenant ID\n * @param string $month Month in yyyy-mm format\n * @return MeteringUnitMonthCount[]\n */\npublic function getAllMeteringCountOfSpecifiedMonth(string $tenantId, string $month)\n{\n    $client = new \\AntiPatternInc\\Saasus\\Api\\Client();\n    $pricingApi = $client->getPricingClient();\n    $allMeteringCount = $pricingApi->getMeteringUnitMonthCountsByTenantIdAndMonth(\n        $tenantId, $month\n    );\n\n    return array_map(function ($unitCount) {\n        return [\n            'count' => $unitCount->getCount(),\n            'month' => $unitCount->getMonth(),\n            'meteringUnitName' => $unitCount->getMeteringUnitName(),\n        ];\n    }, $allMeteringCount->getCounts());\n}\n")))))}g.isMDXComponent=!0}}]);