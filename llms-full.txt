# Official Release on 2022/12/24

URL: https://www.prisma.io/docs/changelog/20221224
Thank you for trying out the SaaSus Platform.

We have released the official version of the SaaSus Platform on December 14, 2022.
As a result, all present beta accounts will gradually be switched over to the "Free Plan".
Please note there is a limit of up to 5 users in the Free Plan.

In addition, we are now offering the option to upgrade to our "Standard Plan", which comes without such limitations.
If you're using our official SaaS, we suggest you to consider the Standard Plan as well.

We appreciate your continued support for SaaSus Platform.

---

# Update on 2023/11/05

URL: https://www.prisma.io/docs/changelog/20231105
We have released updates on the following features.

New Features

- You can now sign up and sign in using your Google account

- SES has been made to automatically activate  
    By configuring your CNAME records to your domain, authentication emails will be sent from the corresponding domain.

- SaaSus Account User Management  
    It's now possible to invite users or change permissions from the User Management page.  
    Roles (Administrator, Developer, Operator) can be assigned to users, with certain limitations based on their roles for console use.  
      Administrators: SaaS Development Console, SaaS Operation Console  
      Developers: SaaS Development Console (except for Account Settings)  
      Operators: SaaS Operation Console

- Tenant User Invitation  
    It's now possible to invite users to a tenant.  
    You can check the status of invited users.

- You can now retrieve the payment status of subscriptions associated with the tenant

Improvements

- You can now specify the effective date of the pricing plan settings down to the minute
- ID has been added to the Pricing Plan Settings and Tax Rate Settings page
- The Tax Rate and Division fields have been added to the Tax Rate Settings list
- After creating a Tax Rate, you can now change the Display Name and Description
- You can now smoothly list your SaaS using SaaSus Platform on the AWS Marketplace
- You can now retrieve various events on SaaSus Platform via Amazon EventBridge

Bug Fixes

- It became possible to set the tax rate when cancelling a pricing plan

---

# Update on 2023/11/18

URL: https://www.prisma.io/docs/changelog/20231118
We have released updates on the following features.

New Features

- A new pricing plan has been created  
    Starter Plan  
      Monthly 5,500 yen, 800 yen per 1 MAU (Unlimited number of users), Up to 5 tenants

    Advanced Plan  
      Monthly 300,000 yen, Unlimited number of users, Unlimited number of tenants  
      The following features can now be used in addition to the Standard Plan features:  
      ・ API Log Viewing Feature  
      ・ SAML Integration

- API Log Viewing Feature (Only for Advanced Plan)  
    Provides a detailed list of API call information

- SAML Integration (Only for Advanced Plan)  
    SAML integration is now possible.

---

# Update on 2023/11/23

URL: https://www.prisma.io/docs/changelog/20231123
We have released updates on the following features.

- [New Feature] User Feedback & Voting Feature  
  We're offering a feature to gather requests from users.  
  This includes functionality for users to create a request, vote, and view a list of requests.  
  From the administrator's side, functionality to reply to registered requests as comments from the operator is available.
---

# Update on 2024/03/05

URL: https://www.prisma.io/docs/changelog/20240305
We have released updates on the following features.

- Automation of billing payment  
The payment setting of Stripe subscription with card payment is set to automatic payment

- Improvement of API log acquisition function  
Added parameters when acquiring API logs  
Log creation date, log creation date and time, and display number can be set.  
If no parameter is specified, 200 items for the day will be acquired.

- You can now add pricing plans to products listed on AWS Marketplace

- It is now possible to purchase the Advanced Plan on AWS Marketplace

- Added a switch to show/hide passwords

- We have improved the UX of the table

- Prepared documentation for AWS Marketplace integration

- Documentation preparation
---

# Update on 2024/03/13

URL: https://www.prisma.io/docs/changelog/20240313

We have released updates on the following features.

- Authentication status reset when changing domain  
  Fixed an issue where the domain appeared to be authenticated even though it was not authenticated after changing the domain.

---

# Update on 2024/03/19

URL: https://www.prisma.io/docs/changelog/20240319

We have released updates on the following features.

- You can now create meter units from the meter unit setting screen.  
  The format now allows you to select the meter unit when creating a measurement unit, and the case where the wrong meter unit name was specified has been improved.

---

# Update on 2024/04/02

URL: https://www.prisma.io/docs/changelog/20240402

We have released updates on the following features.

- Fixed an issue when obtaining listing status after linking to AWS Marketplace.  
  A new version (SSLv2) has been released on AWS Marketplace, so we have taken action.

- Organized the display information of the user feedback function.

---

# Update on 2024/04/11

URL: https://www.prisma.io/docs/changelog/20240411

The following features have been released

- Changes to the UI  
  We have changed the UI of the SaaSus management console to make it more comfortable for you to use. The operations may feel a bit different than before, but we believe you will get used to it and find it comfortable soon. Here are the changes:  
  ・You can now transition to the account selection screen by clicking the account name in the upper left corner of the screen.  
  ・You can now transition to different environments, such as the dev

---

# Update on 2024/04/23

URL: https://www.prisma.io/docs/changelog/20240423

We have released the following feature updates:

- Addition of user environment definition management functionality  
  The SaaSus Platform has a feature called user environment definition, which allows you to define test users in your SaaS production environment. This is intended for use cases where you expose APIs externally.  
  In response to customer feedback that the SaaSus Platform management console UI was complex and difficult to understand, we have made it possible to choose not to use the user environment definition feature. Please enjoy the simpler and more user-friendly UI!

---

# Update on 2024/05/24

URL: https://www.prisma.io/docs/changelog/20240524

We have released the following new feature:

- Addition of Single Tenant Management Function  
  We have added a new feature called "Single Tenant Management Function" for single-tenant architecture. By using this function, when creating a tenant on the SaaSus Platform, servers and databases will be automatically prepared for your AWS environment.  
  You can now SaaS-enable applications that do not support multi-tenancy in the shortest time possible!  
  \*The "Single Tenant Management Function" is available only to customers on the Advanced plan or higher.

---

# Update on 2024/10/29

URL: https://www.prisma.io/docs/changelog/20241029

We have released the following new feature:

- Added Password Email Notification for New SaaS Users  
  Modified the "Create SaaS User" API to make the "password" parameter optional instead of required.  
  Existing API calls will continue to work as before.  
  When making an API call without setting the "password" parameter:
  - A random password will be automatically generated
  - The password will be sent to the user via email

- Added Stripe Subscription Information Retrieval  
  Implemented a new API to fetch Stripe subscription information linked to tenants.  
  Using the information obtained from this API, you can make subsequent Stripe API calls to retrieve more detailed subscription data.

---

# Update on 2024/11/15

URL: https://www.prisma.io/docs/changelog/20241115

We have released the following new feature:

- Beta Release of Smart API Gateway Feature  
  Provides API endpoints and authentication features with automatically generated API definitions using generative AI.  
  Automatically provisions required infrastructure and authentication mechanisms, enabling easy and secure API exposure to external users.  
  Enables both SaaS transformation of existing applications and integration with external SaaS services.  
---

# Update on 2024/11/26

URL: https://www.prisma.io/docs/changelog/20241126

We have released the following new feature:

- Password Setup Flow Enhancement  
  Modified the login flow to automatically redirect users to the password change screen when logging in with a temporary password.
---

# Update on 2024/12/10

URL: https://www.prisma.io/docs/changelog/20241210

We have released the following features:

- Added an API for retrieving user information by email address  
API Docs:  
 https://docs.saasus.io/ja/docs/reference/auth-api#tag/userInfo/operation/GetUserInfoByEmail  

- Modified password reset behavior during login  
When password reset is required during login, users will now be automatically redirected to the password reset screen.
---

# Update on 2025/03/14

URL: https://www.prisma.io/docs/changelog/20250314

We have released the following feature.

- Smart API Gateway Feature Release  
  This functionality allows the SaaSus Platform to expose various features of your application as external APIs by adding specified annotations to your application's source code.  
  With infrastructure and authentication features for API provision automatically provided, you can securely publish external APIs without expertise in API construction or operation.  

  Main Features  

  - API Key Issuance and Management  
    You can issue and manage API keys for each user and tenant. Since each application user and tenant can have   their own unique API key, this enables fine-grained access management.  

  - Authentication  
    Authentication is performed using API keys. Clients are authenticated by sending an API key with API requests,   allowing you to identify who called which API.  

  - Authorization  
    You can control API access through Role-Based Access Control (RBAC) based on user roles.  
    This allows you to restrict available API endpoints and resources based on roles assigned to users. Roles can   be customized through the SaaSus console or SaaSus API.  

  - Throttling  
    Different throttling settings can be configured for each endpoint, allowing you to set rate limits on API   calls.  
    You can individually control the call frequency of each API endpoint according to its importance and load,   ensuring overall system performance and stability.  

  - IP Control  
    You can allow access only from specific IP addresses or IP ranges.  
    Even in environments with strict security requirements, this restricts API access to only designated   connection sources, reducing the risk of unauthorized access.  
---

# Update on 2025/06/05

URL: https://www.prisma.io/docs/changelog/20250605

We have released updates on the following features.

- Smart MCP Server Feature Release  
  The Smart MCP Server is a new feature that allows APIs generated by the Smart API Gateway to be exposed externally in the Model Context Protocol (MCP) format. MCP-compatible clients can interact with these APIs using natural language.  
  With SaaSus Platform automatically handling infrastructure provisioning, operation, and the application of authentication and authorization settings, developers can easily publish and utilize MCP-enabled APIs without additional configuration.  

  Main features  

  - Expose APIs as an MCP server  
    APIs generated via the Smart API Gateway can be transparently published in MCP format.  

  - Natural language-based API operations  
    MCP-compatible clients can invoke existing APIs using natural language commands.  

  - Automated infrastructure and access control  
    Infrastructure setup, operation, and security policy application required for API publication are automatically handled by the SaaSus Platform, reflecting existing configurations as-is.  

- Smart API Gateway Feature Enhancement  
  A new option has been added to the Smart API Gateway that allows you to choose the authentication method when issuing API keys from the admin console.  
  This enhancement enables flexible balancing between security and usability depending on the use case.  

  Main features  

  - Authentication method selection per API key  
    When issuing an API key, you can select from the following two authentication modes:  
    - Without client secret  
      After obtaining an access token, the API can be used directly without requiring request signing.  
    - With client secret  
      After obtaining an access token, requests must be signed before calling the API (signature required).  

    This allows greater flexibility, such as quick implementation in early development stages, and stricter authentication in production environments with higher security requirements.  

---

# Welcome to SaaSus Platform

URL: https://www.prisma.io/docs/changelog/welcome-to-saasus-platform
Release v0.10(final beta version) on 2022/12/10

Release v0.8(beta version) on 2022/07/30
---

# Purpose and Overview

URL: https://www.prisma.io/docs/part-1/purpose-and-overview

## Purpose

This manual serves as a guide for SaaS providers to streamline the development, operation, and management of their SaaS services using the **SaaSus Platform**.  
It covers a wide range of topics—from the fundamentals of SaaS to feature usage across the platform, as well as operational best practices and precautions.

## Target Audience and Prerequisites

- **Target Audience**:  
  SaaS business operators, system administrators, developers, marketing professionals, and anyone involved in delivering SaaS services.

- **Prerequisites**:  
  Basic knowledge of web technologies, cloud computing concepts, and general understanding of SaaS models (including their benefits and limitations) is assumed.

## Structure

This manual consists of the following eight parts:

- **Part I: Introduction**  
- **Part II: SaaS Fundamentals**  
- **Part III: Overview and Setup of the SaaSus Platform**  
- **Part IV: Using the SaaSus Platform (Developer Console)**  
- **Part V: Using the SaaSus Platform (Operation Console)**  
- **Part VI: Development Documentation**  
- **Part VII: Troubleshooting and Support**  
- **Part VIII: Appendix**
---

# Cloud Computing Basics

URL: https://www.prisma.io/docs/part-2/cloud-computing-basics

## 1. Differences between IaaS, PaaS, and SaaS

- **IaaS (Infrastructure as a Service)**:  
  Provides fundamental IT resources such as virtual machines, networks, and storage. Users manage the OS and applications on top of the provided infrastructure.

- **PaaS (Platform as a Service)**:  
  Offers an environment for application development including OS, middleware, and runtime. Developers can focus on building applications without managing the underlying infrastructure.

- **SaaS (Software as a Service)**:  
  Delivers complete applications over the internet to end users. All infrastructure and application maintenance is handled by the service provider.

## 2. Key Features of Cloud (On-demand, Scalability, Flexibility)

- **On-demand Access**:  
  Resources can be provisioned and used instantly, based on business needs, without prior commitments.

- **Scalability**:  
  Systems can scale up or down easily depending on the workload or user demand.

- **Flexibility (Elasticity)**:  
  Cloud environments can automatically handle traffic spikes and fluctuations without manual intervention.

## 3. Public, Private, and Hybrid Cloud Models

- **Public Cloud**:  
  Cloud services offered over the internet and shared among multiple organizations. Typically provided by third-party vendors such as AWS, Azure, or Google Cloud.

- **Private Cloud**:  
  A cloud environment dedicated to a single organization, providing greater control and security. Often used by enterprises with strict compliance needs.

- **Hybrid Cloud**:  
  Combines public and private cloud environments, allowing organizations to leverage the benefits of both models—such as scalability from public cloud and control from private cloud.
---

# Advantages and Disadvantages of SaaS

URL: https://www.prisma.io/docs/part-2/saas-advantages-and-disadvantages

## 1. Advantages of SaaS

### 1.1 Reducing Initial Investment Costs

Since SaaS typically uses a subscription-based model, there is no need for significant upfront investment when adopting the service.

### 1.2 Scalability and Flexibility

The system can scale its resources easily to accommodate increased usage or a growing number of users.

### 1.3 Reducing Operational Burden

Operational tasks such as security patching, updates, and backups are handled by the service provider, reducing the maintenance load on the user side.

### 1.4 Continuous Updates and Latest Features

SaaS applications are updated regularly, ensuring access to the latest features and security enhancements, which helps maintain competitiveness.

## 2. Disadvantages of SaaS

### 2.1 Customization Limitations

Customization is limited to what the platform allows, making it difficult to meet highly specific internal requirements in some cases.

### 2.2 Risks from External Dependencies

Since users depend on an external service provider, there is a potential risk of service disruption or termination due to provider-side issues.

### 2.3 Security and Compliance Considerations

Proper handling of data, privacy, and compliance must be ensured by both the service provider and the user organization.
---

# SaaS Business Model

URL: https://www.prisma.io/docs/part-2/saas-business-model

## 1. Subscription Model Basics

The subscription model, in which services are provided in exchange for regular payments, enables a stable revenue stream and encourages continuous service improvement.

## 2. Types of Pricing Plans (Pay-as-you-go, Fixed, Hybrid)

- **Pay-as-you-go Model**:  
  Charges are based on actual usage volume.

- **Fixed Pricing Model**:  
  A flat-rate fee allows for unlimited use within the scope of the plan.

- **Hybrid Model**:  
  A combination of a base fee and additional charges based on usage.

## 3. LTV (Customer Lifetime Value) and Churn Rate

- **LTV (Customer Lifetime Value)**:  
  The total profit a customer is expected to generate over the entire duration of their relationship with the service.

- **Churn Rate**:  
  The percentage of users who cancel their subscriptions over a given period.

These metrics are key to understanding the health and growth potential of a SaaS business.

## 4. SaaSus Platform and Stripe Billing Integration

The SaaSus Platform handles the design of pricing plans, as well as the recording and management of usage data. By integrating with payment services such as Stripe, it enables flexible and automated billing operations for SaaS businesses.

- **Managing Pricing Plans and Usage Data**:  
  SaaS applications send usage data such as feature access and operation counts via API. This data is recorded in SaaSus Platform and used to calculate charges based on predefined pricing plans.

- **Automated Billing with Stripe Integration**:  
  By simply registering a Stripe secret key, you can link your SaaSus pricing plans to Stripe price information, enabling automatic billing through Stripe.

- **Plan Changes and Upgrades**:  
  Pricing plans can be updated within SaaSus Platform in response to customer needs or usage patterns. These changes are automatically reflected in the Stripe subscription.
---

# SaaS Development

URL: https://www.prisma.io/docs/part-2/saas-development

## 1. Continuous Integration/Continuous Delivery (CI/CD)

- **Automated Build and Test**:  
  Automatically build and test the application upon code changes to ensure consistent quality.

- **Deployment Pipeline**:  
  Enables automated deployments to staging and production environments for faster and safer releases.

## 2. Version and Release Management

- **Source Code Management**:  
  Use version control systems such as Git to track changes and manage development workflows.

- **Release Planning**:  
  Define schedules for feature rollouts, bug fixes, and security patches to maintain stability and transparency.

## 3. Importance of Agility (Agile Development)

- **Iterative Development**:  
  Continuously improve the product through short development cycles, incorporating user feedback.

- **Team Communication**:  
  Maintain transparency and alignment through regular meetings, reviews, and collaborative planning.

---

# Legal Issues in SaaS

URL: https://www.prisma.io/docs/part-2/saas-legal-issues

## 1. Terms of Service, Privacy Policy, and Data Processing Agreement

- **Terms of Service**:  
  Defines the basic rules and conditions users must agree to when using the service.

- **Privacy Policy**:  
  Outlines how personal information is collected, used, and protected.

- **Data Processing Agreement (DPA)**:  
  A contractual agreement between the SaaS provider and the customer, clarifying responsibilities regarding data handling.

## 2. Legal Implications of SLA

- **Scope of Liability**:  
  Clearly defines the provider’s responsibilities, including compensation and accountability in case of service outages or disruptions.

## 3. Case Studies and Risk Management

- **Past Incidents**:  
  Use real-world examples of service-related incidents to evaluate and improve risk mitigation strategies.

- **Preventive Measures**:  
  Introduce concrete actions such as regular backups, enhanced security measures, and proactive monitoring.
---

# SaaS Marketing

URL: https://www.prisma.io/docs/part-2/saas-marketing

## 1. Lead Generation and Conversion

- **Online Marketing**:  
  Attract leads through SEO, social media, paid advertising, and other digital channels.

- **Trial Offering**:  
  Provide free trials or demo versions to showcase the product’s value and encourage conversions.

## 2. Trial Offering and Implementation Support

- **Onboarding Process**:  
  Offer user guides and support to help customers get started smoothly and efficiently.

- **Webinars and Seminars**:  
  Conduct educational sessions to address pre-adoption concerns and build trust with potential users.

## 3. Customer Success and Upselling/Cross-selling

- **Regular Reviews**:  
  Monitor customer usage regularly to encourage engagement and resolve issues early.

- **Additional Service Proposals**:  
  Recommend upgraded plans or additional features tailored to customer needs to support upselling and cross-selling strategies.

## 4. Publishing on Marketplaces

- **Platform Registration**:  
  Prepare the necessary documentation and submit your product to various SaaS marketplaces.

- **Post-launch Promotion**:  
  Execute effective marketing strategies to drive visibility and clearly communicate the value proposition after launch.
---

# SaaS Operations

URL: https://www.prisma.io/docs/part-2/saas-operations
## 1. SLA (Service Level Agreement) and Support

- **SLA (Service Level Agreement)**:  
  Defines service quality guarantees such as system uptime, response times, and other performance indicators provided to users.

- **Support Structure**:  
  Includes inquiry handling, incident response, and well-maintained documentation to assist users effectively.

## 2. Incident Management (Monitoring, Notification, Recovery)

- **Monitoring**:  
  Continuous monitoring of system status for early detection of issues.

- **Notification**:  
  Automatic alerts sent to administrators when incidents occur.

- **Recovery Process**:  
  Predefined procedures for responding to and recovering from incidents in a structured manner.

## 3. User Support and Documentation

- **FAQs, Manuals, and Knowledge Base**:  
  Provide self-service resources to help users resolve issues on their own.

- **Support Channels**:  
  Offer multiple contact methods such as phone, email, and chat to accommodate different user preferences.

## 4. Operational Data Viewable on the SaaSus Platform

- **Tenant and User Status**:  
  The SaaS Operations Console allows you to view the current registration status and contract information for each tenant and user.

- **User Activity Logs**:  
  By including the appropriate headers when calling SaaSus APIs from your SaaS application, user activity can be recorded and viewed through the SaaS Operations Console.
---

# SaaS Security and Compliance

URL: https://www.prisma.io/docs/part-2/saas-security-and-compliance

## 1. Data Security Basics (Encryption, Access Control)

- **Encryption**:  
  Encryption technologies are used to secure data during transmission and while at rest.

- **Access Control**:  
  Enforce strict user and administrator access controls based on defined permissions and roles.

## 2. Compliance (GDPR, ISO, SOC, etc.)

- **Compliance Standards**:  
  Support for global and industry-specific standards such as GDPR, ISO, and SOC.

- **Internal Audits**:  
  Conduct regular security audits and compliance checks to ensure adherence to policies and requirements.

## 3. Security Audits and Log Handling

- **Log Management**:  
  Operational logs are recorded to support analysis of unauthorized access and system failures.

- **Audit Procedures**:  
  Define and document procedures for internal and external audits, including access logs and incident records.

## 4. Security Features Provided by SaaSus Platform

- **Token-Based Authentication**:  
  SaaSus Platform uses token-based authentication, issuing ID tokens, access tokens, and refresh tokens upon login. These tokens are attached to requests to verify user identity.

- **User Activity Log Recording and Visibility**:  
  SaaSus Platform records user activity—such as API executions—and provides a visual interface to review them. These logs are useful for audit trails and detecting unauthorized access.

- **IP Address Restrictions**:  
  SaaSus Platform allows you to restrict authentication requests based on source IP addresses. This helps block unauthorized login attempts from untrusted networks.
---

# SaaS Technical Architecture

URL: https://www.prisma.io/docs/part-2/saas-technical-architecture

## 1. Multi-Tenant Architecture and Its Benefits

- **Shared Infrastructure**:  
  A single system manages multiple customers (tenants) simultaneously.

- **Efficient Resource Usage**:  
  Optimizes infrastructure costs and operational efficiency by sharing resources.

- **Data Isolation**:  
  Ensures strict separation of data between tenants to maintain security and privacy.

## 2. Basics of Authentication and Authorization (IDaaS, OAuth, OIDC)

- **IDaaS (Identity as a Service)**:  
  Cloud-based identity services that provide user authentication and identity management.

- **OAuth / OIDC**:  
  Industry-standard authentication protocols used to securely control access to resources.

## 3. Ensuring Availability and Resilience (Scaling, Redundancy)

- **Scaling**:  
  Automatically adjusts system resources to accommodate traffic spikes and usage fluctuations.

- **Redundancy**:  
  Leverages multiple data centers and redundant components to minimize the risk of service outages.

## 4. Basics of Logging, Monitoring, and Alerts

- **Logging**:  
  Records system events and errors to support issue analysis and root cause identification.

- **Monitoring**:  
  Continuously tracks the status of servers and applications to maintain optimal performance.

- **Alerts**:  
  Automatically notifies administrators of abnormal events to enable rapid troubleshooting.
---

# What is SaaS?

URL: https://www.prisma.io/docs/part-2/what-is-saas

## 1. SaaS Definition and Features

SaaS (Software as a Service) is a model in which software and applications are delivered over the cloud. Users can access these services via the internet without needing to install or maintain the software locally. Key features of SaaS include:

- **Subscription-Based Model**:  
  Users pay a recurring fee, reducing the need for large upfront investments.

- **Always Up-to-Date**:  
  Updates are handled by the provider, ensuring users always have access to the latest features.

- **Multi-Tenant Architecture**:  
  Multiple users (tenants) share the same infrastructure, leading to greater cost efficiency.

## 2. Difference from Package Software

Compared to traditional packaged software, SaaS differs in the following ways:

- **Deployment Method**:  
  While packaged software requires installation, SaaS can be accessed immediately via a web browser.

- **Updates and Maintenance**:  
  With SaaS, updates are managed on the provider’s side, eliminating the need for users to handle them manually.

- **Cost Structure**:  
  SaaS typically involves lower upfront costs, and operational expenses are included in the subscription, leading to improved cash flow.

## 3. SaaS Trends and Background

With the rise of cloud computing and the widespread use of mobile devices, businesses increasingly demand flexible IT infrastructure. SaaS has gained attention for the following reasons:

- **Flexible Scalability**:  
  Resources can be scaled up or down quickly according to usage needs.

- **Reduced Operational Burden**:  
  The service provider handles tasks such as security, updates, and backups.

- **Ease of Global Deployment**:  
  SaaS applications can be accessed by users around the world via the internet.
---

# What is the SaaSus Platform?

URL: https://www.prisma.io/docs/part-2/what-is-saasus

## 1. SaaSus Platform Overview

The **SaaSus Platform** provides the control plane necessary for operating and managing SaaS services.  
It consists of two main consoles: one for developers (**SaaS Development Console**) and one for operators (**SaaS Operation Console**).

## 2. Features and Functionality of SaaSus Platform

- **SaaS Development Console**:  
  This console is used to configure and connect your SaaS application to the SaaSus Platform.  
  Key features include:

  - Basic integration settings (e.g., app name, domain, callback URLs)
  - Authentication configuration
  - Tenant and user management setup
  - Pricing plan configuration
  - Obtaining SDKs and API keys
  - Integration with external services (e.g., Stripe)
  - AWS Marketplace Integration (support for product listing)  
  - Smart API Gateway (convert your SaaS service into public APIs)
  - Viewing API request logs (helpful for error tracking and troubleshooting)

- **SaaS Operation Console**:  
  This console is designed for the ongoing management and operation of your SaaS service.  
  Key features include:

  - Managing tenants and users
  - Viewing and configuring pricing plans per tenant
  - Viewing service announcements and updates

- **SDK / API Access**:  
  Using the SaaSus SDK and API, you can integrate core features such as authentication, tenant management, and pricing plans into your SaaS application.

## 3. Challenges Solved by SaaSus Platform

The SaaSus Platform helps reduce operational burdens that are difficult to address with a single SaaS application alone:

- **Unified Authentication and Authorization Management**:  
  No need to build separate auth infrastructure for each tenant.

- **Automated Billing and Usage Tracking**:  
  Easily define pricing models and track usage for both fixed and usage-based billing.

- **Efficient Tenant Management**:  
  Centralized management of tenant contracts and onboarding workflows.

## 4. Benefits and ROI

Using the SaaSus Platform brings the following business benefits:

- **Reduced Development and Operational Costs**:  
  Avoid building complex features from scratch and focus resources on your core product.

- **Faster Time to Market**:  
  Pre-packaged features allow for quick service launch and iteration.

- **Quantifiable Gains**:  
  - Lower initial development costs  
  - Reduced staffing requirements through operational automation  
---

# Getting Started with SaaSus Platform

URL: https://www.prisma.io/docs/part-3/getting-started

## Getting Started

### 1. Create an Account and Log In

To use the SaaSus Platform, begin by registering for an account.
The steps from account creation to login are outlined below.

#### Create a New Account

1. Go to [https://auth.saasus.io/sign-up](https://auth.saasus.io/sign-up)
2. Enter the required information and click "sign up."
   ![01](/img/part-3/getting-started/getting_started-01.png)

#### Email Verification

After registration, a temporary password will be sent to your registered email address.
Enter the temporary password along with your new password and click "Set a new password" to activate your account.

![02](/img/part-3/getting-started/getting_started-02.png)

#### After First Login

When you first register on the SaaSus Platform, a dedicated tenant will be created for you.
Since this involves creating a dedicated AWS account, it can take up to an hour.
Once setup is complete, a notification will be sent to your registered email.

![03](/img/part-3/getting-started/getting_started-03.png)

#### Initial Login After Tenant Creation

Once the tenant is ready and you log in, you will be prompted to enter your **user profile information**.

Information required:

* Company name
* Your name

![04](/img/part-3/getting-started/getting_started-04.png)

After filling in the information and clicking "completion," you will be taken to a screen where you can select the tenant console.

![05](/img/part-3/getting-started/getting_started-05.png)

### 2. System and Environment Requirements

The following environments are required to use the SaaSus Platform Console and to integrate via the API.

#### 2.1 Requirements for Using the SaaSus Platform Console

* **Browser**

  * Google Chrome (latest version)
    *Currently, only Chrome on macOS is officially supported.*
* **Network**

  * Stable internet connection

#### 2.2 Requirements for Using the API

* **Network**

  * Your application server must be able to connect to `https://api.saasus.io` via HTTPS (port 443).

### 3. Preparing a Stripe Account and Integration

SaaSus Platform supports automated billing via Stripe. If needed, follow the steps below to configure integration.

* **Create a Stripe Account**
  Create an account on Stripe’s official site and retrieve the "secret key" from your dashboard.

* **Integration Steps**
  Open the "Integration > Billing" screen in the SaaS Development Console and register the secret key. This will enable automated billing based on the rate plans you've defined.

### 4. Basic Workflow Before Going Live

Follow these 4 steps to complete setup and prepare for production use after adopting SaaSus Platform.

1. **Create an account and log in**
   Complete account registration and tenant setup as described above, and log in to the SaaSus Platform Console.

2. **Configure your SaaS app’s basic information**
   Set up your app name, domain, redirect URL, terms of use, etc., in the [Basic App Settings](/docs/part-4/application-settings/basic-app-settings).
   You can also configure rate plans and attribute settings via the SaaS Development Console.

3. **Integrate the SDK and test resource creation**
   Refer to [Developer SDK/API Overview](/docs/part-6/developer-sdk-api-overview) to test authentication, tenant creation, user creation, and more.

4. **Verify settings in the SaaS Operation Console**
   Refer to the [SaaS Operation Console Overview](/docs/part-5/operations-console-overview) to confirm that tenant management, user and tenant attributes, and rate plan settings are correctly reflected.

If you’re unsure about any of the above steps, refer to the [Tutorial Introduction](/docs/tutorial/tutorial-introduction).

---

# Overview of Login Screen and Main Screen of SaaSus Platform

URL: https://www.prisma.io/docs/part-3/login-and-main-screen-overview

## 1. Login Screen

When accessing the SaaSus Platform, you will first see the login screen.
You can either log in with your email address and password, or authenticate via your Google account.

![Login Screen](/img/part-3/login-and-main-screen-overview/login.png)

## 2. Tenant and Console Selection Screen

After the first login, you will be prompted to select a tenant and choose whether to proceed to the SaaS Development Console or the SaaS Operation Console.

![Tenant and Console Selection Screen](/img/part-3/login-and-main-screen-overview/select-environment.png)

From this screen, you can navigate to the appropriate console based on your purpose:

* **SaaS Development Console**: Configure and set up SaaS features
* **SaaS Operation Console**: View and manage users, tenants, and billing information

## 3. SaaS Development Console Screen

The SaaS Development Console allows you to configure the core structure of your SaaS application, set up authentication, define pricing plans, and configure external integrations.

![Development Console Screen 1](/img/part-3/login-and-main-screen-overview/saas-development-console-01.png)
![Development Console Screen 2](/img/part-3/login-and-main-screen-overview/saas-development-console-02.png)

## 4. SaaS Operation Console Screen

In the SaaS Operation Console, you can manage tenant users, review billing-related information, assign roles, and perform other daily operational tasks.

![Operation Console Screen](/img/part-3/login-and-main-screen-overview/saas-operation-console.png)

## 5. Switching Between Consoles

On the SaaSus Platform, you can easily switch between the SaaS Development Console and SaaS Operation Console using the dropdown in the upper left corner of the screen.

![Console Switching](/img/part-3/login-and-main-screen-overview/console-switching.png)

This switch allows you to instantly navigate to the interface required for your task.

## 6. Setting Up Multi-Factor Authentication (MFA)

1. Click the user menu at the top right of the SaaS Development Console or SaaS Operation Console.

2. Click `Multi-factor Authentication Setting`.

3. Click the `Add Device` button.
   ![multi-factor-authentication-1](/img/part-3/login-and-main-screen-overview/multi-factor-authentication-1.png)

4. Click `Show QR Code` to display the QR code.
   ![multi-factor-authentication-2](/img/part-3/login-and-main-screen-overview/multi-factor-authentication-2.png)

5. Scan the displayed QR code using the Google Authenticator or Authy app.

6. Enter the 6-digit code generated by the app and click `Certification`.

7. Once MFA is enabled, you will be required to enter a verification code during future logins.

---

# SaaSus Platform Architecture

URL: https://www.prisma.io/docs/part-3/saasus-platform-architecture


## 1. Role and Components of the Control Plane

Operating a SaaS application requires tenant management, user authentication & authorization, rate‑plan configuration, billing, and other complex shared capabilities. Building and maintaining these for every application incurs significant development effort and operational cost.

SaaSus Platform offers a **control plane** that centralizes these common features and provides SaaS‑specific best practices in a standardized form.

:::info
In this document, the consoles for configuring and operating a SaaS application—the **“SaaS Development Console”** and **“SaaS Operation Console”**—are collectively referred to as the **“SaaSus Platform Console.”**
:::

### Role

- Tenant‑scoped user management with role‑based access control  
- Automated authorization and billing that honor the subscribed rate plan  
- Flexible integration via web console and SDK/API  
- Event notifications for integrating with external services  

These capabilities let developers focus on their domain logic and user experience instead of re‑implementing common SaaS infrastructure.

### Components

The control plane is composed of the following modules.

| Module                     | Description                                                                                       |
|---------------------------|---------------------------------------------------------------------------------------------------|
| **SaaS Development Console** | Developer‑facing console for initial app setup, authentication settings, and rate‑plan definition. |
| **SaaS Operation Console**   | Operator‑facing console for tenant & user administration, billing review, and audit‑log access.     |
| **SaaSus SDK / API**         | Interfaces that embed authentication, tenant, and billing functionality into your own application.  |
| **Event‑Integration Feature**| Sends user actions and state‑change events to services such as Amazon EventBridge.                |

:::info
SaaSus Platform offers a simple way to integrate with Stripe. By registering your Stripe secret key in the SaaS Development Console, billing and subscription updates are automatically handled based on your pricing data in Stripe. This greatly improves operational efficiency in billing management for SaaS businesses.
:::

## 2. Overview of the SaaS Development Console / SaaS Operation Console / SDK/API

SaaSus Platform provides all configuration and management functions needed to build and operate a SaaS application through the **SaaS Development Console**, **SaaS Operation Console**, and **SDK/API**.  
Engineers, business owners, and operators each access only the information appropriate to their roles.

### System Overview

| Role            | Component(s) Used                    | Typical Tasks                                                                                                                                      |
|-----------------|--------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|
| **Engineer**       | SaaS Development Console / SDK/API | Develop core product features, integrate with SaaSus Platform via the SDK/API, and handle initial setup such as login screens and authentication. |
| **Business Manager** | SaaS Development Console           | Define pricing plans, user permissions (roles), and security policies.                                                                             |
| **Operations Manager**       | SaaS Operation Console             | Manage customer tenants, handle user accounts, and monitor usage.                                                                                  |
| **End User**       | Your SaaS application              | Log in and use the service in accordance with the subscribed plan and permissions.                                                                 |

### Example Workflow

1. **Engineer** implements authentication, billing, and tenant‑management integration using the SaaSus SDK/API.  
2. **Business Manager** defines rate plans and access roles in the SaaS Development Console.  
3. **Operations Manager** manages customer tenants and their users in the SaaS Operation Console.  
4. **End User** logs in to the service and uses the features provided under their plan.

### System Diagram

![01](/img/part-3/saasus-platform-architecture/saasus_platform_architecture-01.png)

## 3. Mechanism for Authentication, Tenant Management, and Rate‑Plan Management

SaaSus Platform lets you configure and manage universally required SaaS capabilities—**user authentication**, **tenant (contract) management**, and **rate‑plan & billing management**—through a web console, and integrate them into your own application via SDK or API.

### Authentication & Authorization

Secure access control to your SaaS application.

- **Token‑based authentication**  
  When a user logs in, ID, access, and refresh tokens are issued. Subsequent API requests include these tokens for authentication.

- **Selectable login methods**  
  Standard email/password login and Google social login are available.

- **Role‑based user permissions**  
  Define roles (e.g., administrator, general user) so only authorized users can perform privileged actions.

### Tenant Management

Manage the contract unit called a **tenant**.

- **Tenant‑scoped user administration**  
  Register, edit, or delete users on a per‑tenant basis.

- **Contract status insight**  
  View each tenant’s subscribed plan and usage from the SaaS Operation Console.

### Rate‑Plan Management

Essential for SaaS monetization—**rate‑plan definition** and **billing processing**.

- **Create and edit rate plans**  
  Configure pricing models such as flat‑rate monthly or usage‑based.

- **Stripe integration**  
  Register your Stripe secret key to fully automate subscription, billing, and payment‑status management.

---

# Billing and Payment Methods

URL: https://www.prisma.io/docs/part-4/account-settings/billing-information

This page explains billing and payment methods for SaaSus Platform paid plans.

## Billing Overview

SaaSus Platform offers flexible billing options to accommodate various business needs.

- **Monthly billing cycles**: Starting from the subscription date
- **Automatic renewal**: Continues unless cancelled
- **Multiple payment methods**: Supports credit cards and AWS Marketplace

## Payment Methods

### Credit Card Payment (via Stripe)

When you subscribe to a paid plan through the SaaS Development Console, payments are processed securely through Stripe.

- **Accepted cards**: Visa, Mastercard, American Express, JCB
- **Automatic billing**: Monthly billing from registration date
- **Invoice delivery**: Digital invoices sent via email
- **Currency**: Japanese Yen (¥) - All prices exclude tax

### AWS Marketplace Payment

- **Consolidated billing**: Charges appear on your AWS bill
- **AWS payment methods**: Use your existing AWS payment setup
- **Private offers**: Enterprise plans can be set with custom pricing
- **Currency**: Billing follows your AWS account currency settings

## Invoice Management

### Viewing Invoices

1. **Stripe customers**: Access invoices through the billing portal in Account Settings
2. **AWS Marketplace customers**: View charges in your AWS billing dashboard

### Invoice Details

Each invoice includes the following:
- SaaSus Platform base fees
- Usage-based charges (Smart API Gateway calls, uploads)
- Monthly Active User (MAU) charges (Starter plan)
- Tax calculations
- Detailed usage breakdowns

### Billing Process (Stripe)

For paid plans subscribed through the SaaS Development Console, billing works as follows:

Example) If you subscribe to the Starter plan on August 1, 2025:  
Initial billing date: August 1, 2025  
One hour after contract, an invoice for ¥5,500 will be issued.  
Payment due date (invoice due date): August 31, 2025  
The payment due date is 30 days after the billing date, and payment will be processed on the day you register your card information with Stripe.

#### Billing for subsequent months

For the credit card registered during the initial billing, charges will be made on the same date each month and automatic payment will be executed.  
Billing date: Same date of the following month as the initial billing date (e.g., September 1, 2025)  
※ For months without the corresponding date (e.g., months without the 31st), the last day of that month becomes the billing date.

#### Usage-based billing

Regarding usage-based billing:
For example, the August 1, 2025 bill includes the monthly fee of ¥5,500 for August 1, 2025 to September 1, 2025, and usage-based charges for July 1, 2025 to August 1, 2025.

## Usage-Based Billing

### Upload Charges

- **Free uploads**: Limits vary by plan
- **Overage rates**: ¥20-¥50 per upload beyond limits
- **Usage monitoring**: Monitor uploads in the SaaS Operations Console (development, staging, production environments)
- **Target services**: Smart API Gateway

※ For details, please check the [pricing plan page](https://saasus.io/pricing).

### API Call Count

- **Free tier**: 10,000 calls per month included in all paid plans
- **Overage rates**: Vary by plan (¥7-¥20 per 10,000 calls)
- **Usage monitoring**: Monitor usage in the SaaS Operations Console (development, staging, production environments)
- **Target services**: Smart API Gateway / Smart MCP Server

※ For details, please check the [pricing plan page](https://saasus.io/pricing).

### Monthly Active Users (MAU)

For Starter plan:
- **Base fee**: ¥5,500 per month
- **MAU charge**: ¥800 per active user per month
- **Definition**: Users who authenticate at least once during the billing period (production environment)
- **Usage monitoring**: Monitor usage in the SaaS Operations Console (production environment)

※ For details, please check the [pricing plan page](https://saasus.io/pricing).

## Tax Information

### Consumption Tax

- **Rate**: 10% consumption tax applies to customers
- **Invoice display**: Tax shown separately on invoices

## Invoice Information

### Billing Information

- **Invoice downloads**: All invoices are available in PDF format.
- **Retention period**: Billing data is retained for 7 years.

## Support and Contact

For billing-related inquiries, please contact our support team through the following methods:

- **Starter**: Submit inquiries through the admin console
- **Standard/Standard Plus/Advanced Plus/Enterprise**: Contact via Slack Connect or scheduled meetings

### Required Information

When contacting support about billing, please provide the following information:
- Account ID or email address
- Invoice number (if applicable)
- Detailed description of the issue

---

**Note**: Billing terms and conditions are subject to change. Please refer to the latest Terms of Service for complete details.
---

# Procedure for Applying for a Paid Plan

URL: https://www.prisma.io/docs/part-4/account-settings/procedure-for-applying-for-a-paid-plan

The SaaSus Platform currently offers the following plans.  
To apply for a paid plan, you can either apply through the SaaS Development Console or via AWS Marketplace.

<div className="table-scroll">
<table className="nowrap-table">
  <thead>
    <tr>
      <th rowspan="2">Plan</th>
      <th rowspan="2">Monthly Fee<br />(excluding tax)</th>
      <th rowspan="2">Environments</th>
      <th rowspan="2">Users</th>
      <th rowspan="2">Tenants</th>
      <th rowspan="2">Log<br />Retention</th>
      <th rowspan="2">IP Restriction<br />Slots</th>
      <th colspan="2">Smart API Gateway</th>
      <th rowspan="2">Support Contact</th>
      <th rowspan="2">Support Coverage</th>
      <th rowspan="2">Support Level</th>
    </tr>
    <tr>
      <th>Fee per Call</th>
      <th>Upload Frequency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Free</td>
      <td className="text-right">¥0</td>
      <td className="text-right">1</td>
      <td className="text-right">5</td>
      <td className="text-right">5</td>
      <td className="text-right">7 days</td>
      <td className="text-right">1 slot</td>
      <td>Free</td>
      <td>3/week</td>
      <td>Inquiry<br />Admin Console</td>
      <td>General responses regarding<br />SaaSus Platform features</td>
      <td>Best effort<br />Product-only support</td>
    </tr>
    <tr>
      <td>Starter</td>
      <td className="text-right">¥5,500<br />¥800 per MAU</td>
      <td className="text-right">3</td>
      <td className="text-right">Unlimited</td>
      <td className="text-right">5</td>
      <td className="text-right">7 days</td>
      <td className="text-right">1 slot</td>
      <td>Free up to 10k calls<br />¥20 per 10k calls after that</td>
      <td>7/week</td>
      <td>Inquiry<br />Admin Console</td>
      <td>General responses regarding<br />SaaSus Platform features</td>
      <td>Best effort<br />Product-only support</td>
    </tr>
    <tr>
      <td>Standard</td>
      <td className="text-right">¥100,000</td>
      <td className="text-right">3</td>
      <td className="text-right">300</td>
      <td className="text-right">20</td>
      <td className="text-right">90 days</td>
      <td className="text-right">1 slot</td>
      <td>Free up to 10k calls<br />¥15 per 10k calls after that</td>
      <td>Up to 7/day free<br />¥50 per upload after</td>
      <td>Slack Connect</td>
      <td>Advisory support on<br />SaaSus Platform usage considering SaaS specifics</td>
      <td>Best effort<br />Product-only support</td>
    </tr>
    <tr>
      <td>Standard Plus</td>
      <td className="text-right">¥600,000</td>
      <td className="text-right">3</td>
      <td className="text-right">300</td>
      <td className="text-right">20</td>
      <td className="text-right">90 days</td>
      <td className="text-right">1 slot</td>
      <td>Free up to 10k calls<br />¥15 per 10k calls after that</td>
      <td>Up to 7/day free<br />¥50 per upload after</td>
      <td>Slack Connect<br />Online meetings</td>
      <td>Advisory support on<br />SaaSus Platform usage<br />Design/implementation assistance with samples</td>
      <td>Best effort<br />Including architecture design support</td>
    </tr>
    <tr>
      <td>Advanced</td>
      <td className="text-right">¥300,000</td>
      <td className="text-right">3</td>
      <td className="text-right">300,000</td>
      <td className="text-right">100</td>
      <td className="text-right">5 years</td>
      <td className="text-right">50 slots</td>
      <td>Free up to 10k calls<br />¥10 per 10k calls after that</td>
      <td>Up to 20/day free<br />¥30 per upload after</td>
      <td>Slack Connect</td>
      <td>Advisory support on<br />SaaSus Platform usage considering SaaS specifics</td>
      <td>Best effort<br />Product-only support</td>
    </tr>
    <tr>
      <td>Advanced Plus</td>
      <td className="text-right">¥800,000</td>
      <td className="text-right">3</td>
      <td className="text-right">300,000</td>
      <td className="text-right">100</td>
      <td className="text-right">5 years</td>
      <td className="text-right">50 slots</td>
      <td>Free up to 10k calls<br />¥10 per 10k calls after that</td>
      <td>Up to 20/day free<br />¥30 per upload after</td>
      <td>Slack Connect<br />Online meetings</td>
      <td>Advisory support on<br />SaaSus Platform usage<br />Design/implementation assistance with samples</td>
      <td>Best effort<br />Including architecture design support</td>
    </tr>
    <tr>
      <td>Enterprise</td>
      <td className="text-left">Please contact our<br />sales team</td>
      <td className="text-right">3</td>
      <td className="text-right">Unlimited</td>
      <td className="text-right">Unlimited</td>
      <td className="text-right">7 years</td>
      <td className="text-right">5,000 slots</td>
      <td>Free up to 10k calls<br />¥7 per 10k calls after that</td>
      <td>Up to 20/day free<br />¥20 per upload after</td>
      <td>Slack Connect<br />Online meetings</td>
      <td>Advisory support on<br />SaaSus Platform usage considering SaaS specifics<br />Design/implementation assistance with samples</td>
      <td>Best effort<br />Including architecture design support</td>
    </tr>
  </tbody>
</table>
</div>

***

## Applying for a Paid Plan from the SaaS Development Console

To apply for a paid plan on the SaaSus Platform Console, sign in and go to 'Account Settings' and then 'Pricing Plans' in the SaaS Development Console. The period will be from today in monthly increments, and we will send you an invoice via Stripe. This plan is an automatic renewal on a monthly basis.

![0558e63-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/0558e63-image.png)



## Applying for a Paid Plan from AWS Marketplace

:::warning
If you wish to purchase via the AWS Marketplace, it will be handled as a Private Offer.  
Please contact our support team for assistance.
:::

We have also listed our product on the AWS Marketplace, where you can also apply. If you apply via AWS Marketplace, you will be billed together with your AWS usage fees.  
<a href="https://aws.amazon.com/marketplace/pp/prodview-2gr3qw7kp5qx6?sr=0-1&ref_=beagle&applicationId=AWSMPContess" target="_blank">SaaSus Platform</a>
<!--
### 1.Click `View purchase options` from the AWS Marketplace product page

![f0ffc78-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/f0ffc78-image.png)

### 2.Set the terms of your software contract

① Select contract period  
  Choose between 1 month / 1 year

② Set contract renewal  
  Yes: Automatically renew the contract / No: Do not renew automatically

③ Contract options  
  Select the Standard Plan

④ Create a contract  
  Click on `Create contract`

![b2e6294-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/b2e6294-image.png)

### 3.Confirmation dialog

Please click on `Pay now` when the confirmation dialog appears

![50544ef-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/50544ef-image.png)

### 4.Contract completion dialog

If the contract is successfully completed, a dialog like the one below will appear. Please click on `Set up your account` to proceed.

![8b0f660-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/8b0f660-image.png)

**The procedure differs depending on whether you are creating a new account or paying for an existing account**

If you are creating a new account, refer to step 5-1-1.  
If you are paying for an existing account, refer to step 5-2-1.

### 5-1-1. Sign in to SaaSus Platform (Creating a New Account)

After clicking on `Set up your account`, you will be directed to the new registration page via AWS Marketplace. If you don't have an account on SaaSus Platform, please fill in your account name and email address as prompted and create a new account.

![915e21a-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/915e21a-image.png)

***

### 5-2-1. Sign in to SaaSus Platform (Paying for an existing account)

After clicking on `Set up your account`, you will be directed to the new registration page via AWS Marketplace. If you have an account on SaaSus Platform, click on 'Already registered and want to sign in' to go to the sign-in page via AWS Marketplace, and then sign in with your existing account.

![a677094-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/a677094-image.png)

![f3eaabf-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/f3eaabf-image.png)

### 5-2-1. Selecting an account to be paid for

Select the account you want to pay for and click on 'Start using this account'.

![e15cc67-image](/img/part-4/account-settings/procedure-for-applying-for-a-paid-plan/e15cc67-image.png)
-->

---

# Inviting Users

URL: https://www.prisma.io/docs/part-4/account-settings/saasususerinvitation

If you are developing and operating SaaS with multiple people, it is advisable not to share a single SaaSus Platform account. Instead, use the user invitation feature to grant appropriate permissions and manage the account.

## How to Invite Users

1. From the SaaS Development Console menu, click on 'Account Settings'

   ![saasususerinvitation-1](/img/part-4/account-settings/saasususerinvitation/saasususerinvitation-1.png)
2. Click the 'Users' tab
3. Click the 'Invitations' button

   ![saasususerinvitation-2](/img/part-4/account-settings/saasususerinvitation/saasususerinvitation-2.png)
4. Enter the email address of the user to be invited, select the permission, and click the 'Invite' button

   ![saasususerinvitation-3](/img/part-4/account-settings/saasususerinvitation/saasususerinvitation-3.png)

   Multiple permissions can be selected.
5. Once the invitation is successful, an email with a URL will be sent to the entered email address. The user will be added by clicking on the URL and registering as a member.

## To Check the Status of Invitations and Cancel

1. From the SaaS Development Console menu, click on 'Account Settings'
2. Click the 'Users' tab
3. Click the select box marked 'Users' to the left of the 'Invite' button, and select 'Invitations' from the dropdown
4. The status of user invitations will be displayed, to cancel an invitation, click on the trash can icon at the right end of the target user

   ![saasususerinvitation-4](/img/part-4/account-settings/saasususerinvitation/saasususerinvitation-4.png)

---

# API Key Settings

URL: https://www.prisma.io/docs/part-4/application-settings/api-key-settings

This page explains how to check and reissue the **SaaS ID**, **API keys**, and **Client Secret**, which are required when using the SaaSus SDK or API.  
These items can be accessed from the **API Key** section in the side menu.

## Checking or Reissuing the SaaS ID

The **SaaS ID** is a unique identifier for your SaaS.

- The SaaS ID generally does not need to be changed.
- You can reissue the ID by clicking the **Regenerate** button if necessary.

## Viewing and Generating API Keys

**API Key** is used to authenticate requests made via the SDK or API.

- Up to **two** keys can be issued.
- It is **recommended to rotate keys** periodically for enhanced security.
- Click the **Generate** button to create a new key.
- Be sure to **keep your keys confidential** to avoid leakage or misuse.

## Reissuing the Client Secret

The **Client Secret** is used to sign API requests. It is **never transmitted over the network**.

- Used for generating request signatures.
- Click the **Regenerate** button to obtain a new secret.

![API Key screen](/img/part-4/application-settings/api-key-settings/api-key.png)
---

# Basic App Settings

URL: https://www.prisma.io/docs/part-4/application-settings/basic-app-settings

This page allows you to configure information used in authentication-related screens, such as the login screen (e.g., service name, icon, and terms of use URL).

You can edit these settings from the **“Authorization Details”** item in the side menu.

![Authorization Details Menu](/img/part-4/application-settings/basic-app-settings/authorization-screen-customize-01.png)

The following items can be edited:

| Item                     | Description |
|--------------------------|-------------|
| **Service Name**         | Text displayed at the top of the login screen (e.g., \"Welcome to SaaSus Platform\") |
| **Icon**                 | App icon displayed in the top-left of the login screen (recommended size: square, at least 128px) |
| **Terms of Use URL**     | URL linked from the “Terms of Use” text at the bottom of the login screen |
| **Privacy Policy URL**   | URL linked from the “Privacy Policy” text at the bottom of the login screen |

![Example Edit Screen](/img/part-4/application-settings/basic-app-settings/authorization-screen-customize-02.png)

Clicking the **Save** button will apply your changes. It may take a few minutes for the updated screen to be generated.

The login screen URL will be your configured domain name with `auth.` prefixed.  
Example: If your domain is `sample.saasus.jp`, the login screen will be `https://auth.sample.saasus.jp/`.

:::info
- Under the **“Pages”** tab, you can choose whether to show links to the Terms of Use and Privacy Policy on the registration, login, and password change screens.
- Under the **“Authentication Settings”** tab, you can configure login methods and password reset options.
:::
---

# Tenant Attributes

URL: https://www.prisma.io/docs/part-4/application-settings/declare-additional-attribute-to-tenant

## Declare Additional Attribute To Tenant

Select Tenant Attribute Definition to define additional attributes for the tenant.

"Tenant" here refers to the user's organizational unit (contract unit) in multi-tenant SaaS.

Define any additional attributes that may be required by each tenant.

Click “+ Create Tenant Attribute” to to define additional attributes.

This time, we'll enable you to enter notes about that tenant.

- Attribute Name: memo
- Display Name: Memo
- Type: String

When you have completed your entries, click the "Create" button.

![01](/img/part-4/application-settings/declare-additional-attribute-to-tenant/declare-additional-attribute-to-tenant-01.png)

Added tenant attributes.

![02](/img/part-4/application-settings/declare-additional-attribute-to-tenant/declare-additional-attribute-to-tenant-02.png)
---

# Domain and Redirect Settings

URL: https://www.prisma.io/docs/part-4/application-settings/domain-and-redirect-settings
This page explains how to configure your **custom domain** used for the login screen and the **post-login redirect URL**. Both can be set from the **Basic Settings** screen.

### 1. Domain Settings

Configure the domain used by your SaaS application. This is an important setting used not only for the login screen but also as the sender domain for various notification emails.

#### Setup Steps

1. Log in to the SaaS Development Console.  
2. From the side menu, select **Domain**.  
3. Enter the domain name you want to use and complete the registration.

*Note: Please use a domain for which you can configure DNS settings.*

![Domain Input Screen](/img/part-4/application-settings/domain-and-redirect-settings/domain-name-preference-01.png)

#### DNS Configuration

After registering your domain name, a CNAME record will appear at the bottom of the screen after a few seconds.

This CNAME record is for DNS validation to confirm the domain name you own.

Please register this CNAME record value in your DNS. (GoDaddy, Namecheap, Domain.com, Name.com, AWS Route53, Azure DNS, Cloud DNS, .etc)

![CNAME Display](/img/part-4/application-settings/domain-and-redirect-settings/domain-name-preference-02.png)

After registering with your own DNS, the verification will be completed in a few minutes and the message "The following DNS information has been verified and is working properly." will be displayed.

This completes the preparations for configuring the SaaS Platform.

![03](/img/part-4/application-settings/domain-and-redirect-settings/domain-name-preference-03.png)

SaaSus Platform automatically generates a login screen based on this domain.

### 2. Post-Login Redirect URL Settings

Set the URL where users should be redirected after a successful login—typically the homepage of your SaaS application.

![Redirect URL Settings](/img/part-4/application-settings/domain-and-redirect-settings/authentication-preference-redirect-url.png)

Authentication information (such as tokens) will be passed to this URL.  
You can use the SaaSus SDK to implement a callback handler at this destination to receive and process the authentication result.
---

# Creating a Google Analytics Account

URL: https://www.prisma.io/docs/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount
This guide will walk you through the steps to create a Google Analytics account for setting up in Google Tag Manager.

1. Access [Google Analytics](https://analytics.google.com/analytics/web) and click on "Start measuring".
2. Enter an account name and configure the data sharing settings, then click next.

   ![creategoogleanalyticsaccount-1](/img/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount-1.png)

   - Account name: As desired
   - Data sharing settings: Review the options and check the items you want to share
3. Create a property and click next.

   ![creategoogleanalyticsaccount-2](/img/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount-2.png)

   - Property name: As desired
   - Reporting time zone: Select the relevant country (United States by default)
   - Currency: Select the relevant currency (US Dollar by default)
4. Set up your business details and click next.

   ![creategoogleanalyticsaccount-3](/img/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount-3.png)

   - Industry Category: Choose the one that applies
   - Business Size: Choose the one that applies
5. Select your business objectives and click on create.

   ![creategoogleanalyticsaccount-4](/img/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount-4.png)
6. Choose "Web" to start collecting data.

   ![creategoogleanalyticsaccount-5](/img/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount-5.png)
7. Set up your data stream and click on create stream.

   ![creategoogleanalyticsaccount-6](/img/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount-6.png)

   It is recommended to take note of the Measurement ID displayed after creating the stream, as it will be used in Google Tag Manager.

This completes the creation of your Google Analytics account.

---

# Linking Google Analytics with Google Tag Manager

URL: https://www.prisma.io/docs/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink
This guide covers setting up Google Analytics tags in Google Tag Manager to analyze users accessing the login screen.

## 1. Confirm the Google Analytics Measurement ID

1. Access [Google Analytics](https://analytics.google.com/analytics/web)
2. Go to the "Admin" screen from the gear icon at the bottom left
3. Click on "Data Streams" under "Data Collection and Correction"
4. Select the relevant stream
5. Confirm the Measurement ID displayed

   ![googleanalyticsgoogletagmanagerlink-1](/img/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink-1.png)

## 2. Set up Google Analytics in Google Tag Manager

1. Access the [Google Tag Manager homepage](https://tagmanager.google.com/)
2. Click on "Add a new tag"

   ![googleanalyticsgoogletagmanagerlink-2](/img/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink-2.png)
3. From "Tag Configuration", select "Google Analytics" > "Google Tag".

   ![googleanalyticsgoogletagmanagerlink-3](/img/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink-3.png)
4. Enter the Google Analytics Measurement ID for the tag ID

   ![googleanalyticsgoogletagmanagerlink-4](/img/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink-4.png)
5. Choose "Initialization - All Pages" for the trigger

   ![googleanalyticsgoogletagmanagerlink-5](/img/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink-5.png)
6. Enter a name for the tag at the top left input field and click save
7. Click on "Submit" at the top right of the container page

   ![googleanalyticsgoogletagmanagerlink-6](/img/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink-6.png)
8. Enter details for version publication and creation, then click on submit

   ![googleanalyticsgoogletagmanagerlink-7](/img/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink-7.png)

   - Version name: Optional (can be left blank)
   - Version description: Optional (can be left blank)

With these steps, Google Analytics and Google Tag Manager are now linked. Accessing the login screen will reflect the information in Google Analytics.

Please note that it may take 24-48 hours for the data to appear in Google Analytics. For more details, refer to the [Google Analytics documentation](https://support.google.com/analytics/answer/7084038?hl=ja&sjid=9555982415879226311-AP#zippy=%2C%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AE%E5%86%85%E5%AE%B9).

---

# Setting the Google Tag Manager Container ID

URL: https://www.prisma.io/docs/part-4/application-settings/googletagmanagersetting/googletagmanagercontaineridsetting
## 1. Confirming the Container ID

### From the Google Tag Manager Homepage

Please check the "Container ID" column in the list of containers, which will display as "GTM-XXXXXXXX".

![googletagmanagercontaineridsetting-1](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercontaineridsetting-1.png)

### From the Container Page

Check the "GTM-XXXXXXXX" displayed at the top right of the screen.

![googletagmanagercontaineridsetting-2](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercontaineridsetting-2.png)

## 2. Setting the Container ID

1. Open the "Authentication Details Settings" in the SaaS development Console.

   ![googletagmanagercontaineridsetting-3](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercontaineridsetting-3.png)
2. In the "Basic Settings" at the bottom of the Authentication Details Settings screen, set the "Google Tag Manager Container ID" to your container ID and press the save button.

   ![googletagmanagercontaineridsetting-4](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercontaineridsetting-4.png)

This completes the process of embedding the Google Tag Manager tags into the login screen.

---

# Creating a Google Tag Manager Account and Container

URL: https://www.prisma.io/docs/part-4/application-settings/googletagmanagersetting/googletagmanagercreateaccountandcontainer
Create your Google Tag Manager account and container with the following steps.

If you have already created an account, please see "2. Creating from a Container" for further instructions.

## 1. Creating from an Account

1. Access the [Google Tag Manager homepage](https://tagmanager.google.com/)
2. Click the "Create Account" button

   ![googletagmanagercreateaccountandcontainer-1](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercreateaccountandcontainer-1.png)
3. Fill in the "Account Settings" and "Container Settings" then click "Create"

   - Account name: As desired
   - Country: As desired
   - Share data anonymously with Google and others: As desired
   - Container name: As desired
   - Target platform: Web

   ![googletagmanagercreateaccountandcontainer-2](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercreateaccountandcontainer-2.png)
4. Review the Google Tag Manager Terms of Service, and if acceptable, click "Yes"

This completes the creation of your account and container, and you will be directed to the container page.

## 2. Creating from a Container

1. Access the [Google Tag Manager homepage](https://tagmanager.google.com/)
2. Click on "Create Container" from the dot menu on the right side of the container list

   ![googletagmanagercreateaccountandcontainer-3](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercreateaccountandcontainer-3.png)
3. Fill in the "Container Settings" and then click "Create" at the top right

   - Container name: As desired
   - Target platform: Web

   ![googletagmanagercreateaccountandcontainer-4](/img/part-4/application-settings/googletagmanagersetting/googletagmanagercreateaccountandcontainer-4.png)

This completes the creation of your container, and you will be directed to the container page.

---

# Google Tag Manager Settings

URL: https://www.prisma.io/docs/part-4/application-settings/googletagmanagersetting

By setting up Google Tag Manager, you can embed Google Tag Manager tags in the login screen, and configure Google Analytics and other services.

Marketing activities are crucial for SaaS operations, so let's set up Google Tag Manager to acquire information about users and traffic sources.

First, create a Google Tag Manager account and container.

[Create a Google Tag Manager Account and Container](/docs/part-4/application-settings/googletagmanagersetting/googletagmanagercreateaccountandcontainer)

Once you have created the Google Tag Manager account and container, you can actually set up Google Tag Manager in your SaaS.

[Set the Google Tag Manager Container ID](/docs/part-4/application-settings/googletagmanagersetting/googletagmanagercontaineridsetting)

Now, the Google Tag Manager tag is embedded in the login screen, so you can integrate with Google Analytics to collect user behavior data.

If you haven't created a Google Analytics account yet, please check the following document.

[Create a Google Analytics Account](/docs/part-4/application-settings/googletagmanagersetting/creategoogleanalyticsaccount)

If you have already created a Google Analytics account or completed the account creation, set up Google Analytics and Google Tag Manager with the following document.

[Link Google Analytics and Google Tag Manager](/docs/part-4/application-settings/googletagmanagersetting/googleanalyticsgoogletagmanagerlink)

This time we used Google Analytics, but Google Tag Manager supports various other tags and templates provided by third parties.

For more details, please check the following links:

[Tags Supported by Google Tag Manager](https://support.google.com/tagmanager/answer/6106924)

[Google Tag Manager Community Template Gallery](https://tagmanager.google.com/gallery)

[About Custom Templates](https://support.google.com/tagmanager/answer/9334084)

[About Custom Tags](https://support.google.com/tagmanager/answer/6107167)

---

# IP Restriction

URL: https://www.prisma.io/docs/part-4/application-settings/ip-restriction

The IP restriction feature limits access to the SaaSus console and API requests by IP address.

:::warning
The IP Restriction feature is not available for customers on the legacy Starter or Standard plans.  
To use this feature, you need to change to a new pricing plan.
:::

## Applying for IP Restriction

### How to Apply

Please contact us via Intercom.

### Application Details

Send us the CIDR list of IP addresses that you would like to allow for both the SaaSus Platform Console and the API.

  SaaSus Platform Console
  ```
  xxx.xxx.xxx.xxx/32, yyy.yyy.yyy.yyy/24
  ```
  API
  ```
  aaa.aaa.aaa.aaa/32, bbb.bbb.bbb.bbb/24
  ```

## Behavior After IP Restriction Is Set

After setting up IP restrictions, access will be limited as follows:

1. **If you attempt to log in from an IP address that is not on the list**

   ![ip-restriction-1](/img/part-4/application-settings/ip-restriction/ip-restriction-1.png)

2. **If you attempt to access the API from an IP address that is not on the list**

   The API response body will be as follows:
   ```
   {
       "message": "IP address: xxx.xxx.xxx.xxx is not allowed",
       "type": "ip_restricted"
   }
   ```
---

# About AWS Marketplace Integration Function

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-integration
The AWS Marketplace integration function supports the "AWS Marketplace listing process" carried out by the "SaaS created using the SaaSus Platform".

:::caution
Please note that listing cannot be completed solely by operating within the SaaSus Platform.
:::

# Listing Process by SaaSus Platform

Screen operations are required in three services in the listing procedure. Please proceed while paying attention to which service to process.
- AWS
- AWS Marketplace Management Portal
- SaaSus Platform

First, perform a procedure called seller registration on AWS. Please prepare your AWS account in advance for seller registration. 
After registration, you will be able to access the AWS Marketplace Management Portal (AMMP), where you will set up your public profile and bank account for transfer. 
When these procedures are completed, you will proceed with the listing process using the AWS Marketplace integration function on the SaaSus Platform.
From here on, the procedure will be through the staging environment and the production environment provided by the SaaSus Platform. 
Because it's hard to imagine from text, we will introduce the flow to listing in an overall diagram and related documents from here.

![the whole picture](/img/part-4/aws-marketplace-integration/the-whole-picture.png)

### Entire Flow of Listing Procedure

1. Seller registration (AWS)
   1. [Seller Registration Guide](/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration)

2. Setting of Public profile and disbursement methods (AMMP)
   1. [Guide to setting the Public profile](/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/public-profile-settings)
   2. [How to start setting the bank account and disbursement methods](/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/tax-information-interview)

   ***
   ===**Start of Test Phase**===

3. Preparation of SaaS product for testing (SaaSus Platform:: Staging environment)

4. Registration of SaaS product for testing (AMMP)
   1. [How to start registration](/docs/part-4/aws-marketplace-integration/product-submission)

5. Preparation of API integration (SaaSus Platform:: Staging environment)

6. Confirmation of  integration with AWS Marketplace

   1. [Example of integration confirmation](/docs/part-4/aws-marketplace-integration/supplementary/integration-test)
   
   ===**End of Test Phase**===
   
   :::info
   During the test phase, you will create an environment for integration confirmation just before listing. 
   You will also create a similar environment in the production phase, but this environment can be used for testing even after the listing process is complete, so you can use it for additional feature development and troubleshooting when a malfunction occurs.
   :::
   ***

   ===**Start of Production Phase**===

7. Preparation of SaaS product for production (SaaSus Platform:: Production environment)

8. Registration of SaaS product for production (AMMP)

9.  Preparation of API integration (SaaSus Platform:: Production environment)

10. Confirmation of integration with AWS Marketplace
   
   ===**End of Production Phase**===
   :::info
   The production phase involves creating the environment necessary for listing in the production environment. If you have finished the integration check in the test phase, you can proceed smoothly. Once the listing process is complete, charges will actually be incurred, so if you want to check the operation in the production environment, you need to make the SaaS product private.
   :::
   ***

11. Final review request for SaaS product for production
    1. [How torequest](/docs/part-4/aws-marketplace-integration/supplementary/final-review-request)

12.  Public release request for SaaS product for production
     1. [Request Method](/docs/part-4/aws-marketplace-integration/supplementary/public-request)

# Criteria for SaaS Products in Listing

There are criteria for listing SaaS products on the AWS Marketplace, which are published in the official documents. Please make sure to check them in advance.

[SaaS Product Guidelines](https://docs.aws.amazon.com/ja_jp/marketplace/latest/userguide/saas-guidelines.html)

## SaaSus Platform's Check

Based on the SaaS product guidelines, we will check from the SaaSus Platform whether the standards are met. We check it when using the AWS Marketplace integration function, but we will also post it in the document so please check it.

- Self sign-up is enabled in the authentication settings of the SaaSus Platform ([Reference](/docs/part-4/aws-marketplace-integration/supplementary/self-up-setting))  
- Users can check the plan they have contracted for on SaaS themselves  
- There is a mechanism for users to contact support on SaaS  
- Consideration of multitenancy is implemented when a user who already has an account purchases SaaS ([Reference](/docs/part-4/aws-marketplace-integration/embedding-products))  
- Users who purchased from the AWS Marketplace cannot change the plan or withdraw on SaaS ([Reference](/docs/part-4/aws-marketplace-integration/supplementary/user-judgment-method))
---

# Seller Registration Guide

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration
You will register as a seller on <a href="https://aws.amazon.com/marketplace/partners/management-tour" target="_blank">AWS Marketplace</a>.  
Please start the registration from `Register now` on the page displayed in the link above.

![aws-marketplace-seller-registration-1](/img/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration-1.png)

You will be redirected to the AWS Marketplace seller registration page, where you should set the company name, terms of use, and registrant information to complete the registration.

![aws-marketplace-seller-registration-2](/img/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration-2.png)

![aws-marketplace-seller-registration-3](/img/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration-3.png)


After completing the input, please proceed with the registration by clicking the Register button.

![aws-marketplace-seller-registration-4](/img/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration-4.png)


![aws-marketplace-seller-registration-5](/img/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration-5.png)


After registration, proceed to the Public profile settings.

![aws-marketplace-seller-registration-6](/img/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/aws-marketplace-seller-registration-6.png)

---

# DAC7 Tax Survey

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/dac7-tax-survey
DAC7 refers to the European Commission's directive regarding tax reporting by corporations.  
This directive imposes a tax reporting obligation on subsidiaries, parent corporations, proportionate consolidation corporations, joint ventures and decentralized corporations in the European Union.  
Information sharing on taxation is required to prevent attempts to reduce domestic tax through business expansion or the start of new businesses under control of overseas enterprises.

Press to start the DAC7 Tax Survey.

![dac7-tax-survey-1](/img/part-4/aws-marketplace-integration/dac7-tax-survey/dac7-tax-survey-1.png)

Please answer the following questionnaire according to your company's situation.

![dac7-tax-survey-2](/img/part-4/aws-marketplace-integration/dac7-tax-survey/dac7-tax-survey-2.png)

After answering the survey, sign and press the submit button to finish the survey.

![dac7-tax-survey-3](/img/part-4/aws-marketplace-integration/dac7-tax-survey/dac7-tax-survey-3.png)

On the Client Dashboard, press Finish Interview to finish the interview regarding tax information.

![dac7-tax-survey-4](/img/part-4/aws-marketplace-integration/dac7-tax-survey/dac7-tax-survey-4.png) 

---

# Hyperwallet Registration

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/hyperwallet-registration
When you click on `Sign up for Hyper wallet` from the bank account registration, you will be directed to the following page.  
Select the account verification method and valid code.

![hyperwallet-registration-1](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-1.png)

You will asked to enter a valid code. Please enter the `Pin Code` found below `Sign up for Hyper wallet` on the previous page, and then press the continue button.

![hyperwallet-registration-2](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-2.png)

After entering, you will be asked to specify the account type. Please select an option that suits your environment.

![hyperwallet-registration-3](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-3.png)

When you select a profession, you will be asked to enter profile information. Please enter your corporate information, company address, and so on.

![hyperwallet-registration-4](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-4.png)

After entering the contents, please press Continue.

![hyperwallet-registration-5](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-5.png)

Continue to enter the company contact information and company contact address, etc.

![hyperwallet-registration-6](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-6.png)

After entering the information, press Continue.

![hyperwallet-registration-7](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-7.png)

Continue to enter your email address, password, security question, legal agreement, etc.

![hyperwallet-registration-8](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-8.png)

After inputting the information, press Confirm.

![hyperwallet-registration-9](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-9.png)

Pressing Confirm will display Your account has been successfully activated.  
Once it's activated, press `Add Transfer Method`.

![hyperwallet-registration-10](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-10.png)

Specify the account for transfer and press Continue.

![hyperwallet-registration-11](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-11.png)

After moving to the next page, enter the bank account information for the transfer and press Submit.

![hyperwallet-registration-12](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-12.png)

After pressing Submit, an US deposit account will be created.

![hyperwallet-registration-13](/img/part-4/aws-marketplace-integration/hyperwallet-registration/hyperwallet-registration-13.png)

After registration, return to setting up your bank account.

---

# Public profile Setting Guide

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/public-profile-settings
After seller registration, log into the <a href="https://aws.amazon.com/marketplace/management/homepage" target="_blank">AWS Marketplace Management Portal</a> and set your Public profile.  
Please start the settings from `Add public profile` under Settings.


![public-profile-settings-1](/img/part-4/aws-marketplace-integration/public-profile-settings/public-profile-settings-1.png)


The information configured here will be the company information (Public profile) published on AWS Marketplace.

![public-profile-settings-2](/img/part-4/aws-marketplace-integration/public-profile-settings/public-profile-settings-2.png)


After setting the company information, press the Submit button to configure.

![public-profile-settings-3](/img/part-4/aws-marketplace-integration/public-profile-settings/public-profile-settings-3.png)

After completing the Public profile settings, please start setting up your bank account.

![public-profile-settings-4](/img/part-4/aws-marketplace-integration/public-profile-settings/public-profile-settings-4.png)

---

# Setting Up a Bank Account

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/register-bank-account
Next, click on `Add bank account` under `Payment Information`.

![new-register-bank-account-1](/img/part-4/aws-marketplace-integration/register-bank-account/new-register-bank-account-1.png)

First, you need to select a payment method. You can choose a US-based ACH account, SWIFT account, or Hyperwallet account. SWIFT accounts can be used for any supported currency (AUD, EUR, GBP, JPY, USD), whereas US-based ACH and Hyperwallet accounts can only use USD.

:::info
If you wish to set up a Japanese bank account, you will need a bank account that can receive international wire transfers or foreign currency transfers, and you must select SWIFT account as the payment method.
:::

This document explains the setup procedure for a SWIFT account. First, select `SWIFT account` from the `Payment Method` options.

![new-register-bank-account-2](/img/part-4/aws-marketplace-integration/register-bank-account/new-register-bank-account-2.png)

For a SWIFT account, you need to enter the following three items. Please contact your bank for the SWIFT code.
- Bank account holder name
- BIC (SWIFT code)
- Account number

![new-register-bank-account-3](/img/part-4/aws-marketplace-integration/register-bank-account/new-register-bank-account-3.png)

Next, enter the billing address.

![new-register-bank-account-4](/img/part-4/aws-marketplace-integration/register-bank-account/new-register-bank-account-4.png)

Once you have finished entering all the information, click on `Add bank account`.

![new-register-bank-account-5](/img/part-4/aws-marketplace-integration/register-bank-account/new-register-bank-account-5.png)

If everything is correct, you can check the added bank account under `Payment Information`.

![new-register-bank-account-6](/img/part-4/aws-marketplace-integration/register-bank-account/new-register-bank-account-6.png)

:::caution
At this point, the settings necessary for listing are not yet complete.
Please refer to the next page, `Setting up Disbursement Methods`.
:::
---

# Setting Up Disbursement Methods

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/register-disbursement-methods

:::caution
Please ensure that your bank account setup is complete beforehand. If you haven't done this yet, refer to [Bank Account Setup](/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/register-bank-account).
:::

Click `Add disbursement method` under `Payment Information`.  

![new-register-disbursement-methods-1](/img/part-4/aws-marketplace-integration/register-disbursement-methods/new-register-disbursement-methods-1.png)

First, select the currency in which disbursements will be made. For available currencies, refer to the [official documentation](https://docs.aws.amazon.com/marketplace/latest/userguide/disbursement.html#currency).

![new-register-disbursement-methods-2](/img/part-4/aws-marketplace-integration/register-disbursement-methods/new-register-disbursement-methods-2.png)

Next, select the bank account to receive disbursements. Among the bank accounts added in [Bank Account Setup](/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/register-bank-account), only the accounts corresponding to the previously selected currency will be available as options.

![new-register-disbursement-methods-3](/img/part-4/aws-marketplace-integration/register-disbursement-methods/new-register-disbursement-methods-3.png)

Finally, set the disbursement schedule. This will be the schedule on which AWS disburses funds to the seller’s bank account. The following screenshot shows a setting where disbursements are made on the 1st of every month. If you select `Daily`, sellers must have a positive balance to receive disbursements.

![new-register-disbursement-methods-4](/img/part-4/aws-marketplace-integration/register-disbursement-methods/new-register-disbursement-methods-4.png)

Once you have finished entering all the information, click `Add disbursement method`.

![new-register-disbursement-methods-5](/img/part-4/aws-marketplace-integration/register-disbursement-methods/new-register-disbursement-methods-5.png)

If everything is correct, you can check the added disbursement method under `Payment Information`.

![new-register-disbursement-methods-6](/img/part-4/aws-marketplace-integration/register-disbursement-methods/new-register-disbursement-methods-6.png)

:::warning
Public Offers only support USD; therefore, it is required to set up a disbursement method in USD. Even if you plan to create a Private Offer in Japanese Yen only, ensure that both USD and JPY disbursement methods are set.
:::

With this, the necessary settings to start the listing process are complete.
---

# How to Start Setting Up Bank Account and Disbursement methods

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration/tax-information-interview
## For Customers Based in Japan

Check `Payment Information` from the Settings page on <a href="https://aws.amazon.com/marketplace/management/seller-settings/account" target="_blank">AWS Marketplace Management Portal</a>.  
You may find an error displayed, which will not allow you to proceed with the next steps.

![tax-information-interview-1](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-1.png)

The solution to the error is posted in <a href="https://aws.amazon.com/jp/legal/awsjp/" target="_blank">JP SOR FAQ</a> and is excerpted below.

![tax-information-interview-2](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-2.png)


## Procedures For Customers Based in Japan

As mentioned above, please first inform <a href="https://aws.amazon.com/marketplace/management/seller-settings/account#:~:text=aws%2Djp%2Dmarketplace%40amazon.co.jp" target="_blank">aws-jp-marketplace@amazon.co.jp</a> by email that you intend to list on AWS Marketplace. Amazon Web Services Japan Corporation will reply to you. Please follow the instructions to submit additional information. Once the procedures are completed with Amazon Web Services Japan Corporation, the `Payment Information` on the Settings page of AWS Marketplace Management Portal will be displayed.

## What To Do First (Interview about Tax Information)

From the Settings page on <a href="https://aws.amazon.com/marketplace/management/seller-settings/account" target="_blank">AWS Marketplace Management Portal</a>, open `Payment Information`.

Press `Go to tax dashboard` to start filling in the interview about tax information.

![tax-information-interview-3](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-3.png)


You can proceed with the input in Japanese by selecting `Japanese` in `Select Language`.

![tax-information-interview-4](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-4.png)


Press the `開始` button in the interview about tax information.

![tax-information-interview-5](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-5.png)


Answer the questionnaire items.

![tax-information-interview-6](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-6.png)


Set your tax identity information

![tax-information-interview-7](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-7.png)

![tax-information-interview-8](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-8.png)


Enter your name for signature and check the contents in the preview.

![tax-information-interview-9](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-9.png)


***Form to declare that the taxpayer is in Japan so as not to be taxed in the United States***

![tax-information-interview-10](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-10.png)


After checking the contents, press the `フォームを送信` button to submit.

![tax-information-interview-11](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-11.png)


You have completed your submission and finished the interview regarding tax information.

![tax-information-interview-12](/img/part-4/aws-marketplace-integration/tax-information-interview/tax-information-interview-12.png)

---

# Setting Up Disbursement methods From Seller Registration

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration
### Preparation

Please prepare an AWS account for AWS Marketplace.

### Overall Process

Before starting the listing process, you need to perform the following procedures by yourself.  
These are necessary registrations and settings for listing on AWS Marketplace, so make sure to proceed with them.

1. Seller registration
2. Setting up Public profile
3. Interview about tax information
4. DAC7 tax questionnaire
5. Setting up a bank account
6. Setting up a disbursement methods

---

# Embedding into SaaS Products (Association of Existing Users with Purchased Products)

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/embedding-products
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

If you are offering a SaaS product on the SaaSus Platform, you will need to implement consideration for multitenant in the purchase flow by existing users.

:::caution
Please finish the implementation until the test phase of the 'Confirmation of Integration with AWS Marketplace'. Since it will be subject to review by the AWS Marketpalce Support team, you will not be allowed to list it without proper implementation.
:::

When an existing user purchases a product from AWS Marketplace and signs in to your SaaS, the association between the existing user and the purchased product has not completed yet.  
This is because the purchased product needs to be associated with the tenant. In the SaaSus Platform specifications, an existing user may belong to multiple tenants. Since SaaSus Platform cannot comprehend that, you are required to implement an association between the purchased product and the tenant the user belongs to, on your side.

## Process of Implementation

1. Implement judgment procedure for when an existing user purchases a product from AWS Marketplace and signs in, coming to the Callback page.  
When a user purchases a product from AWS Marketplace and signs in, coming to the Callback page, the registration_token parameter is assigned to the Callback URL set by you. Implement a process to determine its existence and make a branch based on that.  
`https://example.com/defaultcallback?code=xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx&registration_token=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`

2. Create an account selection page to be used.  
If there is a registration_token parameter, it should display a page to select which account to purchase as below.

![account select page](/img/part-4/aws-marketplace-integration/account-select-page.png)

Create the select box content from user information `$request->userinfo` who made the request.




<Tabs>
<TabItem value="php" label="PHP">

```php
// Callback destination
function index(Request $request)
{
  // Various user information, tenant information is set in $request->userinfo
  return view('selectAccount.index', ['tenants' => $request->userinfo["tenants"]]);
}
```

</TabItem>
</Tabs>

In the View side, create a select box using `tenants` and set `tenant["id"]` to Value to use the selected account information.

<Tabs>
<TabItem value="html" label="HTML">

```html
<select name="tenant_id">
@foreach ($tenants as $tenant)
    <option value="{{ $tenant["id"] }}">{{ $tenant["name"] }}</option>
@endforeach
</select>
```

</TabItem>
</Tabs>

3. Execute SAASUS AUTH API's [LinkAwsMarketplace](/docs/reference/auth-api#tag/saasUser/operation/LinkAwsMarketplace) for the selected account.  
After choosing an account, call `LinkAwsMarketplace`.

<Tabs>
<TabItem value="php" label="PHP">

```php
// The process when 'Get started with this account' is pressed
function post(Request $request)
{

  // Use SaaSus SDK
  $client = new ApiClient();
  $auth_api_client = $client->getAuthClient();

  // Set AWS Marketplace and tenant linking parameters
  $link_marketplace_param = new CreateLinkAwsMarketplaceParam();
  // Meet the tenant ID sent from the account selection page
  $link_marketplace_param->setTenantId($request->tenant_id);
  $link_marketplace_param->setAccessToken($request->_token);
  // registration_token received at the time of Callback
  $link_marketplace_param->setRegistrationToken($request->registration 

  // Linking the purchased product and the tenant
  $auth_api_client->LinkAWSMarketplace($link_marketplace_param);

  // Transition to the product page
  return view('xxxxxxxxxxx.index', ['xxxxx' => $xxxxxx]);
}
```

</TabItem>
</Tabs>

---

# Getting Started with Registration - Generating Product Code

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/generate-product-code
To register SaaS product information, first access the <a href="https://aws.amazon.com/marketplace/management/homepage" target="_blank">AWS Marketplace Management Portal</a>, and then proceed with registration as follows.

On the `AWS Marketplace Management Portal`, select `SaaS` from the `Product` menu.
![](/img/part-4/aws-marketplace-integration/product-submission/generate-product-code/generate-product-code-1.png)

After transition, select `SaaS product` from the `Create SaaS product` button located on the right side of the screen.

![](/img/part-4/aws-marketplace-integration/product-submission/generate-product-code/generate-product-code-2.png)

When a dialog box appears to confirm the generation of the product ID and product code, press `Generate product ID and product code`.

![](/img/part-4/aws-marketplace-integration/product-submission/generate-product-code/generate-product-code-3.png)

After about 10 seconds, the product ID and product code are generated, and the `Continue` button becomes active, so press it to move to the next step.

![](/img/part-4/aws-marketplace-integration/product-submission/generate-product-code/generate-product-code-4.png)

---

# Step 1: Provide Product Information

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step1-provide-product-information
Next, you'll enter the information necessary to publish the SaaS product.

:::info

Since there's a lot of information to input, it's recommended that you prepare ahead of time. Please check the supplementary documents to understand the limitations for each input field and how it will be published on the AWS Marketplace. See examples [here](/docs/part-4/aws-marketplace-integration/supplementary/supplementary-1) and input field details [here](/docs/part-4/aws-marketplace-integration/supplementary/supplementary-2).
:::

Please proceed with entering the following information:

`Product title`:
  - During the test phase: **Test Product (Your SaaS Product Name)**  
  - During the production phase: Your SaaS Product Name

:::caution

In the test phase, please input the title as "Test Product (Your SaaS Product Name)". This is necessary to distinguish it from the production version.
:::

`SKU`: Unique string to distinguish products on the AWS Marketplace Management Portal  
`Product logo S3 URL`: Product logo URL  
`Short description`: Product overview  
`Long description`: Product description  
`Product video URL`: URL for product introduction video etc.  
`Highlight 1-3`: Features and characteristics to be included on the product page  
`Support details`: Information about product support  
`Product categories`: Product category information, used when category searching on AWS Marketplace  
`Keywords for search results`: Product search keywords, used when searching on AWS Marketplace  

After entering the product-related information, click `Next` to proceed.

![](/img/part-4/aws-marketplace-integration/product-submission/step1-provide-product-information/step1-provide-product-information-1.png)

![](/img/part-4/aws-marketplace-integration/product-submission/step1-provide-product-information/step1-provide-product-information-2.png)

![](/img/part-4/aws-marketplace-integration/product-submission/step1-provide-product-information/step1-provide-product-information-3.png)
---

# Step 2: Configure Fulfillment Options

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step2-configure-fulfillment-options
Next, enter the URL to which customers will be redirected upon purchasing the product on the AWS Marketplace.

The URL to be entered is displayed in the instruction sheet output by the SaaSus Platform's AWS Marketplace integration function, please copy and paste it into the Fulfillment URL input area.

:::caution

Please be sure to follow the instructions on the sheet.

You can access the instruction sheet by starting the listing process from the [AWS Marketplace integration function page](https://settings.console.saasus.io/integrations/aws-marketplace), and proceed to `Step 1-4: Registering SaaS product information`.

![](/img/part-4/aws-marketplace-integration/product-submission/step2-configure-fulfillment-options/step2-configure-fulfillment-options-1.png)
:::

![](/img/part-4/aws-marketplace-integration/product-submission/step2-configure-fulfillment-options/step2-configure-fulfillment-options-2.png)
After completing the input, press `Next` to proceed.
---

# Step 3: Configure Product Pricing

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step3-configure-product-pricing
Next, you'll input the pricing model and its type to be sold on the AWS Marketplace.

Firstly, for the pricing model, select `Contract-based pricing`.

:::caution
Since other pricing models are not supported, please make sure to select `Contract-based pricing`.
:::

![](/img/part-4/aws-marketplace-integration/product-submission/step3-configure-product-pricing/step3-configure-product-pricing-1.png)


Next, you'll input the usage units and contract types of the SaaS product.

Select `Units` as the `Dimension unit type`.

For the contract type, follow the instructions on the sheet output by the AWS Marketplace integration function and enter 1 to X for `Contract dimensions` accordingly.

`API identifier`: Identifier for pricing plan of services on the API  
`Display name`: Display name of the pricing plan  
`Description`: Description of the pricing plan

:::caution
Please be sure to follow the instructions on the sheet.

You can access the instruction sheet by starting the listing process from the [AWS Marketplace integration function page](https://settings.console.saasus.io/integrations/aws-marketplace), then proceed to `Step 1-4: Registering SaaS product information`.

![](/img/part-4/aws-marketplace-integration/product-submission/step3-configure-product-pricing/step3-configure-product-pricing-2.png)
:::

![](/img/part-4/aws-marketplace-integration/product-submission/step3-configure-product-pricing/step3-configure-product-pricing-3.png)

After completing the input, press `Next` to proceed.
---

# Step 4: Set Prices

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step4-set-prices
Next, enter the purchase options and contract duration for the product to be sold on the AWS Marketplace.

Please enter the `Purchasing options` and `Contract duration options` in accordance with the instructions in the output from the AWS Marketplace integration function.

:::caution
Please make sure to follow the instructions on the sheet.

You can check the instruction sheet by starting the listing process from the [AWS Marketplace integration function page](https://settings.console.saasus.io/integrations/aws-marketplace), and proceeding up to `Step 1-4: Registering SaaS product information`.

![](/img/part-4/aws-marketplace-integration/product-submission/step4-set-prices/step4-set-prices-1.png)
:::

![](/img/part-4/aws-marketplace-integration/product-submission/step4-set-prices/step4-set-prices-2.png)

After completing the input, press `Next` to proceed.
---

# Step 5: Specify Refund Policy

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step5-specify-refund-policy
Next, input information about the refund policy.

This is where you'll specify the refund policy for selling the SaaS product on the AWS Marketplace. This should be provided by the seller themselves.

:::info
You may wish to read this [document](https://docs.aws.amazon.com/marketplace/latest/userguide/refunds.html) that provides further details on refunds when selling a SaaS product on the AWS Marketplace.
:::

![](/img/part-4/aws-marketplace-integration/product-submission/step5-specify-refund-policy/step5-specify-refund-policy-1.png)

After completing the input, press `Next` to proceed.
---

# Step 6: Configure EULA

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step6-configure-eula
Next, choose the end-user license agreement (EULA) for selling on the AWS Marketplace.

If you want to use the terms defined in the AWS Marketplace, please select `Standard Contract for AWS Marketplace (SCMP)`.

:::info
You can find the EULA that AWS Marketplace has prepared in advance [here](https://docs.aws.amazon.com/marketplace/latest/userguide/standardized-license-terms.html#standard-contracts).
:::

![](/img/part-4/aws-marketplace-integration/product-submission/step6-configure-eula/step6-configure-eula-1.png)

If you want to use a custom agreement that you have created yourself, select `Custom EULA` and enter the URL.

![](/img/part-4/aws-marketplace-integration/product-submission/step6-configure-eula/step6-configure-eula-2.png)

After completing the input, press `Next` to proceed.
---

# Step 7: Configure Offer Availability

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step7-configure-offer-availability
Next, you'll decide the countries in which to sell your SaaS product.

Please proceed with entering the countries as per your business.

If you want to target all countries, select `All countries`.

![](/img/part-4/aws-marketplace-integration/product-submission/step7-configure-offer-availability/step7-configure-offer-availability-1.png)

If you want to specify excluded countries, select `All countries with exclusions` and choose the countries.

![](/img/part-4/aws-marketplace-integration/product-submission/step7-configure-offer-availability/step7-configure-offer-availability-2.png)

If you want to specify allowed countries only, select `Allowlisted countries only` and choose the countries.

![](/img/part-4/aws-marketplace-integration/product-submission/step7-configure-offer-availability/step7-configure-offer-availability-3.png)

After completing the input, press `Next` to proceed.
---

# Step 8: Configure Allowlist

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission/step8-configure-allowlist
Next, you'll set up the AWS account ID to use for testing during partnership verification.

When your SaaS product is in limited release, only the designated accounts will be able to view and purchase the product.

:::info
Once you purchase the product for testing, you can't immediately terminate the contract. While you can apply to add test accounts from the AWS Marketplace Management Portal, it takes 3-5 business days for this to reflect. Therefore, to prepare for re-testing at the time of a new purchase, we recommend registering at least five AWS accounts.
:::

![](/img/part-4/aws-marketplace-integration/product-submission/step8-configure-allowlist/step8-configure-allowlist-1.png)

After completing the input, press `Submit`.
This completes the registration of the SaaS product information.
---

# Registering SaaS Product Information

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/product-submission
You will register the SaaS product information on the AWS Marketplace Management Portal.

:::caution
Before carrying out these procedures, please make sure that you have completed the [Seller Registration and Setting Disbursement methods](/docs/part-4/aws-marketplace-integration/aws-marketplace-seller-registration) procedure.
:::

You will need to prepare the following for this procedure. Please prepare them in advance.

- Publisher information, product description/overview, etc.
- End User License Agreement (EULA): You will choose whether to use the terms defined in the AWS Marketplace or your own custom terms. If you are using your own terms, you will need to specify the `EULA URL`.
- Product support information: You will need to prepare the method for providing support, such as email, support form, etc.
- Refund policy information: You will need to prepare the content of the refund policy, URL of the page where written, etc.

There are also the following restrictions related to the registration:

- The only pricing model supported by SaaSus Platform is SaaS contract. The contract period will be either 1 month or 1 year.
- The currency for the listing price must be in USD.
- The product information must be registered in English.
- You will need to undergo a review by the AWS Marketplace support team 2-3 times, each review will take around 3-5 business days.

The input content etc. will be published on the `AWS Marketplace`. Please check the input content and display examples [here](/docs/part-4/aws-marketplace-integration/supplementary/supplementary-1) ([Supplementary 1](/docs/part-4/aws-marketplace-integration/supplementary/supplementary-1), [Supplementary 2](/docs/part-4/aws-marketplace-integration/supplementary/supplementary-2)).
---

# How to Request a Final Review

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/final-review-request
Once you have completed the [exhibition steps '10. Confirmation of integration with AWS Marketplace'](/docs/part-4/aws-marketplace-integration/aws-marketplace-integration), you can request a final review from the AWS Marketplace support team.

First, access the <a href="https://aws.amazon.com/marketplace/management/homepage" target="_blank">AWS Marketplace Management Portal</a> and open the product detail page you want to manage.

Then click on `Update visibility` located on the right of the alert displayed at the top of the page.

![final-review-request-1](/img/part-4/aws-marketplace-integration/supplementary/final-review-request-1.png)

After the transition, set the Visibility options to `public`.

![final-review-request-2](/img/part-4/aws-marketplace-integration/supplementary/final-review-request-2.png)


An additional form to enter the contract amount will be displayed. After entering the correct amount, click `Submit`.

![final-review-request-3](/img/part-4/aws-marketplace-integration/supplementary/final-review-request-3.png)


That's all you need to do to request a final review.
> 📘 Note
>
> The AWS Marketplace Seller Operations team will verify and publish the product. It will be published in about 7 to 10 business days. For more information, click [here](https://docs.aws.amazon.com/marketplace/latest/userguide/product-submission.html#timing-and-expectations)

---

# Examples of Integration Confirmation to be Done After API Integration

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/integration-test
Please check the URL of the product page that is privately published on AWS Marketplace in advance.

### How to Check the Product Page URL

1. Sign in to AWS Marketplace Management Portal.
2. Follow this <a href="https://aws.amazon.com/marketplace/management/products/saas?#" target="_blank">link</a>.
3. A list of SaaS products in private publication will be displayed, so select the SaaS product you want to check.
4. On the detail page shown, you can check the product page URL from the button `View on AWS Marketplace` at the top right of the page.

![integration-test-1](/img/part-4/aws-marketplace-integration/supplementary/integration-test-1.png)

## About Integration Confirmation Methods

To confirm the integration with AWS Marketplace, you need to implement three use cases in total.

### When a New Account is Created by Signup After Purchase

After signing up, please make sure that the created account is correctly synchronized with the purchased contract.

Confirmation Example

1. Access the product page on AWS Marketplace with a test account.
2. Select and purchase a particular contract.

<!----->

1. After the purchase, follow the prompts to the sign-up page of the SaaS service.
2. After signing up, sign in to the SaaS service with that account.
3. Move to the page where you can check the contract information and inspect the contract details.

### When an Existing User Sign-In After Purchase

Please ensure that a user who already has an account on the SaaS service is correctly synchronized with the contract after purchase.

Confirmation Example

1. With a test account that already possesses an account on the SaaS service, access the product page on AWS Marketplace.
2. Choose a specific contract and purchase it.
3. After the purchase, follow the prompts to the sign-up page of the SaaS service, then move on to the sign-in page.
4. After signing in, sign in to the SaaS with that account.
5. Move to the page where you can check the contract information and inspect the contract details.

### When Changing a Contract on the AWS Marketplace Product Contract Page After Purchase

If you already have a contract on AWS Marketplace, when you update the contract on the product contract page, please ensure that the contract is correctly synchronized.

Confirmation Example

1. Access the product contract page on AWS Marketplace.
2. Choose a specific contract and update the contract.
3. Sign in to SaaS.
4. Move to the page where you can check the contract information and inspect the contract details.

---

# How to Request for Publication

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/public-request
Once you've completed the [Listing Procedure "11. Final Review Request of Production SaaS Product"](/docs/part-4/aws-marketplace-integration/aws-marketplace-integration), you will receive an email from the AWS Marketplace Support Team detailing the process to request publication. Follow these instructions to request your publication.

:::caution
While we have prepared a document regarding the publication request process based on our prior research, the actual instructions provided in the email you'll receive represents the most updated procedure and should be followed accordingly.
:::

First, you need to make a publication request in the AWS Marketplace Management Portal.

1. Access the <a href="https://aws.amazon.com/marketplace/management/homepage" target="_blank">AWS Marketplace Management Portal</a>
2. After moving to the 'Requests' page, select the request for the SaaS product you want to publish.
3. If the product is ready for a publication request, a page with the title 'Review your Product Listing' will be displayed.
  ![public-request-1](/img/part-4/aws-marketplace-integration/supplementary/public-request-1.png)
4. Select 'Approve' for the status, and click the 'Submit' button.

That's it! You've completed the publication request.

Finally, reply to the **"Action Required: AWS Marketplace SaaS Contract Next Steps [ thread::XXXXXXXXXX:: ]"** email by writing a message in **English** that says "Please publish the SaaS product". Once you've replied, your publication request is complete.  
With this process, your SaaS product will be published on the AWS Marketplace by the Support Team within 3 to 5 business days.

---

# How to Set Self-Signup

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/self-up-setting
1. Access <a href="https://settings.console.saasus.io/customize" target="_blank">Authentication Advanced Setting of SaaS Development Console</a>.
2. Please click on the `Authentication` tab.
3. Scroll down to find the item for enabling or disabling Self-Signup (new registration by the user).
4. Turn on the toggle button and press the Save button.

![self-up-setting-1](/img/part-4/aws-marketplace-integration/supplementary/self-up-setting-1.png)

That completes the setting. It will be reflected in the actual screen after a few minutes.

---

# About the Contents Entered in Create Product and the Published Details

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/supplementary-1
## Product Overview

The `Product title`, `Short description`, `Long description`, `Product logo S3 URL` etc, input in Step 1: Provide product information, are displayed as `Product Overview` when the product is published.

![supplementary-1-1](/img/part-4/aws-marketplace-integration/supplementary/supplementary-1-1.png)

## Pricing Information

The `API Identifier`, `Display name`, `Description` input in Step 3: Configure product pricing, and the `1 month price`, `12 month price` etc, input in Step 4: Set prices, are displayed as `Pricing Information` when the product is published.

![supplementary-1-2](/img/part-4/aws-marketplace-integration/supplementary/supplementary-1-2.png)

## Usage Information

The `EULA` input in Step 6: Configure EULA is displayed as `Usage Information` when the product is published.

![supplementary-1-3](/img/part-4/aws-marketplace-integration/supplementary/supplementary-1-3.png)

## Support Information

The `Support details` input in Step 1: Provide product information, and the `Refund Policy` input in Step 5: Specify refund policy are displayed as `Support Information` when the product is published.

![supplementary-1-4](/img/part-4/aws-marketplace-integration/supplementary/supplementary-1-4.png)

## Product Category

The `AWS Marketplace discoverability` input in Step 1: Provide product information is used as a category for end-users to find the product on the `AWS Marketplace`.

![supplementary-1-5](/img/part-4/aws-marketplace-integration/supplementary/supplementary-1-5.png)

---

# Details of Input Fields in Create Product

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/supplementary-2
The information you enter here can be checked in the [About the Contents Entered in Create Product and the Published Details](/docs/part-4/aws-marketplace-integration/supplementary/supplementary-1) to see what will be published on AWS Marketplace.

## Step1 : Provide product information

| Input Field                        | Description                                                                                                                                                                                                                                                  | Required | Input Type       | Constraints                                              |
| --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -- | ---------- | ------------------------------------------------- |
| Product title               | Name of the product.                                                                                                                                                                                                                   | Yes | Text       | At least 1 character, maximum 72 characters                                      |
| SKU                         | Unique identifier for your product. Must be unique for each product listing. <br /> Ex: CloudPower_0001                                                                                               |    | Text       | At least 1 character, maximum 72 characters                                      |
| Product logo S3 URL         | Enter the URL for the product image. Title treatments and logos display better than text-based.                                                                                                   | Yes | Text       | Between 2:1 and 1:1 aspect ratio, longest side at least 110 pixels png or jpg format |
| Short description           | Short description of the product, used in AWS Marketplace on EC2 Console.                                                                                                                          | Yes | Text       | At least 1 character, maximum 1000 characters                                    |
| Long description            | Description of the product.                                                                                                                                                                                                            | Yes | Text Area  | At least 1 character, maximum 5000 characters                                    |
| Product Video Link          | URL for a video for your product, shown as the 'See product video' link at the top of the product page.                                                                                   |    | Text       | Valid URL                                            |
| Highlight 1                 | Short bullet-style callout of a key product feature.                                                                                                                                                               | Yes | Text       | At least 1 character, maximum 500 characters                                     |
| Highlight 2                 | Short bullet-style callout of a key product feature.                                                                                                                                                               |    | Text       | At least 1 character, maximum 500 characters                                     |
| Highlight 3                 | Short bullet-style callout of a key product feature.                                                                                                                                                               |    | Text       | At least 1 character, maximum 500 characters                                     |
| Support details             | Describes the type of support offered.                                                                                                                                                                                          |    | Text       | At least 1 character, maximum 2000 characters                                    |
| Product Categories          | Enter an additional Marketplace Category for search and browse.                                                                                                                                                      | Yes | Select Box | Choose from the options (about 50 kinds)                                     |
| Keywords for search results | Enter up to 250 characters of comma separated keywords. NOTE: Seller name, product name and all categories are automatically added as search keywords. | Yes | Text       | Comma-separated, at least 1 character, maximum 250 characters                              |

## Step2 : Configure fulfillment options

| Input Field            | Description                                                                                                                                                                                                            | Required | Input Type | Constraints                                          |
| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -- | ---- | --------------------------------------------- |
| Fulfillment URL | URL for customers to subscribe to the product by registering an account in the SaaS system. Accessed via the "Subscribe" button on the product page. (**Follow the input instructions output by SaaSus Platform to set up the content**) | Yes | Text | At least 1 character, maximum 500 characters, begin with either http:// or https:// |

## Step3 : Configure product pricing

| Input Field                | Description                                                                                                                                                                                                                                                                              | Required | Input Type       | Constraints                        |
| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -- | ---------- | --------------------------- |
| Dimension unit type | The category is displayed to customers on the AWS Marketplace website. (**Follow the input instructions output by SaaSus Platform to set up the content**) | Yes | Select Box | Choose from the options (9 types)                |
| API Identifier      | The name used to refer to this dimension in the AWS Marketplace Entitlement Service when retrieving customer entitlements, and when sending metering records to the AWS Marketplace Metering Service. (**Follow the input instructions output by SaaSus Platform to set up the content**)               | Yes | Text       | Maximum 36 characters, only alphabetic characters or underscores |
| Display name        | The name displayed on product detail and ordering pages on AWS Marketplace. (**Follow the input instructions output by SaaSus Platform to set up the content**)                                                                                                                      | Yes | Text       | Maximum 24 characters                      |
| Description         | The customer facing description of this dimension. (**Follow the input instructions output by SaaSus Platform to set up the content**)                                                                                                                                 | Yes | Text       | Maximum 70 characters                      |

## Step4 : Set prices

| Input Field                                                      | Description                                                                                                                                                                                                                                                                                           | Required | Input Type       | Constraints                                                            |
| --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -- | ---------- | ---------------------------------------------------------------- |
| Purchasing options                                        | Choose the contract type you want to offer. (**Follow the input instructions output by SaaSus Platform to set up the content**) | Yes | Select Box | Multiple dimension per contract or Single dimension per contract |
| Contract duration options                                 | Offered contract durations (**Follow the input instructions output by SaaSus Platform to set up the content**)                                                                                                                                                                                         | Yes | Check Box  | 1 month, 12 months, 24 months, 36 months（Can select multiple）                  |
| 1 month price (Required if 1 month is selected for Contract Duration)     | Monthly pricing (**Follow the input instructions output by SaaSus Platform to set up the content**)                                                                                                                                                                                                                                          | Yes | Text       | Numeric value                                                               |
| 12 month price (Required if 12 months is selected for Contract Duration) | Annual pricing (**Follow the input instructions output by SaaSus Platform to set up the content**)                                                                                                                                                                                                                                          | Yes | Text       | Numeric value                                                               |
| 24 month price (Required if 24 months is selected for Contract Duration) | Bi-annual pricing (**Follow the input instructions output by SaaSus Platform to set up the content**)                                                                                                                                                                                                                                         | Yes | Text       | Numeric value                                                               |
| 36 month price (Required if 36 months is selected for Contract Duration)  | Tri-annual pricing (**Follow the input instructions output by SaaSus Platform to set up the content**)                                                                                                                                                                                                                                         | Yes | Text       | Numeric value                                                               |

## Step5 : Specify refund policy

| Input Field          | Description                                                                                                                                                                                                                                                              | Required | Input Type | Constraints          |
| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -- | ---- | ------------- |
| Refund Policy | Describes the refund policy for software charges, even if the policy is 'no refunds'. It is highly encouraged to offer some form of refund and contact information. | Yes | Text | At least 1 character, maximum 500 characters |

## Step6 : Configure EULA

| Input Field                                            | Description                                                                                                               | Required | Input Type         | Constraints                                                        |
| ----------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ | -- | ------------ | ----------------------------------------------------------- |
| EULA                                            | Use Standard Contract for AWS Marketplace or Use your own EULA | Yes | Radio Button | Standard Contract for AWS Marketplace or <br /> Custom EULA |
| Custom EULA URL (Required if 'Custom EULA' is selected for EULA) | Enter the URL for the End User License Agreement for the product.         | Yes | Text         | Valid URL                                                      |

## Step7 : Configure offer availability

| Input Field                                                                         | Description                                                                              | Required | Input Type         | Constraints                                                                                                                                                                 |
| ---------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | -- | ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Offer availability by country                                                | Choose which customer geographies you want to target | Yes | Radio Button | 'All countries', 'All countries with exclusions', or 'Allowlisted countries only' |
| (Allowed input if 'All countries with exclusions' or 'Allowlisted countries only' is selected) | Select target countries.                                            |    | Select Box   | Choose from the options (countries)                                                                                                                                                           |

## Step8 : Configure allowlist

| Input Field                     | Description                                                                                                                                                                                            | Required | Input Type | Constraints           |
| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -- | ---- | -------------- |
| Allow-list test accounts | Allowance settings for test accounts <br /> Set up AWS account IDs |    | Text | Comma-separated account IDs |

---

# Procedure for Copying the Generated AWS Resources

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/supplementary-3
1. Sign in to the AWS Management Console.
2. Please access this <a href="https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks?filteringText=&filteringStatus=active&viewNested=true" target="_blank">link</a>.
3. When the following page is displayed, select the stack 'AWS-Marketplace-seller-Resource'.
   1. ![supplementary-3-1](/img/part-4/aws-marketplace-integration/supplementary/supplementary-3-1.png)
4. Among the tabs shown on the right side of the page, choose 'Outputs'.
5. Verify the name displayed for the Export name and copy its value.
   1. ![supplementary-3-2](/img/part-4/aws-marketplace-integration/supplementary/supplementary-3-2.png)
6. Paste the copied value into the form field with the same export name.
   1. ![supplementary-3-3](/img/part-4/aws-marketplace-integration/supplementary/supplementary-3-3.png)

---

# How to Identify Users who Purchased from AWS Marketplace

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary/user-judgment-method
We will use the SAASUS AWS MARKETPLACE API.

Use the endpoint named [GetCustomers](/docs/reference/awsmarketplace-api#tag/awsMarketplace/operation/GetCustomers). Please refer to the document for details on the specification.

## Flow till Judgment

1. Set the tenant_id obtained by getUserInfo as the parameter tenant_ids for GetCustomers and execute.
2. Check whether the return value is empty.
3. If not empty, you can determine it is a user who purchased from AWS Marketplace.

---

# Supplementary

URL: https://www.prisma.io/docs/part-4/aws-marketplace-integration/supplementary
This document collates additional information for seller registration, SaaS product information registration, and details related to AWS Marketplace integration functionality.

---

# Event Samples

URL: https://www.prisma.io/docs/part-4/integrate-with-amazon-eventbridge/event-sample
These event samples are associated with Amazon EventBridge when creating tenants and users. You can check the information of both API request and response.

## create_tenant

The created tenant information is set as `response_body`. API reference: <a href="/docs/reference/auth-api#tag/tenant/operation/CreateTenant" target="_blank">Create Tenant</a>

```json
{
	"version": "0",
	"id": "4d7d3c0c-208c-3e57-00a9-77a8d1ad1c3e",
	"detail-type": "api_call",
	"source": "aws.partner/saasus.io/5b4297ce-bdb3-43e2-bf99-d605cac044c8-1/event",
	"account": "999999999999",
	"time": "2023-10-31T02:22:33Z",
	"region": "ap-northeast-1",
	"resources": [],
	"detail": {
		"event_type": "create_tenant",
		"event": {
			"log_id": "38601dc1-ceed-4561-8728-eb1f4393b317",
			"date_time": "2023-10-31T02:22:33Z",
			"date": "2023-10-31",
			"ttl": "2023-11-07T02:22:33Z",
			"http_status": "201",
			"uri": "/v1/auth/tenants",
			"ip_address": "127.0.0.1:40800",
			"referer": "https://saasadmin.console.saasus.io/",
			"request_method": "POST",
			"saas_id": "sample_saas_id_sample",
			"api_key": "sample_api_key_sample",
			"request_body": {
				"attributes": {},
				"back_office_staff_email": "AmazonEventBridgeTest@example.com",
				"name": "AmazonEventBridgeTest"
			},
			"response_body": {
				"attributes": {},
				"back_office_staff_email": "AmazonEventBridgeTest@example.com",
				"id": "fe27b501-be9e-424c-9f4a-a199dea81f92",
				"name": "AmazonEventBridgeTest",
				"plan_histories": []
			}
		},
		"trace_id": "45196bec-82b8-474f-956a-066e73da310d"
	}
}
```

## create_saas_user

The created user information is set as `response_body`. API reference: <a href="/docs/reference/auth-api#tag/saasUser/operation/CreateSaasUser" target="_blank">Create SaaS User</a>

```json
{
	"version": "0",
	"id": "e91fa969-551b-0629-998e-a9980070586c",
	"detail-type": "api_call",
	"source": "aws.partner/saasus.io/5b4297ce-bdb3-43e2-bf99-d605cac044c8-1/event",
	"account": "999999999999",
	"time": "2023-10-31T08:55:46Z",
	"region": "ap-northeast-1",
	"resources": [],
	"detail": {
		"event_type": "create_saas_user",
		"event": {
			"log_id": "729ac946-7675-4c52-90d3-3bfcde1656a8",
			"date_time": "2023-10-31T08:55:46Z",
			"date": "2023-10-31",
			"ttl": "2023-11-07T08:55:46Z",
			"http_status": "201",
			"uri": "/v1/auth/users",
			"ip_address": "127.0.0.1:58086",
			"referer": "https://saasadmin.console.saasus.io/",
			"request_method": "POST",
			"saas_id": "sample_saas_id_sample",
			"api_key": "sample_api_key_sample",
			"request_body": {
				"email": "AmazonEventBridgeTest_user@example.com",
				"password": "xxxxx"
			},
			"response_body": {
				"email": "AmazonEventBridgeTest_user@example.com",
				"id": "075dbcde-b5c3-4c64-8a04-204fee8b5073"
			}
		},
		"trace_id": "629c4bc3-e430-46a0-91bd-1ddf407fe4eb"
	}
}
```

For the details of each API, please check the <a href="/docs/reference/getting-started-with-your-api" target="_blank">API reference</a>.

---

# Integrate with Amazon EventBridge

URL: https://www.prisma.io/docs/part-4/integrate-with-amazon-eventbridge
SaaSus Platform is integrated with Amazon EventBridge. Various events that occur on the SaaSus Platform can be sent to Amazon EventBridge in the SaaS-side AWS account as a partner event source. By leveraging this, SaaS can be built with an event-driven architecture that works in conjunction with SaaSus Platform.

For example, it can be used to trigger a tenant onboarding process when a SaaS tenant is created, or to trigger the deletion of accompanying data when a user is deleted. Currently, you can retrieve events for all SaaSus APIs. Please check [API Reference](/docs/reference/getting-started-with-your-api) for the contents of each API.

## How to integrate with Amazon EventBridge

Open the [Event Integration Page of the SaaS Development Console](https://settings.console.saasus.io/integrations/event).

![01](/img/part-4/integrate-with-amazon-eventbridge/image-01.png)

In the AWS Account ID section, enter the AWS account ID (the 12-digit ID of the AWS account on which the SaaS is built) to which the event is sent. Also, select the AWS region where you would like to receive notifications. Then press the Save button.

![02](/img/part-4/integrate-with-amazon-eventbridge/image-02.png)

A partner event path will be created on the AWS account configured above. After logging into the relevant AWS account, open the [Amazon EventBridge Partner Event Source Console](https://ap-northeast-1.console.aws.amazon.com/events/home#/partners) and verify that the Partner Event Source has been created.

![03](/img/part-4/integrate-with-amazon-eventbridge/image-03.png)

Select the created partner event source and "Associate with event bus". It will then be available for use on the Event Bus just like any other event source.

![04](/img/part-4/integrate-with-amazon-eventbridge/image-04.png)

Next, let's try sending an event. Open the [Amazon EventBridge Bus Rules page](https://ap-northeast-1.console.aws.amazon.com/events/home#/rules). On this screen, you should be able to select the partner event source from earlier as an event bus.

![05](/img/part-4/integrate-with-amazon-eventbridge/image-05.png)

Create rules based on this event bus. Let's set it up as shown in the following page.  
First, select the SaaSus Platform event bus and click Create rule. On each page, try to enter the information referring to the following page.

![06](/img/part-4/integrate-with-amazon-eventbridge/image-06.png)

![07](/img/part-4/integrate-with-amazon-eventbridge/image-07.png)

![08](/img/part-4/integrate-with-amazon-eventbridge/image-08.png)

In the event pattern section, first describe the following pattern to get all SaaSus Platform events. Click on the "Edit pattern" button and enter the following JSON directly.

![09](/img/part-4/integrate-with-amazon-eventbridge/image-09.png)

![10](/img/part-4/integrate-with-amazon-eventbridge/image-10.png)

```json
{
  "source": [{
    "prefix": "aws.partner/saasus.io"
  }]
}
```

In this case, all events are retrieved, but you can filter events to retrieve only those for specific API calls.

In this case, let's output all events to CloudWatch Logs to see what kind of events are delivered.

![11](/img/part-4/integrate-with-amazon-eventbridge/image-11.png)

![12](/img/part-4/integrate-with-amazon-eventbridge/image-12.png)

After all settings are complete, click Create rule and confirm that the rule has been created.

![13](/img/part-4/integrate-with-amazon-eventbridge/image-13.png)

![14](/img/part-4/integrate-with-amazon-eventbridge/image-14.png)

Now that we are ready to link events. Send a test event by returning to the SaaS Development Console and clicking the Send Test button.

![15](/img/part-4/integrate-with-amazon-eventbridge/image-15.png)

If the event arrives successfully, the event should be recorded in CloudWatch Logs. Let's check.

![16](/img/part-4/integrate-with-amazon-eventbridge/image-16.png)

We are now able to retrieve events in this manner.

In this case, we linked to CloudWatch Logs, but it is possible to link events to various targets such as Lambda and other APIs. This allows us to apply an event-driven architecture, separating where the SaaSus API was called from and when it was called, and what should be done as a result and when.

The "detail" entry contains a "trace_id". This is the same as the one specified at the time of the SaaSus API request or the one generated automatically, so you can trace which API call caused the event.

---

# Bulk User Registration Procedure

URL: https://www.prisma.io/docs/part-4/mcp-server/bulk-user-registration

# SaaSus Platform Bulk User Registration Procedure

## Overview
A procedure guide for efficiently registering multiple users in bulk from CSV files. Supports multiple tenant and role combinations with fully automated resource creation.

## Prerequisites
- SaaSus API MCP Server must be configured

## MCP Server Request Statement

### Basic Request Statement
```
Please read the users.csv file and execute bulk user registration using the SaaSus API MCP Server.

【Important】Please execute all of the following processes automatically:

1. CSV File Reading
   - email: Email address (required)
   - tenant_name: Tenant name (required, separate rows for multiple tenants)
   - role: Role (required, single role, separate rows for multiple roles)
   - env: Environment ID (required)
   - name: Name (set as attribute, optional)
   - Custom attributes: All columns to the right of env are treated as custom attributes (optional)

2. Resource Verification and Validation (Optimized Processing)
   - Check if custom attributes (including name) in CSV headers are defined, error at CSV reading time if they don't exist
   - For each row, check in the following order and stop checking other items once skip is determined:
     1. Check if tenant name exists, skip the row if it doesn't exist
     2. Check if role exists, skip the row if it doesn't exist
     3. Check if environment ID exists, skip the row if it doesn't exist

3. Bulk User Registration
   - Pre-processing: Read entire CSV file, execute validation, then group data by email
   - User Creation: Create SaaS users on first occurrence of each email (no password, email notification)
   - Tenant Processing: Create tenant users on first occurrence of each email for each tenant and set name attribute
   - Role Processing: Assign specified roles for each row
   - Environment Setting: Execute role assignment in the environment specified by CSV env column
   - Duplicate Avoidance: Skip creation of existing SaaS users and tenant users, execute only role addition

4. Result Reporting
   - Details of processed CSV rows and success/skip/failure counts
   - Reasons for skipped rows (non-existent tenant, role, environment ID)
   - Details of successfully registered users
   - Detailed error information if any errors occurred

Please execute all processes automatically and provide a detailed report at the end.
```

## CSV File Format

### File Structure
```csv
email,tenant_name,role,env,name
user1@example.com,company_a,admin,3,John Tanaka
user1@example.com,company_a,user,3,John Tanaka
user2@example.com,company_a,user,3,Jane Sato
user3@example.com,company_b,user,3,Jiro Suzuki
user4@example.com,company_a,user,3,Saburo Yamada
user4@example.com,company_a,viewer,3,Saburo Yamada
user5@example.com,company_b,admin,3,Misaki Takahashi
user5@example.com,company_a,user,3,Misaki Takahashi
user5@example.com,company_b,user,3,Misaki Takahashi
```

### Column Descriptions
- **email**: User's email address (required)
- **tenant_name**: Tenant name to belong to (required, separate rows for multiple tenants, skip if doesn't exist)
- **role**: Role to assign (required, single role, separate rows for multiple roles, skip if doesn't exist)
- **env**: Environment ID (required, skip if doesn't exist)
- **name**: User's name (set as attribute, optional)
- **Custom attributes**: All columns to the right of env are treated as custom attributes (optional, error at CSV reading time if attribute doesn't exist)

### Handling Multiple Tenants and Roles
- **Multiple Roles**: When a user has multiple roles, separate them into different rows
- **Multiple Tenants**: When a user belongs to multiple tenants, separate them into different rows
- **Combinations**: For multiple tenants × multiple roles, list all combinations in separate rows

---

# Environment Information Acquisition Procedure

URL: https://www.prisma.io/docs/part-4/mcp-server/clone-dev-settings

# SaaSus Platform Environment Information Acquisition Procedure

## Overview
This is a procedure document for comprehensively retrieving various configuration information from SaaSus Platform and outputting it in JSON format.

## Prerequisites
- SaaSus API MCP Server must be configured

## Request Text for MCP Server

### Basic Request Text
```
Please retrieve SaaSus settings and output them to a single file in JSON format.

Please include the following information:
- Domain settings
- Post-authentication redirect destination
- Authentication detailed settings (basic settings)
- Authentication detailed settings (screen settings)
- Authentication detailed settings (authentication settings)
- Authentication detailed settings (email notification content)
- User attribute definitions
- Tenant attribute definitions
- User environment definitions
- Role definitions
- Meter unit settings
- Measurement unit settings
- Feature menu settings
- Pricing plan settings
- Tax rate settings
- Billing information
- Event integration
- AWS Marketplace information
```
## Output File Structure

```json
{
  "domain": { ... },
  "callback_url": "...",
  "auth_basic_settings": { ... },
  "auth_page_settings": { ... },
  "auth_identity_providers": { ... },
  "notification_messages": { ... },
  "user_attributes": [ ... ],
  "tenant_attributes": [ ... ],
  "environments": [ ... ],
  "roles": [ ... ],
  "metering_units": [ ... ],
  "pricing_units": [ ... ],
  "pricing_menus": [ ... ],
  "pricing_plans": [ ... ],
  "tax_rates": [ ... ],
  "billing_info": { ... },
  "event_bridge_settings": { ... },
  "aws_marketplace": { ... }
}

---

# User List CSV Export Procedure

URL: https://www.prisma.io/docs/part-4/mcp-server/export-user-info-csv

# SaaSus Platform User List CSV Export Procedure

## Overview
This is a procedure document for comprehensively retrieving user information registered in SaaSus Platform and outputting it in CSV format.

## Prerequisites
- SaaSus API MCP Server must be configured

## Request Text for MCP Server

### Basic Request Text
```
Please export the user list to CSV.

[Output Settings]
Output format = CSV
File name = saasus_users.csv
No intermediate artifacts required
Output the resulting CSV file directly
If the same user has multiple tenants or roles, output as separate rows
Do not use cache, always retrieve the latest information

[Field Settings]
Email address = true
Tenant name = true
Environment = true
Role = true
; If there are other custom attributes, add them below
; Name = true
; Custom attribute 1 = true
; Custom attribute 2 = true

[Field Descriptions]
Email address: User's email address
Tenant name: Name of the tenant the user belongs to
Environment: Environment the user is using (e.g., production, development, test, etc.)
Role: Role assigned to the user (e.g., administrator, user, guest, etc.)
; Name: User's full name
; Custom attribute 1: Description of any custom attribute 1
; Custom attribute 2: Description of any custom attribute 2

[Output Conditions]
; Set filter conditions when outputting the user list
; Example: To output only users belonging to a specific tenant, set as follows
; Tenant name = Specific tenant name
; Example: To output users only in a specific environment, set as follows
; Environment = production
; Example: To output only users with specific roles, set as follows
; Role = administrator, user
; Example: To output only users with a specific name, set as follows
; Name = John Doe
Tenant name = Tenant2

[Output Example]
; The following is an example of the output CSV
; Email address,Tenant name,Environment,Role,Name
; user1-1@example.com,Tenant1,prod,administrator,User1-1
; user1-1@example.com,Tenant1,prod,general user,User1-1
; user1-2@example.com,Tenant1,prod,administrator,User1-2
; user2-1@example.com,Tenant2,prod,administrator,User2-1
```

## Output File Format

### CSV Header
```csv
Email address,Tenant name,Environment,Role
```

### Example Data Rows
```csv
user2-1@example.com,Tenant2,prod,administrator
user2-2@example.com,Tenant2,prod,general user
user2-3@example.com,Tenant2,dev,administrator
user2-3@example.com,Tenant2,dev,general user
```

## Notes

- If the same user belongs to multiple tenants, they will be output as separate rows for each tenant
- If the same user has multiple roles, they will be output as separate rows for each role
- If filter conditions are specified, only users matching the conditions will be output
- The output data is the latest information at the time of execution (cache is not used)

## Customization

### Adding Fields
If you want to include user names or custom attributes in the output, set the corresponding items to `true` in the [Field Settings] section.

### Changing Filter Conditions
If you want to filter users by specific conditions, specify the conditions in the [Output Conditions] section. Multiple conditions can be combined.

---

# SaaSus API MCP Server Setup Guide

URL: https://www.prisma.io/docs/part-4/mcp-server/setup

# SaaSus API MCP Server Setup Guide

## Overview
SaaSus API MCP Server operates as a Model Context Protocol (MCP) server, enabling SaaSus API to be used from MCP-compatible clients such as Claude Desktop and Cursor.

:::caution
Request-size and daily-quota limits vary by MCP client and plan.  
Large requests can be rejected on Free plans.
:::

## Prerequisites
- Node.js (v16 or higher required, v20 or higher recommended)
- npm (included with Node)

## Installation Steps

### 1. Clone the Repository
Clone the project with the following command:

```bash
git clone https://github.com/saasus-platform/saasus-api-mcp-server.git
cd saasus-api-mcp-server
```

### 2. Install Dependencies
Run the following command in the project root directory:

```bash
npm install
```

### 3. Check Available Tools
To check the description and parameters of generated tools, run the following command:

```bash
node index.js tools
```

Example output:
```
Available Tools:
Workspace: saasus-auth-api-schema
  Collection: get-basic-configurations.js
    get_basic_configurations
      Description: Get basic configurations including domain name and CNAME records.
      Parameters:
    [...]
```

## Claude Desktop Configuration

:::caution
When using the free version of Claude Desktop, requests may fail if they exceed the size limit.  
To continue using it reliably, consider upgrading to a paid plan.
:::

### 1. Check Local Environment

Check the node path:
```bash
which node
```

Check the mcpServer.js path:
```bash
realpath mcpServer.js
```

### 2. Obtain SaaSus Platform API Key Information

To use SaaSus API MCP Server, you need to set the following environment variables.
These values can be obtained from the SaaSus Platform SaaS Development Console.

- `SAASUS_PLATFORM_SAASID`: SaaS ID
- `SAASUS_PLATFORM_APIKEY`: API Key
- `SAASUS_PLATFORM_SECRETKEY`: Secret Key

### 3. MCP Server Configuration
Add the information obtained in steps 1 and 2 to the configuration file:

```json
{
  "mcpServers": {
    "saasusapis": {
      "command": "node path",
      "args": ["mcpServer.js path"],
      "env": {
        "SAASUS_PLATFORM_SAASID": "SaaS ID",
        "SAASUS_PLATFORM_APIKEY": "API Key",
        "SAASUS_PLATFORM_SECRETKEY": "Secret Key"
      }
    }
  }
}
```

**Note:**  
Replace `node path` with the full path.  
Replace `mcpServer.js path` with the actual full path to the cloned directory.

### 4. Restart Claude Desktop
Restart Claude Desktop to apply the configuration.

### 5. Verify Operation in Claude Desktop
Please ask "Get SaaSus basic information".  
If the basic information is successfully retrieved, the setup is complete.

## Available Features

SaaSus API MCP Server provides access to all SaaSus Platform API endpoints.  
Main features include:

### Auth API
- Get and update basic configurations
- User management
- Tenant management
- Authentication settings

### Pricing API
- Metering
- Feature menu management
- Plan management

### Other APIs
- Billing API
- Communication API
- API Log API
- AWS Marketplace API
- Integration API

## Troubleshooting

### Common Issues

#### 1. Server Won't Start
- Check Node.js version (v16 or higher required, v20 or higher recommended)
- Verify dependencies are correctly installed
- Check if environment variables are correctly set

#### 2. API Key Error
- Verify SaaSus Platform API key is correctly configured
- Check if API key permissions are properly set
- Verify SaaS ID is correctly configured

#### 3. MCP Connection Error
- Verify the path in Claude Desktop or Cursor configuration file is correct
- Check if the configuration file JSON format is valid
- Restart the application
- MCP clients may fail when a request exceeds plan-specific limits or when the tool manifest is too large.

### Check Tool List
To check available tools:

```bash
node index.js tools
```

This command allows you to check all available API endpoints and their parameters.

---

# Creating Pricing Plans

URL: https://www.prisma.io/docs/part-4/pricing-and-billing/pricing-plan-creation

This page walks you through how to configure the **4 key elements** required in the SaaS Development Console—**Meter Unit → Measurement Unit → Function Menu → Pricing Plan**—using **Free / Basic / Enterprise** as examples.

---

## 1. Create a Meter Unit

First, register a **meter unit** to track usage.

| Meter Unit Key | Display Name | Description     |
|----------------|--------------|-----------------|
| `comment_count` | Comment Count | Comment Count |

![Meter Unit Settings](/img/part-4/pricing-and-billing/pricing-plan-creation/setting-measurement-units-function-menus-and-price-plans-07.png)

:::info
If Stripe integration is enabled, you can choose `sum` or `max` for usage aggregation.  
Details → [Meter Unit Settings](/docs/part-4/pricing-and-billing/usage-metering)
:::

---

## 2. Create Measurement Units

### 2-1. For Free Plan (Usage Unit)

| Key             | Display Name           | Type                | Meter         | Unit Price | Cap | Currency |
|----------------|------------------------|---------------------|---------------|------------|-----|----------|
| `free_comment` | Number of Free Plan Comments | **Usage Unit** | Comment Count | 0          | 10  | JPY      |

![Free Measurement Unit](/img/part-4/pricing-and-billing/pricing-plan-creation/setting-measurement-units-function-menus-and-price-plans-02.png)

---

### 2-2. For Basic Plan (Fixed + Tiered Units)

<div className="table-scroll">
<table className="nowrap-table">
  <thead>
    <tr>
      <th>Key</th>
      <th>Display Name</th>
      <th>Type</th>
      <th>Meter</th>
      <th>Pricing</th>
      <th>Currency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>basic_base</code></td>
      <td>Basic Plan Basic Fee</td>
      <td><strong>Fixed Unit</strong></td>
      <td className="text-center">—</td>
      <td className="text-right">500 / month</td>
      <td className="text-right">JPY</td>
    </tr>
    <tr>
      <td><code>basic_comment</code></td>
      <td>Number of comments for Basic plan</td>
      <td><strong>Tiered Unit</strong></td>
      <td>Comment Count</td>
      <td className="text-right no-p-margin">
        0-10=500<br />
        11-50=1,000<br />
        51-100=1,500
      </td>
      <td className="text-right">JPY</td>
    </tr>
  </tbody>
</table>
</div>

![Basic Fixed Unit](/img/part-4/pricing-and-billing/pricing-plan-creation/setting-measurement-units-function-menus-and-price-plans-01.png)  
![Basic Tiered Unit](/img/part-4/pricing-and-billing/pricing-plan-creation/setting-measurement-units-function-menus-and-price-plans-03.png)

---

### 2-3. For Enterprise Plan (Tiered Usage Unit)

<div className="table-scroll">
<table className="nowrap-table">
  <thead>
    <tr>
      <th>Key</th>
      <th>Display Name</th>
      <th>Type</th>
      <th>Meter</th>
      <th>Tiered Pricing</th>
      <th>Currency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>enterprise_comment</code></td>
      <td>Number of comments for Enterprise plan</td>
      <td><strong>Tiered Usage Unit</strong></td>
      <td>Comment Count</td>
      <td className="text-right no-p-margin">
    0-1,000=50 / item<br />
    1,001-5,000=40 / item<br />
    5,001〜=30 / item
      </td>
      <td className="text-right">JPY</td>
    </tr>
  </tbody>
</table>
</div>

![Enterprise Measurement Unit](/img/part-4/pricing-and-billing/pricing-plan-creation/setting-measurement-units-function-menus-and-price-plans-08.png)

---

## 3. Create Function Menus

| Menu Key        | Display Name               | Included Units                          |
|-----------------|----------------------------|------------------------------------------|
| `free_menu`     | Free Plan Basic Menu             | Comment Count for Free                  |
| `basic_menu`    | Basic Plan Basic Menu            | Basic Plan Basic Fee<br />Number of comments for Basic plan |
| `enterprise_menu` | Enterprise Plan Basic Menu      | Number of comments for Enterprise plan            |

![Function Menu Settings](/img/part-4/pricing-and-billing/pricing-plan-creation/setting-measurement-units-function-menus-and-price-plans-05.png)

Repeat the same process for Basic and Enterprise plans as you did for Free.

---

## 4. Create Pricing Plans

| Plan Key         | Display Name   | Function Menu         |
|------------------|----------------|------------------------|
| `free_plan`      | Free Plan      | Free Plan Basic Menu         |
| `basic_plan`     | Basic Plan     | Basic Plan Basic Menu        |
| `enterprise_plan`| Enterprise Plan| Enterprise Plan  Basic Menu   |

![Pricing Plan Settings](/img/part-4/pricing-and-billing/pricing-plan-creation/setting-measurement-units-function-menus-and-price-plans-06.png)

Repeat the same setup steps for Basic and Enterprise as you did for Free.

---

You’ve now completed setup for the **Free / Basic / Enterprise** pricing plans.
---

# Pricing Plan Overview

URL: https://www.prisma.io/docs/part-4/pricing-and-billing/pricing-plan-overview
## 1. The 4 Layers of a Pricing Plan

A pricing plan is defined by combining the following **4 hierarchical layers**:

| Layer             | Role                                 | Example Settings                      |
|------------------|--------------------------------------|----------------------------------------|
| **Metering Unit**     | Counter for measuring usage          | Number of comments / active users...  |
| **Measurement Unit** | The smallest billing logic unit      | Fixed / Usage-Based / Tiered / Tiered Usage |
| **Feature Menu**   | A \"feature package\" bundling multiple units | Free Menu / Pro Menu, etc.             |
| **Pricing Plan**    | Top-level plan assigned to tenants  | Free / Basic / Enterprise...           |

![Pricing Plan Hierarchy](/img/part-4/pricing-and-billing/pricing-plan-overview/manage-rate-plans-05.png)

## 2. Measurement Units – 4 Billing Models

<div className="table-scroll">
<table className="nowrap-table">
  <thead>
    <tr>
      <th>Type</th>
      <th>Image</th>
      <th>Main Use Cases</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Fixed Unit</strong></td>
      <td>Fixed price such as 500 JPY per month</td>
      <td>Monthly base fee, maintenance cost</td>
    </tr>
    <tr>
      <td><strong>Usage Unit</strong></td>
      <td>1 API request = 0.1 JPY</td>
      <td>Simple pay-as-you-go</td>
    </tr>
    <tr>
      <td><strong>Tiered Unit</strong></td>
      <td className="no-p-margin">
        0–10 items = 500 JPY<br />
        11–50 items = 1,000 JPY<br />
        etc.
      </td>
      <td>Step-based pricing (like mobile data plans)</td>
    </tr>
    <tr>
      <td><strong>Tiered Usage Unit</strong></td>
      <td className="no-p-margin">
        0–10 items = 100 JPY/item<br />
        11–20 items = 90 JPY/item<br />
        etc.
      </td>
      <td>Volume discount pricing</td>
    </tr>
  </tbody>
</table>
</div>

:::info
For **detailed calculation patterns**, see  
[The difference in rate calculation between Tiered units and Tiered usage units](/docs/part-4/pricing-and-billing/tiered-unit).
:::

## 3. Relationship Between Meter Units and Measurement Units

| Measurement Unit Type       | Refers to Meter Unit | Typical Billing Logic                                  |
|-----------------------------|----------------------|---------------------------------------------------------|
| Fixed Unit                  | **Does not refer**    | Fixed monthly fee                                       |
| Usage Unit            | Refers (one)          | Usage × unit price                                      |
| Tiered Unit                 | Refers (one)          | Charge based on the **fixed amount for the usage tier** |
| Tiered Usage Unit     | Refers (one)          | **Sum of (unit price × usage) for each tier**           |

:::info
**Fixed Units** do not refer to any meter unit.  
Use this model to define **flat fees unaffected by usage** (e.g., 1,000 JPY/month).
:::

## 4. Model Samples (Free / Basic / Enterprise)

<div className="table-scroll">
<table className="nowrap-table">
  <thead>
    <tr>
      <th>Plan</th>
      <th>Base Fee</th>
      <th>Comment Count Billing</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Free</strong></td>
      <td className="text-right">0 JPY</td>
      <td>Free up to 10 items</td>
    </tr>
    <tr>
      <td><strong>Basic</strong></td>
      <td className="text-right">500 JPY</td>
      <td className="no-p-margin">
        Tiered pricing<br />
        0–10 items = 500 JPY<br />
        11–50 items = 1,000 JPY<br />
        51–100 items = 1,500 JPY
      </td>
    </tr>
    <tr>
      <td><strong>Enterprise</strong></td>
      <td className="text-right">0 JPY</td>
      <td className="no-p-margin">
        Tiered usage-based<br />
        0–1,000 items = 50 JPY/item<br />
        1,001–5,000 items = 40 JPY/item<br />
        5,001〜 = 30 JPY/item
      </td>
    </tr>
  </tbody>
</table>
</div>

### Free Plan Example  
![Free Plan Structure](/img/part-4/pricing-and-billing/pricing-plan-overview/manage-rate-plans-06.png)

### Basic Plan Example  
![Basic Plan Structure](/img/part-4/pricing-and-billing/pricing-plan-overview/manage-rate-plans-07.png)

### Enterprise Plan Example  
![Enterprise Plan Structure](/img/part-4/pricing-and-billing/pricing-plan-overview/manage-rate-plans-08.png)
---

# Stripe Integration

URL: https://www.prisma.io/docs/part-4/pricing-and-billing/stripe-integration

This page explains how to integrate Stripe with the SaaS Development Console to streamline billing and invoice management.  
Information such as pricing plans and tax rates configured in the SaaSus Platform will be automatically synced to Stripe and used in the invoicing process.

:::info
If you do not use Stripe, this configuration is not required.
:::

## Registering the Stripe Secret Key

To enable Stripe integration, register your **Stripe secret key** in the SaaSus Platform.

1. Go to the **External Integrations** menu from the SaaS Development Console  
2. Enter your **Stripe Secret Key**  
3. Click **Save**

![stripe-secret](/img/part-4/pricing-and-billing/stripe-integration/saasus-development-console-used-billing-with-association-01.png)

Once completed, future pricing plan and tax rate configurations will automatically be sent to Stripe.

## Tax Rate Mapping to Stripe

Tax rates configured in the SaaS Development Console will be reflected in Stripe as follows:

| Stripe Column        | SaaS Development Console Field | Description                                                  |
|----------------------|----------------------|--------------------------------------------------------------|
| -                    | Tax Rate Name        | Internal identifier (must be unique)                         |
| Type                 | Display Name         | Displayed on Stripe invoices (if integrated)                 |
| Description          | Description          | Human-readable label for the tax rate                        |
| Rate (%)             | Percentage           | Numeric value of the tax rate                                |
| Region               | Country              | Country where the tax applies                                |
| Inclusive/Exclusive  | Inclusive/Exclusive  | Indicates whether the tax is included in the amount or not   |

![stripe-tax-setting](/img/part-4/pricing-and-billing/stripe-integration/tax-rates-10.png)

## Example: Invoices Issued with Stripe

Based on the configured tax settings, Stripe will generate invoices accordingly — here are examples for **inclusive**, **exclusive**, and **no tax** cases.

### Invoice with Inclusive Tax

**Invoice View**  
![invoice-tax-included](/img/part-4/pricing-and-billing/stripe-integration/tax-rates-11.png)

**PDF Version**  
![invoice-tax-included-pdf](/img/part-4/pricing-and-billing/stripe-integration/tax-rates-12.png)

### Invoice with Exclusive Tax

**Invoice View**  
![invoice-tax-excluded](/img/part-4/pricing-and-billing/stripe-integration/tax-rates-13.png)

**PDF Version**  
![invoice-tax-excluded-pdf](/img/part-4/pricing-and-billing/stripe-integration/tax-rates-14.png)

### Invoice without Tax Settings

**Invoice View**  
![invoice-no-tax](/img/part-4/pricing-and-billing/stripe-integration/tax-rates-15.png)

**PDF Version**  
![invoice-no-tax-pdf](/img/part-4/pricing-and-billing/stripe-integration/tax-rates-16.png)
---

# Tax Rate Settings

URL: https://www.prisma.io/docs/part-4/pricing-and-billing/tax-rate-settings

Tax rate settings define the type and percentage of taxes (such as consumption tax) applied to each tenant's pricing plan.  
When configuring a pricing plan for a tenant in the SaaS Operation Console, you can select a tax rate along with the plan.

:::info
**About consumption tax displayed on invoices**  
Japan’s qualified invoice system began on October 1, 2023.  
A “qualified invoice” is a receipt or invoice that includes consumption tax details, required for calculating tax amounts when filing taxes.  
<a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/invoice.htm" target="_blank">https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/invoice.htm</a>
:::

## Creating a Tax Rate

1. **Go to `Pricing Plan -> Tax Rate Settings` in the SaaS Development Console**

![tax-rates-1](/img/part-4/pricing-and-billing/tax-rate-settings/tax-rates-1.png)

2. **Click on `Create Tax Rate`**

![tax-rates-2](/img/part-4/pricing-and-billing/tax-rate-settings/tax-rates-2.png)

3. Fill in the required fields in the tax rate creation form:

| Field        | Description                                                                 |
|--------------|-----------------------------------------------------------------------------|
| Tax Rate Name | Unique identifier used in the system (must be unique)                      |
| Display Name  | Name shown on invoices (if integrated with Stripe)                         |
| Description   | Human-readable explanation of the tax rate                                 |
| Percentage    | The tax rate to apply (e.g., 10 for 10%)                                   |
| Country       | Country where the tax applies                                               |
| Inclusive/Exclusive | Whether the tax is included in the price or added on top              |

:::caution
Once created, tax rates cannot be modified or deleted. Please review carefully before saving.
:::

After completing the form, click **Create** to save the tax rate.

![tax-rates-3](/img/part-4/pricing-and-billing/tax-rate-settings/tax-rates-3.png)

![tax-rates-4](/img/part-4/pricing-and-billing/tax-rate-settings/tax-rates-4.png)
---

# The difference in rate calculation between Tiered units and Tiered usage units

URL: https://www.prisma.io/docs/part-4/pricing-and-billing/tiered-unit
In unit measurement settings, you set the smallest unit of measurement which serves as the basis for rate calculation. 
'Tiered units' are like mobile phone packet charges, where a fixed fee is incurred at each usage stage, 
'Tiered usage units' are like volume discounts, where the unit price fluctuates according to usage.

Applying the respective definitions, I will explain the method for calculating charges in the case of making 15 comments.

| Unit~(and above) | Up to ~ units (or less) | Unit price | Remarks |
| ------- | --------- | ---- | --------------------- |
| 1       | 10        | 100 yen | For the range of 1 ~ 10 comments, each comment costs 100 yen. |
| 11      | 20        | 90 yen  | For the range of 11 ~ 20 comments, each comment costs 90 yen. |
| 21      | 30        | 80 yen  | For the range of 21 ~ 30 comments, each comment costs 80 yen. |
| 31      | ♾️        | 70 yen  | For 31 comments and above, each comment costs 70 yen. |

## Tiered Units

15 items \* 90 yen = ***1350 yen***

With Tiered Units, you will be billed 1350 yen. 

## Tiered usage Units

10 items \* 100 yen = 1000 yen

5 items \* 90 yen = 450 yen

1000 yen + 450 yen = ***1450 yen***

With Tiered usage Units, you will be billed 1450 yen. 

---

# Meter Unit Setting

URL: https://www.prisma.io/docs/part-4/pricing-and-billing/usage-metering
Define the meter unit that will be used as the measurement unit.

## Meter Unit Setting

1. From the **SaaS Development Console, select `Metering Units`**

![usage-metering-1](/img/part-4/pricing-and-billing/usage-matering/usage-metering-1.png)

1. **Click on `Metering Unit`**

![usage-metering-2](/img/part-4/pricing-and-billing/usage-matering/usage-metering-2.png)

2. Set the meter unit with `Metering Unit`  

| Keyword               | Description    |
|---------------------  |--------------- |
| Unit Name             | Define for programmatic identification. Duplicate names cannot be created.  |
| Unit Display Name     | Decide on a name for the meter.  |
| Unit Description      | Set up a description of the meter that people can easily understand.  |
| Calculation Method    | Set any of the following. sum（Total value of usage during the period) or max（Maximum usage value during the period） | 

:::info
The **"Calculation Method"** field only appears when **Stripe integration is enabled**.

This setting specifies how the usage amount of the metering unit should be aggregated for billing,  
such as `sum` (total usage during the period) or `max` (maximum daily usage during the period).  
You can configure a different aggregation method for each metering unit.

This setting is used as part of the billing configuration when integrated with Stripe.

It is not required and will not appear when using the SaaSus Platform without Stripe integration.
:::

Set the above information and click the Save button.

## Set the meter unit to the measurement unit.
When creating a measurement unit, you can set a meter unit.
You can select a meter unit that is already registered.

![usage-metering-3](/img/part-4/pricing-and-billing/usage-matering/usage-metering-3.png)

## Updating and deleting meter units
Meter units that have been set as measurement units cannot be deleted.  
Only the meter unit display name and meter unit description can be updated.

![usage-metering-4](/img/part-4/pricing-and-billing/usage-matering/usage-metering-4.png)



---

# Pricing Plans and Billing Configuration

URL: https://www.prisma.io/docs/part-4/pricing-plan-and-billing-configuration

---

# Overview of SaaS Development Console

URL: https://www.prisma.io/docs/part-4/saas-development-console-overview

## 1. Role of the SaaS Development Console

The SaaS Development Console is used in the following situations:

- Initial setup before integrating authentication, billing, and pricing features into your own application  
- Creating the foundational configuration for a new service launch  
- Defining access control policies such as login methods and roles  
- Testing operations and verifying settings prior to production launch  

## 2. Screen Layout and Key Menus

When you log in to the SaaS Development Console, a navigation menu appears on the left side of the screen. From here, you can access various configuration sections.

![01](/img/part-4/saas-development-console-overview/saas_development_console_overview-01.png)  
![02](/img/part-4/saas-development-console-overview/saas_development_console_overview-02.png)

### Main Menu Structure

| Menu                   | Description                                                                                  |
|------------------------|----------------------------------------------------------------------------------------------|
| **Dashboard**          | View release information and platform updates.                                               |
| **Basics**     | Configure your SaaS app’s domain, redirect URL after authentication, and check your API key. |
| **Authentication Authorization** | Set app details, login methods (password/Google), user attributes, and role definitions. |
| **Pricing Plans**      | Flexibly create, edit, and manage pricing plans combining flat-rate and usage-based tiers.    |
| **Integration** | Automate billing by registering your Stripe secret key via the \"Integration > Billing\" screen. |

:::info
- You can switch between the SaaS Development Console and SaaS Operation Console using the selector at the top of the navigation menu.  
- A chat support feature (Intercom) is available at the bottom-right of the screen.  
- The SaaS Development Console groups multiple configuration functions under single menu items like \"Authentication & Authorization\" and \"Pricing Plans.\"  
- In contrast, the SaaS Operation Console presents each function as a separate menu item.  
:::

## 3. Frequently Used Menus and Basic Operations

### Dashboard

- Check announcements and update notifications from the SaaSus Platform.

### Authentication Authorization Menu

- **Service Name**: Set the name displayed on login and redirect screens.  
- **Icon Upload**: Upload a service icon (shown on the login screen, etc.).  
- **Terms of Use URL / Privacy Policy URL**: Define the links shown on the login screen.  
- **Login Method**: Choose whether to allow Google login in addition to password login.  
- **Role Definitions**: Define and manage access permissions by user role (e.g., Admin, General User).  

### Basics Menu

- **Domain Configuration**: Specify a custom domain for your SaaS app.  
- **Post-login Redirect URL**: Set the URL to redirect users to after successful login (e.g., application homepage).  
- **API Key Access**: View keys required for SaaSus SDK and API integrations.
---

# SaaS Infrastructure Management

URL: https://www.prisma.io/docs/part-4/saas-infra-management

## Overview

In SaaS deployment models, there are "silo model" and "pool model".

A silo model is a deployment model where different servers and databases are prepared for each customer (tenant) using the SaaS. Each tenant has a completely isolated environment.

A pool model is a deployment model where common servers and databases are prepared for multiple tenants. Data is partitioned by tenant, but physical resources are shared.

The SaaS Infrastructure Management feature is a functionality on the SaaSus Platform that supports the construction of SaaS with a silo model.

:::warning
The "SaaS Infrastructure Management feature" is not available for customers on the legacy Starter or Standard plans.
To use this feature, you need to change to a new pricing plan.
:::

In a silo model, each tenant's data is physically isolated, reducing the risk of data leakage among other benefits. However, there is a disadvantage of increased management cost as servers and databases need to be prepared for each tenant.

The SaaS Infrastructure Management feature automatically prepares servers and databases in your AWS environment when you create a tenant on SaaSus Platform. This can reduce the costs of management and operations.

## Setup Method

### Permission from SaaSus Platform

When onboarding a tenant, since the SaaSus Platform needs to access your AWS environment, you must grant these permissions to the SaaSus Platform.

Follow the instructions on the screen to create an IAM Role and register the details of the created role.

![settings-role](/img/part-4/saas-infra-management/settings-role.png)

### Cloud Formation Template

<a download="saas-infra-management-cf-sample.yml" href="/file/saas-infra-management-cf-sample.yml"> Cloud Formation Template Sample </a>

When you create a tenant on the SaaSus Platform, a Cloud Formation is executed in your AWS environment to create an environment for each tenant. You need to register the Cloud Formation template that will be used at this time.

The Cloud Formation's Outputs should specify the following items:

| Logical ID       | Value                                              |
| :--------------- | :------------------------------------------------- |
| AccountId        | AWS account where Cloud Formation is executed      |
| SubnetIds        | IDs of the subnets set for the DB instance         |
| SecurityGroupIds | IDs of the security groups set for the DB instance |
| DbUser           | User for connecting to the DB                      |
| DbPass           | Password for connecting to the DB                  |
| DbHost           | Host (IP address) for connecting to the DB         |
| DbPort           | Port number for connecting to the DB               |
| DbName           | Name of the DB                                     |
| DbType           | Type of the DB (`mysql` or `postgres`)             |

### SQL File

<a download="saas-infra-management-sample.sql" href="/file/saas-infra-management-sample.sql"> SQL File Sample </a>

You will need to register SQL file that will be executed against the DB created by the Cloud Formation. Register the SQL for the table definitions and initial data of the DB.

### How to check the progress of SaaS Infrastructure Management

In the SaaS Operation Console - Tenant Management screen, display the target tenant, and you can check the progress information by the value of TenantOnboardingStatus.

| TenantOnboardingStatus | Situation                                     |
| :--------------------- | :-------------------------------------------- |
| setup_cfn_in_progress  | Preparing to run Cloud Formation              |
| setup_cfn_db_ready     | DB instance created by Cloud Formation        |
| setup_cfn_completed    | Cloud Formation completed                     |
| setup_db_in_progress   | Executing SQL                                 |
| all_completed          | All processes completed normally              |
| error                  | Abnormal termination (please contact support) |

### Note

Tenant onboarding processes will be carried out in the Tokyo region (ap-northeast-1).
Tenant offboarding process is not supported.

---

# Setup Procedure

URL: https://www.prisma.io/docs/part-4/smart-api-gateway-features/manual

import TabItem from "@theme/TabItem";
import Tabs from "@theme/Tabs";

## Smart API Gateway Usage Procedure

Below is the procedure for configuring the SaaSus Platform Smart API Gateway feature to easily publish and manage your APIs.

---

### Step 1: Preliminary Steps (Setup of SaaS Environment and App)

- **Create a SaaSus Platform Account**  
  You need a SaaSus Platform account to use this feature.  
  Access [SaaSus Platform](https://saasus.io/), create a SaaSus Platform account, and log in.

- **Prepare the AWS Environment for Testing**  
  You need an AWS account to use this feature.  
  If you do not have one, access [Create an AWS Account](https://aws.amazon.com/jp/) to sign up for AWS.

- **SaaS Environment and Sample App**  
  Use CloudFormation to create a SaaS environment and sample app in AWS.  
  In the AWS environment you will use for verification, run the CloudFormation below.  
  After execution, access the URL listed in the CloudFormation outputs, enter the password, and log in to the VSCode environment.  
  [Create a SaaS Environment and Sample App](https://github.com/saasus-platform/implementation-sample-smart-api-gateway/blob/main/smart-gateway-sample-saas.yaml)

  - **Sample App**  
    The sample app used in this procedure is:  
    [Smart API Gateway SaaS Sample](https://github.com/saasus-platform/implementation-sample-smart-api-gateway.git)

  - **SaaSus Java SDK**  
    The SaaSus Java SDK used in this procedure is:  
    [Java SDK](https://github.com/saasus-platform/saasus-sdk-java)

- **SDK Setup**  
  The SDK setup is performed using the following steps:

1. Build a package with the SaaSus Java SDK and install it in your local repository.

   ```bash
   cd saasus-sdk-java
   mvn clean package
   mvn install:install-file -Dfile=target/saasus-sdk-java-1.0.0.jar -DgroupId=io.saasus -DartifactId=saasus-java -Dversion=0.0.1 -Dpackaging=jar
   ```

   :::info[Since the steps have already been configured, just verify what is being done]
   :::

2. In the `implementation-sample-smart-api-gateway/pom.xml` file, add the following under the `dependencies` tag and the `profiles` tag.

   ```xml
   <!-- saasus platform sdk -->
   <dependency>
     <groupId>io.saasus</groupId>
     <artifactId>saasus-java</artifactId>
     <version>0.0.1</version>
   </dependency>
   <!-- saasus platform sdk -->

   <!-- smart api gateway parameter setting -->
   <profiles>
     <profile>
       <id>with-parameters</id>
       <build>
         <plugins>
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-compiler-plugin</artifactId>
             <version>3.8.1</version>
             <configuration>
               <compilerArgs>
                 <arg>-parameters</arg>
               </compilerArgs>
             </configuration>
           </plugin>
         </plugins>
       </build>
     </profile>
   </profiles>
   <!-- smart api gateway parameter setting -->
   ```

3. Make the necessary configurations in the `implementation-sample-smart-api-gateway` project.

   ```bash
   cd implementation-sample-smart-api-gateway
   mvn clean package

   cp .env.example .env
   vi .env

   SAASUS_SAAS_ID="xxxxxxxxxx"
   SAASUS_API_KEY="xxxxxxxxxx"
   SAASUS_SECRET_KEY="xxxxxxxxxx"

   docker compose up -d
   ```

   :::info
   For details on how to obtain `SAASUS_SAAS_ID`, `SAASUS_API_KEY`, and `SAASUS_SECRET_KEY`, please see:  
   [Reconfirming SaaS ID, API Key, and Client Secret](/docs/tutorial/configuring-sdk-for-saasus-platform#check-your-saas-id-api-key-and-client-secret)
   :::

---

:::info[Since the steps have already been configured, just verify what is being done]

### Step 2: Annotation Settings in Source Code

1. Add annotations to the methods you want to publish so that they can be used as API endpoints.

   As an example this time,  
   `src/main/java/implementsample/service/InventoryService.java`  
   we will call the `getInventoryEntryPoint` method via the API.

   Smart API Gateway is designed to call `static` methods.  
   Therefore, we create a `static` method that will be called from Smart API Gateway, inside which we call `TenantInventory`.  
   Then, we add the `@SaaSusAPI` annotation to the newly created `static` method to declare its use as an endpoint of the Smart API Gateway.

```mdx-code-block
<Tabs>
<TabItem value="java" label="java" default>
```

```java
package implementsample.service;

import java.util.List;

import implementsample.dto.InventoryDto;
import implementsample.repository.InventoryRepository;
import saasus.sdk.modules.SaaSusAPI;
import saasus.sdk.util.apiserver.SaasusIdentity;

public class InventoryService {

    /**
     * API for getting inventory information
     * @param identity SaasusIdentity object
     * @return List of inventory information
     */
    @SaaSusAPI(path = "getInventory")
    public static List<InventoryDto> getInventory(SaasusIdentity identity) {
        String tenantId = identity.getTenantId();

        return InventoryRepository.getInventory(tenantId);
    }

    /**
     * API for getting inventory information by user
     * @param identity SaasusIdentity object
     * @return List of inventory information
     */
    @SaaSusAPI(path = "getInventoryByUser")
    public static List<InventoryDto> getInventoryByUser(SaasusIdentity identity) {
        String tenantId = identity.getTenantId();
        String userId = identity.getUserId();

        return InventoryRepository.getInventoryByUser(tenantId, userId);
    }
}
```

```mdx-code-block
</TabItem>
</Tabs>
```

---

### Step 3: API Server Startup Settings

1. We added the `src/main/java/implementsample/ApiServerListener.java` class so that the `saasus-sdk` API server starts when the application starts.

```mdx-code-block
<Tabs>
<TabItem value="java" label="java" default>
```

```txt
// saasus api server
import saasus.sdk.util.apiserver.ApiServer;

...omitted...

            // Start the API server on port 8083
            ApiServer.start(8083);

```

```mdx-code-block
</TabItem>
</Tabs>
```

2. The following settings are required for **Application Load Balancer** (already configured in CloudFormation):
   - **Listener**: Port **8083**
   - **Target Group**: Create a target group for port **8083**
   - **Security Group**: Allow access on port **8083** between the ALB and the application

:::

---

### Step 4: Code Modifications

Modify the code in the appropriate sections.
**Areas that need modification in InventoryRepository.java:**

1. **Modify Inventory Manager ID constant**
   ```java
   // Before modification
   private static final String INVENTORY_MANAGER_A = "f47ac10b-58cc-4372-a567-0e02b2c3d479";
   
   // After modification (change to actual user ID)
   private static final String INVENTORY_MANAGER_A = "actual user ID";
   ```

2. **Modify tenant ID**
   ```java
   // Before modification
   put("d296b330-3cce-40b6-88c3-035a1d86981f",
   
   // After modification (change to actual tenant ID)
   put("actual tenant ID",
   ```

**Modification steps:**
1. Open `src/main/java/implementsample/repository/InventoryRepository.java`
2. Change the above constant values to the actual user ID and tenant ID created in SaaSus Platform
3. Save the file

:::info
The actual user ID and tenant ID can be confirmed from the SaaSus Platform management screen.
:::

---

### Step 5: Integrate and Compress Source Code

Because the source code will be uploaded in Step 6, collect and compress it into a ZIP file using the shell script below.

```bash
bash java_files_collector.sh <path to your application>
```

Example:

```bash
cd /Workshop/implementation-sample-smart-api-gateway
bash java_files_collector.sh src/main/java/implementsample
```

A `java_files_archive.zip` file is created.  
Please download this file.

This completes the configuration within the SaaS application.

---

### Step 6: Upload the ZIP File

1. Access the Smart API Gateway feature screen in the SaaS Development Console.

2. Upload the generated ZIP file from the screen.

---

### Step 7: Permission & Infrastructure Settings

1. Go to the **Permission tab** and create **CloudFormation for Assume Role**.
2. Register the **Role ARN** and **External ID** you created.
3. Register the **VPC ID** and **Subnet IDs** of the VPC in which you will create PrivateLink (Network Load Balancer).
4. Register the **ALB ARN** of your Application Load Balancer.  
   :::info
   Make sure you enter **multiple Subnet IDs** for the Subnet IDs.  
   :::

When the setup is complete, the infrastructure connecting the SaaSus Platform and your environment will be created.

---

### Step 8: Publish and Access the API

1. **Publish the API**
2. You can access it via the domain for the API endpoint.

#### How to Access the API

- **API Key** is required to access the API. Generate an API Key in the **Tenant Management Screen** of the SaaS Operation Console and use it for access.
- Check the API methods in **Throttling&Role** under the method path.
- Access the domain of the API endpoint as follows:

#### SaaSus Identity Integration

Smart API Gateway enables fine-grained access control and data filtering by integrating with **SaaSus Identity**, utilizing tenant ID, environment ID (ENV ID), and user ID.

- **Tenant ID**: Used to access tenant-specific data in a multi-tenant environment
- **Environment ID (ENV ID)**: Used for environment-specific data access such as development, staging, and production environments
- **User ID**: Used for data retrieval and operation restrictions tied to specific users

In the implementation example, the inventory management API uses SaasusIdentity object to obtain tenant ID and user ID, enabling fine-grained access control and data filtering according to tenant and user.

#### Access Example

```sh
$ curl -v -X GET https://<domain>/<api method path> -H 'x-api-key:<issued API Key>'
```

#### API Access Examples

The following are examples of API access utilizing tenant ID and user ID through SaaSus Identity integration:

**Get all inventory (filtering by tenant):**
```sh
$ curl -X GET https://<domain>/inventory-service/get-inventory -H 'x-api-key:<tenant API Key>'
```

**Get user-specific inventory (filtering by user ID):**
```sh
$ curl -X GET https://<domain>/inventory-service/get-inventory-by-user -H 'x-api-key:<user API Key>'
```

**Response example:**
```json
[
  {
    "id": "inventory-001",
    "name": "Product A",
    "inventoryManagerId": "e47ac10b-58cc-4372-a567-0e02b2c3d480",
    "quantity": 10
  }
]
```

In this example, inventory data is filtered based on tenant ID and user ID obtained from the SaasusIdentity object.


### Step 9: Throttling Settings

- From **Throttling&Role**, select the target method path and configure the throttling settings.
- For testing, set a limit of **2 requests per 1 minute**.
- When the settings are complete, the API access restriction is applied.
- Make multiple accesses to verify that throttling works.

:::info

- Throttling settings can be applied by setting the **number of requests within a specified range (seconds)**.
  - **Tenant-based throttling**
    - The limit is applied to the **total number of API calls** made with both the tenant's API key and the user's API key.
  - **User-based throttling**
    - With the tenant's API key, **API calls can be made without limit**.
    - When using a user's API key, **the number of API calls per user** is restricted.

:::

### Step 10: Authorization (Role) Settings

- For testing, create a role called "general user" in the **Role Definitions** of the SaaS Development Console.
- Role-based authorization requires a user's **API Key**. Create a user in the **User Management Screen** of the SaaS Operation Console and issue an API Key.
- From **Role Management** in the SaaS Operation Console, assign the created "general user" role to the user.
- From **Throttling&Role**, select the target method path and configure the SaaS administrator role.
- Once the settings are complete, API access restrictions based on roles are applied.
- Use the user's API key to check the operation of role-based authorization.

:::info

- Role-based authorization is controlled by the user's role, so it only applies to the user's API Key.
- To issue a user's API key, the user must belong to a tenant.
- The tenant's API Key can be used to access the API regardless of the assigned role.

:::

### Step 11: Domain Settings

- Configure the domain from **Custom Domain**.
- Add the displayed CNAME record to your own DNS server.
- After domain configuration is complete, the domain for the API endpoint is updated.
- You can then access the API via the newly configured domain.

### Step 12: IP Restriction Settings

- Set IP restrictions in the **Tenant Management Screen** of the SaaS Operation Console.
- After configuring IP restrictions, the API can only be accessed from the specified IP addresses.

### Deleting the Test Environment

- Log back in to the VSCode environment and run the following commands:
- Retrieve the `vpc endpoint service id` created from the `t-<tenantid>-saasus-setup-private-link-on-saas` CloudFormation resource
- Configure `aws cli` (for example, using `aws configure`) to set your access key and secret key
- Execute `reject_vpc_endpoints.sh <vpc endpoint service id>` to reject the endpoint connection for that `vpc endpoint service id` (failing to do so will result in an error when deleting CloudFormation)
- Delete the CloudFormation stack `t-<tenantid>-saasus-setup-private-link-on-saas`
- Delete the CloudFormation stack for the SaaS sample

```

```

---

# Smart API Gateway Feature

URL: https://www.prisma.io/docs/part-4/smart-api-gateway-features/overview

### Smart API Gateway Feature Overview

In API development, there are typically many considerations beyond implementing business logic, such as authentication and authorization, throttling, protection against external attacks, API schema management, and publishing and updating API documentation. Additionally, maintaining and operating endpoints for API exposure becomes necessary. The Smart API Gateway feature of the SaaSus Platform is designed to enable easy development and construction of APIs with minimal knowledge and expertise in API building, especially when converting existing web-based packaged software or standalone web applications into SaaS solutions. With Smart API Gateway, management of API endpoints and provision to end-users becomes simplified. Note that the Smart API Gateway feature is available across **all plans** of the SaaSus Platform.

:::info
If you wish to watch the sample demo video, see a demonstration of the Smart API Gateway feature, get support for tutorials, gather information for adoption, or discuss any technical queries regarding implementation, please contact us through the following support request form:

[Smart API Gateway by SaaSus Platform Support Request Form](https://forms.gle/XhFD9fCQv1zVGyRT9)<br/>
:::

### Image When Not Using the Smart API Gateway

When the Smart API Gateway is not used, you have to define the necessary APIs, handle authentication and authorization, implement throttling, and develop the APIs themselves.

![api-gateway-function/api-gateway-function-2](/ja/img/part-4/smart-api-gateway-features/api-gateway-function-2.png)

### Smart API Gateway Architecture

It provides the necessary features for APIs and securely exposes your existing processes as APIs with minimal changes.

![api-gateway-function/api-gateway-function-1](/ja/img/part-4/smart-api-gateway-features/api-gateway-function-1.png)

### Prerequisites

- The application targeted for API implementation must be a **Java Web Application running on AWS**
- The application must be **operating under an Application Load Balancer**

:::info
Currently, this feature is only available with the Java SDK.<br/>
Support for other SDKs will be gradually provided in the future.
:::

### Important Notes

When using the Smart API Gateway feature, the following AWS resources will be created in your SaaS environment, which will incur additional AWS fees.

- **Network Load Balancer**

  - 1 load balancer x 0.0243 USD x 730 hours (1 month) = 17.74 USD
  - **Additional fees**: LCU-based charges may apply.

- **PrivateLink (VPC Endpoint)**
  - 1 VPC endpoint x 2 ENIs per VPC endpoint x 730 hours (1 month) x 0.014 USD = 20.44 USD (monthly ENI cost per endpoint)
  - **Additional fees**: Data transfer fees may apply depending on the volume.

---

# Smart MCP Server Feature

URL: https://www.prisma.io/docs/part-4/smart-api-gateway-features/smart-mcp-server-overview

:::info Support
If you would like to view sample demo videos, feature demonstrations, tutorial support, information gathering for implementation consideration, or technical consultation regarding implementation, please contact us through the support request form below.

[Smart MCP Server by SaaSus Platform Support Request Form](https://forms.gle/DVDqrcNc525E9GG68)
:::

## What is Smart MCP Server Feature

The Smart MCP Server feature automatically provides APIs published through the Smart API Gateway feature as Model Context Protocol (MCP) servers. This enables AI agents and LLMs (Large Language Models) to directly call APIs through remote MCP Servers that work in conjunction with API publishing via Smart API Gateway. This allows existing APIs to be instantly provided in a format usable by AI agents, accelerating AI-driven application development.

## Feature Overview

### Automatic MCP Server Deployment
- **Simultaneous deployment**: When an API is published via Smart API Gateway, the MCP Server is automatically deployed simultaneously
- **No additional configuration required**: MCP Server configuration is unnecessary once Smart API Gateway feature setup is complete
- **Schema updates**: Changes to API definitions are automatically reflected in the MCP Server

## Supported AI Services

Currently, the Smart MCP Server feature can be verified with the following AI services:

### OpenAI Playground
- **Support status**: ✅ Verified working
- **Usage method**: Add as MCP Server from Tools
:::caution
A paid OpenAI account is required
:::

## Tutorial

### Overview

**Duration**: Approximately 15-20 minutes  
**Prerequisites**: API must already be published via Smart API Gateway feature

:::warning Important Prerequisites
Before starting this tutorial, you must have already published an API using the Smart API Gateway feature.<br/>
If you haven't completed the setup yet, please first complete the [Smart API Gateway feature setup procedure](./manual.mdx).
:::

<details>
<summary>📋 Smart MCP Server Feature Tutorial (Click to expand)</summary>
<div>

This tutorial explains the procedure for setting up APIs published via Smart API Gateway feature as MCP Servers that can be used by AI services.


---

## Step 1: Confirm MCP Server Endpoint

1. Log in to the [SaaS Development Console](https://settings.console.saasus.io/dashboard)
2. Select **Smart API Gateway** from the left menu
3. Confirm that the API is in a published state
4. When you scroll down the screen, the following information will be displayed, so please note it down:

- **MCP Server Endpoint**: The endpoint for AI services to connect to

![smart-mcp-server-tutorial-2](/img/api-gateway-function/smart-mcp-server-tutorial-2.png)

---

## Step 2: Confirm API Key

1. Log in to the [SaaS Operation Console](https://saasadmin.console.saasus.io/dashboard)
2. Select **Users** from the left menu
3. Click the **API Key Management button** in the Actions column for a specific user
4. Note down the API key displayed in the dialog (if not yet issued, please issue a new one)

![smart-mcp-server-tutorial-3](/img/api-gateway-function/smart-mcp-server-tutorial-3.png)

## Step 3: Prepare OpenAI Playground

:::warning Important Notice
Using OpenAI Playground requires a **paid OpenAI account**. It cannot be used with a free account.<br/>
Additionally, usage fees are incurred for each API call, so please manage your budget appropriately with proper settings.
:::

### OpenAI Account Preparation

This step confirms the prerequisites for using OpenAI Playground and performs necessary account setup.

#### 1. OpenAI Account Creation/Login

1. Access [OpenAI Platform](https://platform.openai.com/)
2. Navigate to the account creation screen from "Sign up"
3. Enter required authentication information such as email address and password, and perform email verification
4. Enter your name, date of birth, Organization name, and "What best describes you?"
5. Fill in "Invite your team" and "Make your first API call" according to your situation
6. For "Add some API credits", click "I'll buy credits later" as we'll set this up later

Registration is now complete.

#### 2. Payment Method Setup (Required)

:::danger Important
Setting up a payment method is **required** to use OpenAI Playground.
:::

1. Log in to [OpenAI Platform](https://platform.openai.com/)
2. Click the account icon in the upper right and select "Your Profile" from the displayed menu
3. Select "Billing" from the side menu
4. Add a valid credit card from "Add payment details" and charge credits

#### 3. Confirm OpenAI Playground Access

1. Access [OpenAI Playground](https://platform.openai.com/playground)
2. Confirm that the chat screen displays normally
3. Send a simple message to confirm availability

---

## Step 4: Operation Verification with AI Services

:::info
Currently, only operation verification with OpenAI Playground is supported.
:::

### OpenAI Playground

1. Access [OpenAI Playground](https://platform.openai.com/playground)
2. Click **Create...** in the **Tools** section
3. Select **MCP Server**
  ![smart-mcp-server-tutorial-4](/img/api-gateway-function/smart-mcp-server-tutorial-4.png)
4. Select **Add New**
  ![smart-mcp-server-tutorial-5](/img/api-gateway-function/smart-mcp-server-tutorial-5.png)
5. Enter values in the displayed form:
  - **URL**: The **MCP Server endpoint** you noted down
  - **Label**: Any label
  - **Authentication**: Select **Custom headers**
    - Key: **x-api-key**
    - Value: The **API key** you noted down
  ![smart-mcp-server-tutorial-6](/img/api-gateway-function/smart-mcp-server-tutorial-6.png)
6. Click **Connect**
7. Upon success, a list of available APIs will be displayed in Tools
　![smart-mcp-server-tutorial-7](/img/api-gateway-function/smart-mcp-server-tutorial-7.png)
8. Click **Add**
9. Confirm that the added MCP Server is displayed in the **Tools** section
　![smart-mcp-server-tutorial-8](/img/api-gateway-function/smart-mcp-server-tutorial-8.png)

---

## Step 5: API Call Test from AI Services

### OpenAI Playground

1. In the chat, enter "Tell me what operations are available with (**MCP Server name**)"
  ![smart-mcp-server-tutorial-9](/img/api-gateway-function/smart-mcp-server-tutorial-9.png)
2. When you receive a response saying "Retrieves inventory information for a specific tenant based on the given inventory ID", instruct it to retrieve inventory information by providing the inventory ID
3. When the API to call and "Approve" button are displayed, click it
  ![smart-mcp-server-tutorial-9](/img/api-gateway-function/smart-mcp-server-tutorial-10.png)
4. Confirm if the response is as expected
  ![smart-mcp-server-tutorial-10](/img/api-gateway-function/smart-mcp-server-tutorial-11.png)

## Step 6: Error Troubleshooting

### Common Issues and Solutions

#### 1. Cannot connect to MCP Server

**Symptom**: AI service cannot connect to MCP Server

**Solution**:
- Confirm that the API Key is set correctly
- Check network connection

#### 2. API call fails

**Symptom**: API calls via MCP Server result in errors

**Solution**:
- Confirm that the API published via Smart API Gateway feature works normally without going through MCP Server
- Check API Key permission settings
- Check if throttling limits have been reached

#### 3. Tools not displayed

**Symptom**: Tool list is not displayed in AI service

**Solution**:
- Confirm that the API is normally published via Smart API Gateway feature
- Clear browser cache and retry

---

## Summary

In this tutorial, you learned how to publish APIs for AI services using the Smart MCP Server feature.

### Completed Content

- Confirming MCP Server endpoint
- Connection setup in AI service (OpenAI Playground)
- API call testing

:::info
If you have questions about the Smart MCP Server feature or need support, please contact us through the [support request form](https://forms.gle/DVDqrcNc525E9GG68).
:::

</div>
</details>
---

# Authentication Method Settings

URL: https://www.prisma.io/docs/part-4/user-authz-settings/authentication-method-settings

This page describes how to configure the following authentication-related features in the **Authentication** tab of the **Advanced Settings** screen in the SaaSus Platform:

- Password requirements  
- Enabling Google login  
- Allowing self-signup  
- Remembering trusted devices  

## Configuring Password Requirements

You can configure password requirements such as minimum length and required character types (numbers, symbols, uppercase, lowercase).

### Configuration Screen

![Password Requirement Settings](/img/part-4/user-authz-settings/authentication-method-settings/auth-password-policy.png)

## Enabling Google Login

To enable Google login, you must first configure settings in **Google Cloud Console** and register the OAuth client information in the SaaSus Platform.

For detailed steps, see [Google Linkage](/docs/part-4/user-authz-settings/google-linkage).

Once setup is complete, you can enable Google login from the **Authentication Settings** tab.

## Allowing Self Signup

You can choose whether users can register themselves from the login screen.

- **Enabled**: A “Sign Up” link appears on the login screen.  
- **Disabled**: Users must be invited by an administrator.

## Remembering Trusted Devices

:::info
This feature is only valid when **multi-factor authentication (MFA)** is implemented in your SaaS application.  
For details on API usage and implementation examples, see [Implementing MFA (API Server)](/docs/part-6/implementation-guide/implementing-multi-factor-authentication-apiserver).
:::

You can configure whether to remember a user’s trusted device.  
If MFA is enabled and the device is remembered, the user can skip MFA on subsequent logins.

### Configuration Screen

![remember-trusted-devices](/img/part-4/user-authz-settings/authentication-method-settings/remember-trusted-devices.png)

**Available options are as follows:**  

| Option                  | Description |
|------------------------|------------------------------------------------------|
| **Always Remember**     | Automatically remembers **all user devices**, skipping MFA for subsequent logins. |
| **User Opt-in**         | Displays a **"Remember this device"** checkbox on the login screen.<ul><li>Only devices for which users select this option will be remembered.</li><li>MFA verification will be skipped for subsequent logins on those devices.</li></ul> |
| **Don't Remember**     | **MFA is required for every login.** |


---

# User Attributes

URL: https://www.prisma.io/docs/part-4/user-authz-settings/declare-additional-attribute-to-user

## Declare Additional Attribute To User

In the SaaSus Platform, initially managed SaaS users only have a user ID (UUID) and an email address. You can set additional attributes for the user if needed.

Select "User Attribute Definition" from the side menu.

![01](/img/part-4/user-authz-settings/declare-additional-attribute-to-user/declare-additional-attribute-to-user-01.png)

SaaS designers need to consider user attributes that are managed on both the SaaSus Platform side and the SaaS side, and consider which attributes should be managed on the SaaSus Platform side and which attributes should be managed on the SaaS side.

For example, if you want to manage all user information on the SaaSus Platform side, define the necessary additional attributes on the SaaSus Platform. However, there are cases where you do not want to manage important information such as personal information on the SaaSus Platform side, or where you want to perform various aggregations based on additional user attributes. In that case, only authentication is required on the SaaSus Platform side, and user information is managed on the SaaS side based on the user master. By linking the UUID with the authentication information on the SaaSus Platform side, you can respond flexibly.

This time, let's define an attribute called "username".

Click the "+Create User Attribute" button to display a popup for creating user attributes.

The attribute name is used as a key for identification on the SaaS application (program) side. Therefore, we recommend that you enter it in alphabetical characters.

Use the display name to help you understand what the attribute is.

Type specifies the data type.

This time, perform the following settings.

- Attribute Name: username
- Display Name: Username
- Type: String

When you have completed your entries, click the "Create" button.

![02](/img/part-4/user-authz-settings/declare-additional-attribute-to-user/declare-additional-attribute-to-user-02.png)

Added user attributes.

![03](/img/part-4/user-authz-settings/declare-additional-attribute-to-user/declare-additional-attribute-to-user-03.png)
---

# Google Linkage

URL: https://www.prisma.io/docs/part-4/user-authz-settings/google-linkage
## Summary Explanation

To incorporate Google linkage, it is necessary to create an OAuth client in your Google Cloud Platform account and set up the linkage with SaaSus Platform. By setting up the linkage with SaaSus Platform, the button 'Sign in with Google' will appear on the sign-in page provided by the SaaSus Platform, and Google linkage can be enabled. It should be noted that to make the app publicly available, it is necessary to apply to Google. It takes about one week to review the application after submission. (If there are any mistakes, guidance will be sent by email, so please take corrective action)

Google linkage procedure consists of:

- Creating OAuth Client in Google Cloud Platform
- Linking Google Cloud Platform and SaaSus Platform account
- Confirmation on Google Authentication Performance
- Application for Usage

## Creating an OAuth Client in Google Cloud Platform

### Confirming the Information for Google Linkage

Sign in to the SaaS Development Console. Open "Authentication Authorization" > "Advanced Settings". Check the Google linkage in Authentication tab.


![google-linkage-1](/img/part-4/user-authz-settings/google-linkage/google-linkage-1.png)

Make a note of the following items as they are required when creating an OAuth client in Google:

- Approved JavaScript Origin
- Authorized Redirect URI

![google-linkage-2](/img/part-4/user-authz-settings/google-linkage/google-linkage-2.png)

### Agreeing to the Use of OAuth

Sign in to Google Cloud Platform account (create a Google Cloud Platform account if you don’t have one) for managing Google linkage.

Create a new project for Google linkage.

Open <a href="https://console.cloud.google.com/projectcreate?previousPage=%2Fprojectselector2%2Fhome%2Fdashboard%3Fhl%3Dja%26organizationId%3D0%26supportedpurview%3Dproject&organizationId=0&hl=ja&supportedpurview=project" target="_blank">New Project</a>, and create a new project.

Project Name: GoogleOAuth (or any other easy-to-understand name)

![google-linkage-3](/img/part-4/user-authz-settings/google-linkage/google-linkage-3.png)

Open 'APIs & Services' - 'OAuth Consent Screen'

![google-linkage-4](/img/part-4/user-authz-settings/google-linkage/google-linkage-4.png)

Select 'External' as User Type and press 'Create' button

![google-linkage-5](/img/part-4/user-authz-settings/google-linkage/google-linkage-5.png)


Input following information and select 'Save and Continue' button

- App Name: GoogleOAuth
- User Support Email: any email address
- Developer Contact Information: any email address

![google-linkage-6](/img/part-4/user-authz-settings/google-linkage/google-linkage-6.png)


Select 'Save and Continue'

![google-linkage-7](/img/part-4/user-authz-settings/google-linkage/google-linkage-7.png)


Add test users and select 'Save and Continue'
Only the users set here can login when the public status is 'Testing'

![google-linkage-8](/img/part-4/user-authz-settings/google-linkage/google-linkage-8.png)


### Creating OAuth Client

Open 'APIs & Services' - 'Credentials'

![google-linkage-9](/img/part-4/user-authz-settings/google-linkage/google-linkage-9.png)


Select 'Create Credentials' - 'OAuth client ID'

![google-linkage-10](/img/part-4/user-authz-settings/google-linkage/google-linkage-10.png)


Enter the following information and select 'Create' button:

- Application type: Web Application
- Name: GoogleOAuth (any easy-to-understand name is fine)
- Authorized JavaScript origins: ＜the value confirmed on SaaS Development Console＞
- Authorized redirect URIs: ＜the value confirmed on SaaS Development Console＞

![google-linkage-11](/img/part-4/user-authz-settings/google-linkage/google-linkage-11.png)


The OAuth client has been created.
Make a note of the following items for setting up SaaS Development Console.  
※ It is recommended to select 'Download JSON' and save the downloaded file.

- Client ID
- Client Secret

![google-linkage-12](/img/part-4/user-authz-settings/google-linkage/google-linkage-12.png)


## Linking Google Cloud Platform and SaaSus Platform Account

Enter the following and select 'Save' button:

- Client ID: ＜The value confirmed on the screen after creating the OAuth client＞
- Client Secret: ＜The value confirmed on the screen after creating the OAuth client＞

![google-linkage-13](/img/part-4/user-authz-settings/google-linkage/google-linkage-13.png)


If 'Linked' is displayed, then the operation is completed.

![google-linkage-14](/img/part-4/user-authz-settings/google-linkage/google-linkage-14.png)


## Confirming Google Authentication Operation

We will confirm the operation of the 'Sign with Google' button displayed on the sign in screen.

![google-linkage-15](/img/part-4/user-authz-settings/google-linkage/google-linkage-15.png)


About 'Sign in with Google' operation:

- Screen Displayed
  - Sign in screen
  - New registration screen (when self-sign-up is enabled)
- Actions when Sign in with Google
  - If self-sign-up is enabled  
    If the account does not exist, an account will be created automatically and signed in.
  - If self-sign-up is not enabled  
    If the account does not exist, it will not sign in.

## Application for Use

Coming soon.

---

# Notification Email Content

URL: https://www.prisma.io/docs/part-4/user-authz-settings/notifymailcustomize

In the E-Mail Content tab of the <a href="https://settings.console.saasus.io/customize" target="_blank">Authentication Authorization > Advanced Settings</a>, you can customize the emails that are sent to users on authentication pages such as the sign in page.

## How to Customize Email Body

### Email Sent with a Temporary Password at New Registration
The strings `{####}` and `{username}` are required.

`{####}` will be replaced with the temporary password and `{username}` will be replaced with the user ID when sent.

#### Example

```
Thank you for your registration.
We will notify you of your user ID and temporary password.

User ID: {username}
Temporary Password: `{####}`

Please input the above temporary password on the following page and complete the sign-up.
https://auth.your.domain/sign-up-confirm

Please include your user ID when making inquiries.
```

When the above setting is made, the actual sent mail will be as follows:

```
Thank you for your registration.
We will notify you of your user ID and temporary password.

User ID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Temporary Password: xxxxxxxx

Please input the above temporary password on the following page and complete the sign-up.
https://auth.your.domain/sign-up-confirm

Please include your user ID when making inquiries.
```

### Email Resending Temporary Password at New Registration

The strings `{####}` and `{username}` are required.

`{####}` will be replaced with the temporary password and `{username}` will be replaced with the user ID when sent.

#### Example*

```
We will notify you of your user ID and temporary password.

User ID: {username}
Temporary Password: {####}

Please input the above temporary password on the following page and complete the sign-up.
https://auth.your.domain/sign-up-confirm

Please include your user ID when making inquiries.
```

When the above setting is made, the actual sent mail will be as follows:

```
We will notify you of your user ID and temporary password.

User ID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Temporary Password: xxxxxxxx

Please input the above temporary password on the following page and complete the sign-up.
https://auth.your.domain/sign-up-confirm

Please include your user ID when making inquiries.
```

### Email Sent with Verification Code for Password Reset

The string `{####}` is required.

`{####}` will be replaced with the verification code when sent.

#### Example

```
Thank you for your registration.
We will notify you of your verification code for password reset.

Verification Code: {####}

Please input the above verification code on the following page and reset your password.
https://auth.your.domain/recover-password-confirm
```

When the above setting is made, the actual sent mail will be as follows:

```
Thank you for your registration.
We will notify you of your verification code for password reset.

Verification Code: 111111

Please input the above verification code on the following page and reset your password.
https://auth.your.domain/recover-password-confirm
```

---

# Roles

URL: https://www.prisma.io/docs/part-4/user-authz-settings/role-definition

## Role Definition

Let's define the roles.

This role represents a role in various SaaS and is used as an authorization standard.

For example, if you have administrator privileges for each tenant, define a role such as "admin", and if you are a general user, assign a role such as "user".

"admin" has already been set up in SaaSus Platform, so this time we will define "user".

Click the "+Create Role" button to display the role creation popup.

Role names are used to identify roles within SaaS applications.

Write the display name so that you understand what its role is.

Now let's add a general user.

- Role Name: user
- Display Name: General User

![01](/img/part-4/user-authz-settings/role-definition/role-definition-01.png)

![02](/img/part-4/user-authz-settings/role-definition/role-definition-02.png)

The creation of the role is now complete.
---

# SAML Integration

URL: https://www.prisma.io/docs/part-4/user-authz-settings/saml-linkage

# SAML Integration Feature

## Overview

The SAML (Security Assertion Markup Language) integration feature allows your SaaS application to authenticate users through external identity providers.  
This enables tenants to use single sign-on (SSO) functionality and leverage their existing identity management systems.

## Configuration Steps

The SaaSus Platform SAML integration feature can work with various SAML 2.0 compatible identity providers.  
Here we explain the configuration steps using Microsoft Entra ID as a representative example of integration partners.  
Even if you use other identity providers, the basic concepts and configuration items are common.  

### 1. Obtain Entity ID/Reply URL
Execute the API to obtain **Entity ID** (`identity_provider_configuration.entity_id`) and **Reply URL** (`identity_provider_configuration.reply_url`)  
https://docs.saasus.io/docs/reference/auth-api#tag/authInfo/operation/GetSignInSettings

```json
{
    "identity_provider_configuration": {
        "domain": "xxxxxxxxxxxx.auth.ap-northeast-1.amazoncognito.com",
        "entity_id": "urn:amazon:cognito:sp:ap-northeast-1_xxxxxxxxxxxx",
        "redirect_url": "https://xxxxxxxxxxxx.auth.ap-northeast-1.amazoncognito.com/oauth2/idpresponse",
        "reply_url": "https://xxxxxxxxxxxx.auth.ap-northeast-1.amazoncognito.com/saml2/idpresponse"
    }
}
```
### 2. Microsoft Entra ID Configuration
Configure Microsoft Entra ID for SAML integration. Follow these steps:

1. Log in to Microsoft Entra ID  
[Microsoft Entra Admin Center](https://entra.microsoft.com/#home)

2. Create a new application  
    Go to Entra ID > Enterprise Apps and click `New application`  
    ![saml-linkage-image-1](/img/part-4/saml-linkage/saml-linkage-image-1.png)


3. Set the application name and click `Create`.  
    ![saml-linkage-image-2](/img/part-4/saml-linkage/saml-linkage-image-2.png)

4. Select Single sign-on.  
    ![saml-linkage-image-3](/img/part-4/saml-linkage/saml-linkage-image-3.png)

5. Select SAML.  
    ![saml-linkage-image-4](/img/part-4/saml-linkage/saml-linkage-image-4.png)

6. Edit Basic SAML Configuration and enter the following information  
   - **Identifier (Entity ID)**: Enter the Entity ID obtained earlier.
   - **Reply URL**: Enter the Reply URL obtained earlier.

    ![saml-linkage-image-5](/img/part-4/saml-linkage/saml-linkage-image-5.png)

7. In Attributes & Claims settings, note the claim name set for `user.mail`.  
    ![saml-linkage-image-6](/img/part-4/saml-linkage/saml-linkage-image-6.png)

8. Note the `App Federation Metadata URL` from the SAML Certificate section.  
    ![saml-linkage-image-9](/img/part-4/saml-linkage/saml-linkage-image-9.png)

### 3. SaaSus Platform Configuration  
Configure SAML integration using the SaaSus API.  
Pass the following information to the API to set up SAML integration.  

- **provider_type**: "SAML"
- **metadata_url**: App Federation Metadata URL from Microsoft Entra ID
- **email_attribute**: Claim name noted from Microsoft Entra ID (e.g., `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`)

**API:** https://docs.saasus.io/docs/reference/auth-api#tag/tenant/operation/UpdateTenantIdentityProvider

```json
{
  "provider_type": "SAML",
  "identity_provider_props": {
    "metadata_url": "https://login.microsoftonline.com/xxxx-xxxx-xxxxx-xxxx-xxxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxxx-xxxx-xxxxx-xxxx-xxxx",
    "email_attribute": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
  }
}
```

### 4. Testing SAML Integration
1. Create login user in SaaSus  
    Create a user for the tenant that will use SAML integration from the SaaS operation console and assign roles.  
    The user's email address must match the email address set in Microsoft Entra ID.  

2. Verify sign_in_url  
    Use the SaaSus API to obtain the sign_in_url.  

**API:** https://docs.saasus.io/docs/reference/auth-api#tag/tenant/operation/GetTenantIdentityProviders
```json
{
    "saml": {
        "email_attribute": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
        "metadata_url": "https://login.microsoftonline.com/xxxx-xxxx-xxxxx-xxxx-xxxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxxx-xxxx-xxxxx-xxxx-xxxx",
        "sign_in_url": "https://auth.implementation-sample2.sandbox.dev.saasus.io/sign-in/saml/6PcH3PYyte8ZTDZ65ul5jE"
    }
}
```
3. External account login screen  
    Access the obtained sign_in_url.  
    ![saml-linkage-image-7](/img/part-4/saml-linkage/saml-linkage-image-7.png)

4. Login with Microsoft Entra ID  
    On the Microsoft Entra ID login screen, enter your username and password to log in.  
    Upon successful login, you will be redirected to the SaaS.  
    ![saml-linkage-image-8](/img/part-4/saml-linkage/saml-linkage-image-8.png)

## Notes

### User Group Configuration  
In Microsoft Entra ID, you can use the Users and Groups feature to assign users who will use SAML authentication to groups.  
This allows you to control access so that only users belonging to specific groups can access the SaaS application.

From Microsoft Entra Admin Center > Enterprise Apps > `Created Application` > Users and Groups, assign users who will access SaaSus Platform to groups.
---

# User Environment Definitions

URL: https://www.prisma.io/docs/part-4/user-authz-settings/user-env-definition

On SaaSus Platform, it is possible to set up user environment definitions. The environments defined here refer to the development, testing, and other environments that you have set up in your SaaS (customer) environment. Consider assigning attributes to the test environment that are in line with your SaaS phase.


## Checking User Environment Definitions

**Select `Environments` from the SaaS Development Console**

![user-env-definition-1](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-1.png)

Both system-registered environments and user-registered environments will be displayed. In the past, the system automatically registered environments with the names "dev" or "stg", but now only environments named "prod" are automatically registered.  

## Registering User Environment Definitions

**Click `Create Environment`**

![user-env-definition-2](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-2.png)

Set the ID, Environment Name, and Display Name. Please set the ID to be unique.

![user-env-definition-3](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-3.png)

The registered environment will be displayed.

## Updating and Deleting User Environment Definitions

![user-env-definition-4](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-4.png)

You can change the Environment Name and Display Name.

![user-env-definition-5](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-5.png)

You can delete an environment, but you cannot delete the system-registered environment named "prod".

## Assigning User Environment Definitions to Users

**Select `Roles` from the SaaS Operations Console**

![user-env-definition-6](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-6.png)

In the SaaS Development Console, we'll try searching based on the "Test Environment" that we created earlier. Since it hasn't been assigned to any users yet, it won't appear in the search results. This means that the users who can use the "Test Environment" on your SaaS are not yet registered on the SaaSus Platform.

**Click on `Assign Roles`**

![user-env-definition-7](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-7.png)

Enter the email address of the user who will be able to use the "Test Environment" on the SaaS side and click the Add button.

## Checking Users Who Have Been Assigned Environment Definitions

**Select `Users` from the SaaS Operations Console**

![user-env-definition-8](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-8.png)

By turning on the checkbox for "Show Test Environment Users", users who can use the "Test Environment" on the SaaS side will be displayed.

![user-env-definition-9](/img/part-4/user-authz-settings/user-env-definition/user-env-definition-9.png)

If you turn off the "Show Test Environment Users" checkbox, users who can use the "Test Environment" on the SaaS side will not be displayed. This is because this user is registered as a user who can use only the test environment.

---

# Role Management

URL: https://www.prisma.io/docs/part-5/adding-role-to-user

## Adding Role To User

Click "role Management" in the side menu.

You can assign roles to users on a per-tenant basis. In this example, we assume the **General User** role has already been created. First, we’ll assign this role to **User 1-1** and **User 1-2** in **Tenant Sample 1**, and then do the same for **User 2-1** and **User 2-2** in **Sample App Tenant 2**.

Select "Tenant Sample 1" from the "tenant" pulldown, and search for "General users" from the "role" pulldown.

First, let's give User 1-1 and User 1-2 the role of "General User" in "Tenant Sample 1".

Enter the above conditions and click "search".

![01](/img/part-5/adding-role-to-user/adding-role-to-user-01.png)

No one is displayed because there are no users for this role yet.

Grant the role of "General users" to User 1-1 and User 1-2.

Next, click "Grant role to user" in the upper right corner.

Select the email addresses of User 1-1 and User 1-2 and click "Add".

![02](/img/part-5/adding-role-to-user/adding-role-to-user-02.png)

Role added to user.

Next, let's assign the role of "General User" to User 2-1 and User 2-2, who belong to "Sample App Tenant 2".

To confirm that the role has been granted, click "User Management" in the side menu to open the user management screen.

![03](/img/part-5/adding-role-to-user/adding-role-to-user-03.png)

We have confirmed that the role has been granted to the user.
---

# Operations Console Overview

URL: https://www.prisma.io/docs/part-5/operations-console-overview

## 1. Purpose of the SaaS Operation Console

The SaaS Operation Console is designed for users responsible for daily administrative tasks and reviewing key information required for SaaS operations.

Typical use cases include:

- Viewing and managing user data associated with each tenant (customer organization)
- Reviewing and editing tenant basic and billing information
- Assigning or changing rate plans for each tenant

Intended users:

- Customer support representatives  
- Administrators of the SaaS operations team

## 2. Screen Layout and Main Menu Overview

Upon logging into the SaaS Operation Console, a navigation menu appears on the left side of the screen, giving access to all main features.

![01](/img/part-5/operations-console-overview/operations_console_overview-01.png)

Main menu structure:

| Menu                 | Description                                                                 |
|----------------------|-----------------------------------------------------------------------------|
| **Dashboard**         | Displays updates, announcements, and release notes.                         |
| **Users**   | Allows searching, registering, editing, and deleting users.                 |
| **Tenants** | Lets you view and edit basic and billing information for each tenant.       |
| **Roles**   | Assign roles to users.                                                      |
| **Pricing**| View rate plans applied to each tenant (creation/editing is done via the SaaS Development Console). |
| **Feedbacks**          | Displays a list of suggestions and requests submitted by users.             |

:::info
You can switch between the SaaS Operation Console and the SaaS Development Console using the dropdown at the top left of the screen. Chat support via Intercom is also available at the bottom right.
:::

## 3. Common Menus and Basic Operations

### Dashboard

- View announcements and platform update notices from SaaSus.

### Users

- Search, register, edit, and delete users.

### Tenants

- View and edit basic and billing information for each tenant.

### Roles

Manage user roles such as administrator or general user.  
Role definitions are created in the SaaS Development Console; here, you can assign or review them.

### Pricing

- View rate plans currently assigned to each tenant.
- Assign, change, or remove rate plans from tenants on this screen.
- Defining or editing rate plans is done in the SaaS Development Console.

### Feedbacks

- View a list of user-submitted suggestions or requests.
- Feedback is shown as-is and can be used for service improvements.
- Each entry includes a submission date.
---

# Setting Billing Information for Tenants

URL: https://www.prisma.io/docs/part-5/price-plan/price-plan-setting-000
## Setting Billing Address

Enter the billing information before setting up the price plan for tenants.  
Open the tenant management screen and click the edit button of the target tenant.

![](/img/part-5/price-plan/price-plan-setting-000/tenant.png)

Enter and save the billing information in the *Edit Billing Information*.

![](/img/part-5/price-plan/price-plan-setting-000/setting.png)

---

# Set a Pricing Plan for Tenants

URL: https://www.prisma.io/docs/part-5/price-plan/price-plan-setting-001
## Set Pricing Plan to take effect immediately

1. Go to Pricing Plan Settings in the SaaS Operations Console.
2. Click "Plan Settings" for the tenant for which you want to set a price plan.
3. Select a pricing plan from the select box.
4. For Reflection Date, select "Reflected immediately".
5. Click Save.
6. A confirmation message will be displayed. Check the contents and click "Save".

**\*When "Reflected immediately" is selected, the pricing plan will take effect about 5 minutes after the operation.**  
_For example, a billing plan is set at 9:00 am on December 28, 2022 → Reflected at 09:05:00 on December 28, 2022_

**For information on tax rate settings, please refer to this document: ([Tax Rate Settings](/docs/part-4/pricing-and-billing/tax-rate-settings))**

![plan](/img/part-5/price-plan/price-plan-setting-001/plan.png)
*Dialog that appears when you perform the operation in step 2 (operate here from step 3 onwards)*


***

## Schedule a Pricing Plan for the future

1. Go to Pricing Plan Settings in the SaaS Operations Console.
2. Click "Plan Settings" for the tenant for which you want to set a price plan.
3. Select a rate plan from the select box.
4. For Reflection Date, select "Date and time specification", then specify the desired date and time.
5. Click Save.
6. A confirmation message will be displayed. Check the contents and click "Save".

---

# Change Tenant Pricing Plan Settings

URL: https://www.prisma.io/docs/part-5/price-plan/price-plan-setting-002
## Set Pricing Plan to take effect immediately

1. Go to Pricing Plan Settings in the SaaS Operations Console.
2. Click "Plan Settings" for the tenant whose price plan you want to change.
3. Select a pricing plan from the select box.
4. For Reflection Date, select "Reflected immediately".
5. Click Change.
6. A confirmation message will be displayed. Check the contents and click "Change".

**\*When "Reflected immediately" is selected, the pricing plan will take effect about 5 minutes after the operation.**  
_Example, Change setting of pricing plan at 9:00 am on December 28, 2022 → Switch to 09:05:00 on December 28, 2022_

![plan-setting](/img/part-5/price-plan/price-plan-setting-002/plan-setting.png)
*A confirmation message about the changes will be displayed. Please check if there are any problems.*


***

## Schedule a Pricing Plan for the future

1. Go to Pricing Plan Settings in the SaaS Operations Console.
2. Click "Plan Settings" for the tenant whose price plan you want to change.
3. Select a pricing plan from the select box.
4. For Reflection Date, select "Date and time specification", then specify the desired date and time.
5. Click Change.
6. A confirmation message will be displayed. Check the contents and click "Change".

---

# Cancel the Tenant Pricing Plan

URL: https://www.prisma.io/docs/part-5/price-plan/price-plan-setting-003
## Behavior when working with Stripe

Canceling a pricing plan will cancel the corresponding Stripe subscription.  
Please note that no refunds will be given in that case.

## Cancel Pricing Plan Immediately

1. Go to Pricing Plan Settings in the SaaS Operations Console.
2. Click "Release" for the tenant whose pricing plan you want to release.
3. For Reflection Date, select "Reflected immediately".
4. Click Unlock.
5. A confirmation message will be displayed. Check the contents and click "Remove".

**\*When "Reflected immediately" is selected, the pricing plan will take effect about 5 minutes after the operation.**  
_Example, Cancellation setting of pricing plan at 9:00 am on December 28, 2022 → cancellation at 09:05:00 on December 28, 2022_

![plan-setting](/img/part-5/price-plan/price-plan-setting-003/plan-setting.png)
*If the cancellation setting is successful, the text (cancellation of plan under contract) is displayed as shown in the red frame in the image.*


***

## Schedule Cancellation of Pricing Plan

1. Go to Pricing Plan Settings in the SaaS Operations Console.
2. Click "Release" for the tenant whose pricing plan you want to release.
3. For Reflection Date, select "Date and time specification", then specify the desired date and time.
4. Click Unlock.
5. A confirmation message will be displayed. Check the contents and click "Remove".

---

# Canceling a Scheduled Change

URL: https://www.prisma.io/docs/part-5/price-plan/price-plan-setting-004
## About canceling a scheduled change

A schedule will be created when you select "Date and time specification" as the reflection timing during pricing plan setup, change, or cancellation.  
When the specified date and time comes, operations for setting, changing, and canceling rate plans are automatically performed based on the created schedule.  
You can cancel the change up to 10 minutes before the specified date and time by following the steps below.

1. Go to Pricing Plan Settings in the SaaS Operations Console.
2. Click “Cancel Schedule” for the tenant whose schedule you want to cancel.
3. A confirmation message will be displayed. If there is no problem, click "OK".

![plan-setting](/img/part-5/price-plan/price-plan-setting-004/plan-setting.png)
*If the scheduled change date and time in the red frame of the image is more than 10 minutes ahead, it will be possible to cancel the schedule*

---

# Pricing Plan Setting

URL: https://www.prisma.io/docs/part-5/price-plan
In the pricing plan settings of the SaaS operation console, you can set, change, or cancel the tenant's pricing plan.  
When working with Stripe, a subscription will be generated according to the set pricing plan, and billing will be processed automatically.

---

# Tenant Management

URL: https://www.prisma.io/docs/part-5/tenant-management

## Searching Tenants

You can search tenants using the following criteria:

**Searchable fields:**

- **ID or Tenant Name**: Text input

![Search screen](/img/part-5/tenant-management/tenant-search.png)

## Creating a New Tenant

Click the “+ Create Tenant” button in the top right to open the tenant creation window.

**Input fields:**

| Field Name                | Description                                                                |
|---------------------------|----------------------------------------------------------------------------|
| Tenant Name               | The name displayed in your service                                         |
| Tenant Attributes         | Optional predefined attributes (e.g., industry, contract type)             |
| Add a representative user | Select either `Add User` or `Select existing user` (radio)                     |

**If “Add User” is selected:**

| Field Name     | Description                                        |
|----------------|----------------------------------------------------|
| Representative E-mail Address  | Used as the login ID for the new user              |
| Temporary Password for Representative | One-time password used for initial login       |

**If “Select existing user” is selected:**

- Choose from a list of registered user email addresses (autocomplete input)

:::info

- The newly created representative user will be automatically assigned to the tenant with the `admin` role.
- If Stripe is integrated, billing emails will be sent to the **Representative E-mail Address**.

:::

![Create form](/img/part-5/tenant-management/tenant-create.png)

## Editing a Tenant

Click the "Edit" icon in the list to open the edit window.  
Edits are divided into two sections:

### Editing Basic Information

| Field Name                 | Description                                                             |
|----------------------------|--------------------------------------------------------------------------|
| Tenant Name                | Update the display name of the tenant                                   |
| Tenant Attributes          | Update predefined attributes (e.g., industry, contract type)            |
| Representative E-mail Address       | Select a user associated with the tenant as the representative address  |

:::info

- If Stripe is integrated, billing emails will be sent to this address.

:::

### Editing Billing Information

You can update information displayed on invoices.

| Field Name                     | Description                                                    |
|-------------------------------|-----------------------------------------------------------------|
| Tenant Name (for Invoice)     | Name that appears on the invoice                                |
| Address                       | Street address (e.g., block, lot, etc.)                         |
| Building name, room number, etc. | Building name, apartment, or room number                        |
| City                          | City, ward, town, or village                                    |
| State                         | State or region (e.g., prefecture in Japan)                     |
| Postal Code                   | Postal or ZIP code                                              |
| Country                       | Country name                                                    |
| Invoice Language              | Japanese / English (radio selection)                            |

![Edit form](/img/part-5/tenant-management/tenant-edit.png)

## Deleting a Tenant

Click the "Delete" icon to open a confirmation window.  

![Delete screen](/img/part-5/tenant-management/tenant-delete.png)

---

# Feedback Management

URL: https://www.prisma.io/docs/part-5/user-feedback

## Overview
This feature allows you to obtain feedback from users. By collecting opinions such as questions and requests for additional features from users who are actually using the SaaS, you can use this to improve your service.

## Comments
The SaaS administrator can reply to comments on the feedback.

## Votes
Users can vote on feedback. This allows to see the features that are most in demand by users.

## Status
You can set the status. This allows to communicate the progress of the development to the user.  
0: New  
1: Under consideration  
2: In progress  
3: Implemented  

## Usage
In order to use this feature, you need to implement a feedback manipulation function into your SaaS using the [Communication API](/docs/reference/communication-api).

For example, you would use APIs such as:

* [CreateFeedback](/docs/reference/communication-api#tag/feedback/operation/CreateFeedback)
  * Creates feedback
* [GetFeedbacks](/docs/reference/communication-api#tag/feedback/operation/GetFeedbacks)
  * Retrieves created feedback
* [CreateVoteUser](/docs/reference/communication-api#tag/feedback/operation/CreateVoteUser)
  * Allows other users to vote on feedback

You would use these APIs to implement the feedback function.

The collected feedback can be checked in the SaaS operation console.
![feedback-list](/img/part-5/user-feedback/feedback-list.png)

You can change the status and add comments.
![feedback-edit](/img/part-5/user-feedback/feedback-edit.png)

---

# User Activity History Log

URL: https://www.prisma.io/docs/part-5/user-management/user-activity-history-log

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

## Overview

The user activity history log enables you to check the history of user operations on the SaaS.

:::warning
The User Activity Log feature is not available for customers on the legacy Starter or Standard plans.  
To use this feature, you need to change to a new pricing plan.
:::

You can view the "action history log" in the Actions column of the SaaS Operations Console > User Management.

![users](/img/part-5/user-management/user-activity-history-log/users.png)
![activity-history-log](/img/part-5/user-management/user-activity-history-log/activity-history-log.png)

The history of the screen transitions by users on the SaaS is displayed in chronological order.
The log retention period is up to one month.

## Setup

When executing `GetUserInfo`, set the `Referer` or `X-SaaSus-Referer` header.
If both are set, `X-SaaSus-Referer` takes precedence.

Examples of SDK implementations for each language are as follows.

```mdx-code-block
<Tabs>
<TabItem value="php" label="PHP" default>
```

For example, if you are using [Laravel](https://github.com/laravel/laravel), it would look like this.

Use `AntiPatternInc\Saasus\Laravel\Middleware\Auth`.

```php
<?php
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;

// Run GetUserInfo inside Middleware\Auth
// Retrieve the "Referer" and "X-SaaSus-Referer" from the request headers and add them as headers when executing
Route::middleware(\AntiPatternInc\Saasus\Laravel\Middleware\Auth::class)->group(function () {
  Route::get('/users', 'App\Http\Controllers\UserApiController@index');
});
```

```mdx-code-block
</TabItem>
<TabItem value="nodejs" label="Node.js">
```

For example, if you are using [`Express`](https://github.com/expressjs/express), it would look like this.

Use `saasus-sdk.AuthMiddleware`.

```js
import express from "express";

import { AuthMiddleware } from "saasus-sdk";

const app = express();

app.use(
  // Run GetUserInfo inside AuthMiddleware
  // Retrieve the "Referer" and "X-SaaSus-Referer" from the request headers and add them as headers when executing
  ["/users"],
  AuthMiddleware
);

app.use(["/users"], usersRouter);
```

```mdx-code-block
</TabItem>
<TabItem value="java" label="Java">
```

```java
    @GetMapping(value = "/users", produces = "application/json")
    public ResponseEntity<?> getUsers(HttpSession session, HttpServletRequest request) throws Exception {
        AuthApiClient apiClient = new Configuration().getAuthApiClient();
        apiClient.setReferer(request.getHeader("Referer")); // Set the Referer header

        UserInfoApi userInfoApi = new UserInfoApi(apiClient);
        UserInfo userInfo = null;
        try {
            userInfo = userInfoApi.getUserInfo(getIDToken(request));
            System.out.println(userInfo);
        } catch (ApiException e) {
            e.printStackTrace();
            throw e;
        }
        System.out.println(userInfo.getTenants());

        String tenantId = userInfo.getTenants().get(0).getId();
        TenantUserApi tenantUserApi = new TenantUserApi(apiClient);
        Users users = null;
        try {
            users = tenantUserApi.getTenantUsers(tenantId);
            System.out.println(users);
        } catch (ApiException e) {
            e.printStackTrace();
            throw e;
        }

        return ResponseEntity.ok(users.getUsers());
    }
```

```mdx-code-block
</TabItem>
<TabItem value="go" label="Go">
```

For example, if you are using [`Echo`](https://github.com/labstack/echo), it would look like this.

Use `middleware.ExtractReferer`.

```go
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	"github.com/saasus-platform/saasus-sdk-go/ctxlib"
	"github.com/saasus-platform/saasus-sdk-go/generated/authapi"
	"github.com/saasus-platform/saasus-sdk-go/middleware"
	"github.com/saasus-platform/saasus-sdk-go/modules/auth"
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

var authClient *authapi.ClientWithResponses

func run() error {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	authClient, err = auth.AuthWithResponse()
	if err != nil {
		return fmt.Errorf("failed to create auth client: %w", err)
	}

	idTokenGetter := &middleware.IdTokenGetterFromAuthHeader{}
	authMiddleware := authMiddlewareEcho(idTokenGetter)

	e := echo.New()

	// Retrieve the "Referer" and "X-SaaSus-Referer" from the request headers and store in context
	// middleware.ExtractReferer must be executed before GetUserInfo
	e.Use(echo.WrapMiddleware(middleware.ExtractReferer))

	e.GET("/users", getUsers, authMiddleware)
	return e.Start(":80")
}

func authMiddlewareEcho(getter middleware.IDTokenGetter) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			// Execute GetUserInfo inside middleware.Authenticate
			// If the context holds Referer, add it as a header when executing GetUserInfo
			userInfo, err := middleware.Authenticate(c.Request().Context(), getter.GetIDToken(c.Request()))
			if err != nil {
				http.Error(c.Response().Writer, "Unauthorized "+err.Error(), http.StatusUnauthorized)
				return nil
			}

			c.Set(string(ctxlib.UserInfoKey), userInfo)
			return next(c)
		}
	}
}

```

```mdx-code-block
</TabItem>
<TabItem value="python" label="Python">
```

For example, if you are using [`FastAPI`](https://github.com/tiangolo/fastapi), it would look like this.

```python
import uvicorn
from typing import Union
from fastapi import FastAPI, Request, Depends, HTTPException, Header

from saasus_sdk_python import TenantUserApi
from saasus_sdk_python.callback.callback import Callback
from saasus_sdk_python.middleware.middleware import Authenticate
from saasus_sdk_python.client.client import SignedApiClient

from dotenv import load_dotenv

load_dotenv()
app = FastAPI()
auth = Authenticate()
callback = Callback()
api_client = SignedApiClient()

def fastapi_auth(request: Request) -> Union[dict, HTTPException]:
    auth_header = request.headers.get("Authorization", "")
    token = auth_header.replace("Bearer ", "") if "Bearer " in auth_header else ""
    referer = request.headers.get("Referer", "")
    # Execute GetUserInfo inside auth.authenticate
    # You can set the referer as an argument
    user_info, error = auth.authenticate(id_token=token, referer=referer)
    if error:
        raise HTTPException(status_code=401, detail=str(error))
    return user_info

@app.get("/users")
def get_tenant_users(auth_user: dict = Depends(fastapi_auth)):
    if not auth_user.tenants:
        raise HTTPException(status_code=400, detail="No tenants found for the user")

    tenant_id = auth_user.tenants[0].id

    try:
        tenant_user_info = TenantUserApi(api_client=api_client).get_tenant_users(tenant_id=tenant_id,
                                                                                 _headers=api_client.configuration.default_headers)

        return tenant_user_info.users
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=80)
```
```mdx-code-block
</TabItem>
</Tabs>
```
---

When sending HTTP requests from the SaaS screen to the SaaS, set the `Referer` or `X-SaaSus-Referer` header.

The `Referer` header is automatically set by the browser, but the path part of the URL may be omitted.
If the expected value is not set, manually set the `X-SaaSus-Referer` header.

```js
await fetch(url, {
  headers: {
    'X-SaaSus-Referer': window.location.href.split('?')[0]
  }
});
```

The activity history log displays the history of `GetUserInfo` executed with `Referer` or `X-SaaSus-Referer` headers. Therefore if a HTTP request is not sent to the SaaS or only HTTP requests that do not execute `GetUserInfo` are sent when navigating to a certain screen, the transition to that screen will not be recorded.
---

# Search, Edit, Create, or Assign Users to Tenants

URL: https://www.prisma.io/docs/part-5/user-management/user-crud

## Search Users

You can filter and search users using the following criteria:

**Available search filters:**

- **ID, Email Address, or Tenant Name**: Text input
- **Tenant**: Text box with autocomplete
- **Environment**: Select box
- **Role**: Select box
- **Display users who do not belong to a tenant**: Checkbox

![Search screen](/img/part-5/user-management/user-crud/user-search.png)

## Create a New User

Click the "Add User" button at the top right of the screen to open the user registration window.  
This button is implemented as a select box that allows you to choose from the following actions:

- **Add User**: Register a new user in the SaaSus Platform
- **Add to Tenant**: Assign an already registered user to an additional tenant

This section explains the input fields when using the **Add User** option.

**Input fields:**

| Field           | Description                                                                 |
|----------------|-----------------------------------------------------------------------------|
| E-mail Address  | Used as the user's login ID                                                 |
| Password        | Password for login                                                          |
| Tenant          | Select the tenant to associate the user with                                |
| User Attributes | Fill in predefined user attributes (e.g., Username, Department, Role, etc.) |

![Create form](/img/part-5/user-management/user-crud/user-create.png)


## Add Existing User to Tenant

Select **"Add to Tenant"** from the dropdown on the "Add User" button to open the tenant assignment window.

This allows you to associate an already registered user with another tenant.

**Input fields:**

| Field           | Description                                                               |
|----------------|---------------------------------------------------------------------------|
| E-mail Address  | Email address of the existing user to be added                            |
| Tenant          | Select the tenant to assign the user to                                   |
| User Attributes | Fill in predefined user attributes (e.g., Username, etc.)                 |

![Add to tenant](/img/part-5/user-management/user-crud/add-tenant-to-user.png)

## Edit or Delete a User

Click the "Edit" or "Delete" icon from the user list to perform the operation.

### Edit

Clicking the edit icon opens a window where user information can be modified.

**Editable fields:**

- E-mail Address  
- Password (re-entry)
- User Attributes (e.g., Username, Department, etc.)

![Edit screen](/img/part-5/user-management/user-crud/user-edit.png)

### Delete

Clicking the delete icon opens a confirmation window with two deletion options.

**Deletion options:**

- **Delete from Tenant**  
  The user will be removed only from the tenant associated with the selected row. Other tenant associations remain unaffected.

- **Delete from SaaSus**  
  The user will be completely removed from the SaaSus Platform and disassociated from all tenants.

![Delete window](/img/part-5/user-management/user-crud/user-delete.png)

**Notes:**

- If "Delete from SaaSus" is selected, the user is removed from all associated tenants.


## Related Links

To view user activity history,  
see [User Activity History Log](/docs/part-5/user-management/user-activity-history-log).
---

# Developer SDK/API Overview

URL: https://www.prisma.io/docs/part-6/developer-sdk-api-overview

## 1. SaaSus SDK / API Capabilities and Use Cases

| Domain                  | Primary Use Case                                                             |
|-------------------------|------------------------------------------------------------------------------|
| **Auth API**            | Obtain ID/access tokens, manage users/tenants, configure roles/attributes   |
| **Billing API**         | Configure Stripe integration                                                 |
| **Pricing API**         | Manage rate plans, tax rates, and metering definitions                      |
| **Communication API**   | Submit and retrieve user feedback                                            |
| **Apilog API**          | Retrieve API call logs                                                       |
| **Awsmarketplace API**  | Configure AWS Marketplace integration                                        |
| **Integration API**     | Configure Amazon EventBridge integration                                     |
| **ApiGateway API**      | Configure the Smart API Gateway                                              |

## 2. How to Retrieve and Use Authentication Information

All SaaSus API requests require the `SAASUSSIGV1` signature header.  
Use the following flow to generate the signature and obtain the `id_token`.

### 2.1 Generating the `SAASUSSIGV1` Signature Header

The signature algorithm is explained in detail in the [Getting Started](/docs/reference/getting-started-with-your-api) guide.  
Below is the basic header format:

```
Authorization: SAASUSSIGV1 Sig=<signature>, SaaSID=<SaaS ID>, APIKey=<API Key>
```

#### When Using the SDK

- The SDK **automatically adds the signature header** before sending requests.
- You do not need to manually implement code to generate `Sig`.

### 2.2 Obtaining and Using an ID Token (`id_token`)

1. Send a signed request to **`GET /v1/auth/credentials`** to retrieve the `id_token`, `client_id`, and `client_secret`.
2. The `id_token` is in **JWT format** and should be stored in browser `localStorage` or similar.
3. Pass the `id_token` as a parameter in user-related API calls like `GET /v1/auth/user-info`.

```bash
# 1) Retrieve id_token using a temporary code
TEMP_CODE="69e732d6-8ecc-45c4-c2eb-8438f7ffe775"
curl https://api.saasus.io/v1/auth/credentials?code=${TEMP_CODE} \
     -H "Authorization: SAASUSSIGV1 Sig=..., SaaSID=..., APIKey=..."
```

:::info
The temporary code `code` is included as a query parameter during login redirection.
:::

See the SDK example in  
[Implementing JWT Retrieval API](/docs/part-6/implementation-guide/implementing-authentication-using-saasus-platform-apiserver#211-jwt-retrieval-api)

```bash
# 2) Use id_token to retrieve user info
curl https://api.saasus.io/v1/auth/userinfo?id_token=<ID_TOKEN> \
     -H "Authorization: SAASUSSIGV1 Sig=..., SaaSID=..., APIKey=..."
```

See the SDK example in  
[User Info Retrieval API Example](/docs/part-6/implementation-guide/implementing-authentication-using-saasus-platform-apiserver#212-user-information-retrieval-api)

## 3. Use Case Reference Links

| Use Case             | API Reference                                                                                   | Tutorial Link                                                                 |
|----------------------|------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------|
| **Create Tenant**     | [Auth API – CreateTenant](/docs/reference/auth-api#tag/tenant/operation/CreateTenant)      | [Creating a Tenant](/docs/part-6/usecase/about-saas-user-accounts/create-tenant) |
| **Create User**       | [Auth API – CreateSaasUser](/docs/reference/auth-api#tag/saasUser/operation/CreateSaasUser) | [Implementation: Creating Users in SaaS App](/docs/part-6/usecase/about-saas-user-accounts#32-implementation-for-the-case-where-saas-have-user-creation-feature) |
| **Metering-related** | [Pricing API – metering tag list](/docs/reference/pricing-api#tag/metering)                 | [Metering API Sample & Usage (Laravel)](/docs/part-6/implementation-guide/metering-api-sample) |

## 4. SDK List

| Language    | SDK Repository Link |
|-------------|---------------------|
| Python      | [Python SDK GitHub](https://github.com/saasus-platform/saasus-sdk-python) |
| JavaScript  | [JavaScript SDK GitHub](https://github.com/saasus-platform/saasus-sdk-javascript) |
| Go          | [Go SDK GitHub](https://github.com/saasus-platform/saasus-sdk-go) |
| Java        | [Java SDK GitHub](https://github.com/saasus-platform/saasus-sdk-java) |
| PHP         | [PHP SDK GitHub](https://github.com/saasus-platform/saasus-sdk-php) |
| C#          | [C# SDK GitHub](https://github.com/saasus-platform/saasus-sdk-csharp) |

---

# Implementation Example Using Metering API

URL: https://www.prisma.io/docs/part-6/implementation-guide/example-implementation-using-metering-api
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Overview

Let's consider a SaaS with plans set up for metered billing based on the number of users and active users.

We will create a feature that allows tenant administrators to check the usage based on the date and metering units.

<details>
<br /><summary>Creating the Pricing Plan for This Implementation Example</summary>

## Creating the Pricing Plan

### Creating Meter Units

We will create Meter units for the number of users and active users.

1. Go to Pricing Plan -> Metering Units from the SaaS Development Console.
2. Click on "Metering Unit" at the top right.
3. Create meter units for the number of users and active users.

    ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-09.png)

    ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-10.png)

### Creating Pricing Units

We will create pricing units for the number of users and active users.

In this example, we are creating usage units, but when actually operating, consider creating tiered units or tiered usage units as referenced in the link below.

[About the Difference in Billing Calculation between Tiered Units and Tiered Usage Units](/docs/part-4/pricing-and-billing/tiered-unit)

1. Go to Pricing Plan -> Pricing Unit Settings from the SaaS Development Console.
2. In the Pricing Unit Settings screen, click the "▼" next to "Create Fixed Unit Pricing" and select "Create Usage Unit Pricing", then click the "Create Usage Unit Pricing" button.

   ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-03.png)
3. Set the pricing units for the number of users and active users.

   ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-04.png)

   ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-05.png)

### Creating Feature Menus

Create feature menus to set the created pricing units.

1. Go to Pricing Plan -> Feature Menu Settings from the SaaS Development Console.
2. Click on "Create Feature Menu" at the top right.
3. Create a feature menu with the pricing units for the number of users and active users set.

   ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-06.png)

### Creating the Pricing Plan

Create a pricing plan with the created feature menus set.

1. Go to Pricing Plan -> Pricing Plan Settings from the SaaS Development Console.
2. Click on "Create Pricing Plan" at the top right.
3. Create a pricing plan with the created feature menus set.

   ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-07.png)

## Applying the Pricing Plan

Apply the pricing plan from the SaaS Operation Console.

1. Click on Pricing Plan Settings in the SaaS Operation Console.
2. Click the "Plan Settings" button in the row of the tenant you want to apply the pricing plan to.
3. Set the created pricing plan and save it with the application date set to immediate effect.

   ![](/img/part-6/implementation-guide/example-implementation-using-metering-api/image-08.png)

After this, the pricing plan will be applied in 5 minutes.

</details>

## Implementation Sample

In the Laravel implementation sample, APIs for obtaining login user information and tenant information are omitted.

<details>
<br /><summary>React Implementation Sample</summary>

<Tabs>
<TabItem value="typescript" label="App.tsx">

```typescript
import { BrowserRouter, Route, Routes } from "react-router-dom";

import Auth from "./components/route/Auth.tsx";
import Tenant from "./components/route/Tenant.tsx";
import Callback from "./pages/Callback";
import UsageCheck from "./pages/UsageCheck.tsx";

function App() {
    return (
        <BrowserRouter>
            <Routes>
                <Route path="/callback" element={<Callback />} />
                <Route path="/" element={<Auth />}>
                    <Route path="/tenants/:tenantId" element={<Tenant />}>
                        <Route path="usage-check" element={<UsageCheck />} />
                    </Route>
                </Route>
            </Routes>
        </BrowserRouter>
    );
}

export default App;
```

</TabItem>
</Tabs>

<Tabs>
<TabItem value="typescript" label="Auth.tsx">

```typescript
import axios from "axios";
import React, { useEffect, useState } from "react";
import { Outlet } from "react-router-dom";

const LOGIN_URL = import.meta.env.VITE_LOGIN_URL;
const API_ENDPOINT = import.meta.env.VITE_API_URL;

const Auth: React.FC = () => {
    const [authUser, setAuthUser] = useState<User>()
    const [authUserFetching, setAuthUserFetching] = useState(true);
    // Fetching information of the logged-in user
    const getUserInfo = async () => {
        try {
            const jwtToken = window.localStorage.getItem("SaaSusIdToken");
            const res = await axios.get<User>(`${API_ENDPOINT}/api/userinfo`, {
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    Authorization: `Bearer ${jwtToken}`,
                },
                withCredentials: true,
            });
            // If unable to fetch logged-in user information (login not confirmed), redirect to login screen
            if (!res) {
                window.location.href = LOGIN_URL;
            } else {
                setAuthUser(res.data)
                setAuthUserFetching(false);
            }
        } catch {
            window.location.href = LOGIN_URL;
        }
    };

    useEffect(() => {
        (async () => {
            await getUserInfo();
        })()
    }, []);

    // Passing logged-in user information and user info update function as Outlet Context
    return authUserFetching ? <></> : <Outlet context={{ authUser, getUserInfo }} />;
};

export default Auth;

```

</TabItem>
</Tabs>

<Tabs>
<TabItem value="typescript" label="UsageCheck.tsx">

```typescript
import React, { useEffect, useState } from 'react';
import axios, { isAxiosError } from "axios";
import { useOutletContext } from "react-router-dom";
import { DateTime } from 'luxon';
import styled from "styled-components";
import { SubmitHandler, useForm, useWatch } from "react-hook-form";

// Defining interface for usage counts
interface UsageCount {
    count: number;
    date: string | undefined;
    month: string | undefined;
    timestamp: number | undefined;
    meteringUnitName: 'user_count' | 'active_user_count'; // Target meter names defined in the pricing plan creation
}

// Defining form schemas for different search types
interface MonthSearchFormSchema {
    type: 'month';
    month: string;
    date: null | undefined;
    meteringUnitName: null | undefined;
}

interface MonthMeteringUnitNameSearchFormSchema {
    type: 'month';
    month: string;
    meteringUnitName: string;
    date: null | undefined;
}

interface DateSearchFormSchema {
    type: 'date';
    date: string;
    month: null | undefined;
    meteringUnitName: null | undefined;
}

interface DateMeteringUnitNameSearchFormSchema {
    type: 'date';
    date: string;
    meteringUnitName: string;
    month: null | undefined;
}

type SearchFormSchema = MonthMeteringUnitNameSearchFormSchema | MonthSearchFormSchema | DateMeteringUnitNameSearchFormSchema | DateSearchFormSchema;

// Dictionary for metering unit names
const METERING_UNIT_NAME_DICT_ARRAY = [
    {
        key: 'user_count', // Target meter name for user count defined in the pricing plan creation
        displayName: 'Number of Users', // Display name for user count
    },
    {
        key: 'active_user_count', // Target meter name for active user count defined in the pricing plan creation
        displayName: 'Number of Active Users', // Display name for active user count
    },
]

const LOGIN_URL = import.meta.env.VITE_LOGIN_URL;
const API_ENDPOINT = import.meta.env.VITE_API_URL ?? "";

const UsageCheck: React.FC = () => {
    const { tenant } = useOutletContext<UserRouterContext & TenantRouterContext>();
    const [meteringUnitCountList, setMeteringUnitCountList] = useState<Array<UsageCount>>([]);
    const [targetMonthOrDate, setTargetMonthOrDate] = useState('');
    const jwtToken = window.localStorage.getItem("SaaSusIdToken");
    const { register, control, handleSubmit, formState: { isDirty, isValid }, getValues } = useForm<SearchFormSchema>();
    const searchType = useWatch({ control, name: 'type' });

    /**
     * Retrieve the metering unit count for the specified date
     * @param date
     * @param meteringUnitName
     */
    const fetchUsageCountOfSpecifiedDate = async (date: string, meteringUnitName: string) => {
        try {
            const res = await axios.get<UsageCount>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/${meteringUnitName}/date/${date}/count`, {
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${jwtToken}`,
                },
            })
            setMeteringUnitCountList([res.data]);
        } catch (e) {
            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {
                window.location.href = LOGIN_URL;
            }
        }
    }

    /**
     * Retrieve all metering unit counts for the specified month
     * @param month
     */
    const fetchAllUsageCountOfSpecifiedMonth = async (month: string) => {
        try {
            const res = await axios.get<Array<UsageCount>>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/month/${month}/count`, {
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${jwtToken}`,
                },
            })
            setMeteringUnitCountList(res.data);
        } catch (e) {
            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {
                window.location.href = LOGIN_URL;
            }
        }
    }

    /**
     * Retrieve all metering unit counts for the specified date
     * @param date
     */
    const fetchAllUsageCountOfSpecifiedDate = async (date: string) => {
        try {
            const res = await axios.get<Array<UsageCount>>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/date/${date}/count`, {
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${jwtToken}`,
                },
            })
            setMeteringUnitCountList(res.data);
        } catch (e) {
            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {
                window.location.href = LOGIN_URL;
            }
        }
    }

    /**
     * Retrieve the metering unit count for the specified month
     * @param month
     * @param meteringUnitName
     */
    const fetchUsageCountOfSpecifiedMonth = async (month: string, meteringUnitName: string) => {
        try {
            const res = await axios.get<UsageCount>(`${API_ENDPOINT}/api/tenants/${tenant.id}/metering/${meteringUnitName}/month/${month}/count`, {
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${jwtToken}`,
                },
            })
            setMeteringUnitCountList([res.data]);
        } catch (e) {
            if (isAxiosError<{type: string, message: string}>(e) && e.response && e.response.data.type === 'token_validation_error_expired') {
                window.location.href = LOGIN_URL;
            }
        }
    }

    useEffect(() => {
        const month = DateTime.now().toFormat('yyyy-MM');
        setTargetMonthOrDate(month);
        fetchAllUsageCountOfSpecifiedMonth(month);
    }, []);

    const onSearchSubmit: SubmitHandler<SearchFormSchema> = async (data) => {
        if (data.type === 'month') {
            if (!data.meteringUnitName) {
                await fetchAllUsageCountOfSpecifiedMonth(data.month);
            } else {
                await fetchUsageCountOfSpecifiedMonth(data.month, data.meteringUnitName);
            }
            setTargetMonthOrDate(data.month);
        } else {
            if (!data.meteringUnitName) {
                await fetchAllUsageCountOfSpecifiedDate(data.date);
            } else {
                await fetchUsageCountOfSpecifiedDate(data.date, data.meteringUnitName);
            }
            setTargetMonthOrDate(data.date);
        }
    }

    return (
        <div>
            <h2>Usage Check</h2>
            <form onSubmit={handleSubmit(onSearchSubmit)}>
                <label>Method of Specifying Search Target</label>
                <select {...register('type', {required: 'Please select.'})}>
                    <option></option>
                    <option value="month">Year-Month</option>
                    <option value="date">Year-Month-Day</option>
                </select>
                {searchType && (
                    <>
                        <label>{searchType === 'month' ? 'Target Year-Month' : 'Target Year-Month-Day'}</label>
                        <input {...register(searchType, { required: 'Required' })} />
                        <label>Metering Unit Name</label>
                        <select {...register('meteringUnitName')}>
                            <option></option>
                            {METERING_UNIT_NAME_DICT_ARRAY.map(({ key, displayName }) => (
                                <option key={key} value={key}>{displayName}</option>
                            ))}
                        </select>
                    </>
                )}
                <button type="submit" disabled={!isDirty || !isValid}>Search</button>
            </form>

            <h3>Search Target Date: {targetMonthOrDate}</h3>
            {METERING_UNIT_NAME_DICT_ARRAY.map(({key, displayName}) => {
                const formMeteringUnitName = getValues('meteringUnitName')
                return (!formMeteringUnitName || formMeteringUnitName && formMeteringUnitName === key) && (
                    <UsageCountWrapper key={key}>
                        <p>{displayName}：{meteringUnitCountList.find(({meteringUnitName}) => key === meteringUnitName)?.count ?? 0} cases</p>
                    </UsageCountWrapper>
                );
            })}
        </div>
    )
}


const UsageCountWrapper = styled.div`
    border-bottom: 1px solid #333;
`

export default UsageCheck;

```

</TabItem>
</Tabs>

</details>

<details>
<br /><summary>Laravel Implementation Sample</summary>

<Tabs>
<TabItem value="php" label="routes/api.php">

```php
Route::middleware(\AntiPatternInc\Saasus\Laravel\Middleware\Auth::class)->group(function () {
    Route::get('/userinfo', 'App\Http\Controllers\UserinfoController@index')->name('userinfo.index');
    
    Route::get('/tenant/{tenantId}', 'App\Http\Controllers\TenantController@show')->name('tenant.index');

    Route::get('/tenants/{tenantId}/metering/{meteringUnitName}/date/{date}/count', 'App\Http\Controllers\MeteringController@getCountOfSpecifiedDate')->name('metering.get-count-of-specified-date');
    Route::get('/tenants/{tenantId}/metering/{meteringUnitName}/month/{month}/count', 'App\Http\Controllers\MeteringController@getCountOfSpecifiedMonth')->name('metering.get-count-of-specified-month');
    Route::get('/tenants/{tenantId}/metering/date/{date}/count', 'App\Http\Controllers\MeteringController@getAllMeteringCountOfSpecifiedDate')->name('metering.get-all-unit-count-of-specified-date');
    Route::get('/tenants/{tenantId}/metering/month/{month}/count', 'App\Http\Controllers\MeteringController@getAllMeteringCountOfSpecifiedMonth')->name('metering.get-all-unit-count-of-specified-month');  
}
```

</TabItem>
</Tabs>

<Tabs>
<TabItem value="php" label="MeteringController.php">

```php
<?php

namespace App\Http\Controllers;

use AntiPatternInc\Saasus\Sdk\Pricing\Model\MeteringUnitMonthCount;

class MeteringController extends Controller
{
    /**
     * Retrieve the unit count for the specified date
     *
     * @param string $tenantId
     * @param string $meteringUnitName
     * @param string $date
     * @return array
     */
    public function getCountOfSpecifiedDate(string $tenantId, string $meteringUnitName, string $date)
    {
        $client = new \AntiPatternInc\Saasus\Api\Client();
        $pricingApi = $client->getPricingClient();
        $unitCount = $pricingApi->getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(
            $tenantId,
            $meteringUnitName,
            $date
        );

        return [
            'count' => $unitCount->getCount(),
            'date' => $unitCount->getDate(),
            'meteringUnitName' => $unitCount->getMeteringUnitName(),
        ];
    }

    /**
     * Retrieve the unit count for the specified month
     *
     * @param string $tenantId
     * @param string $meteringUnitName
     * @param string $month
     * @return array
     */
    public function getCountOfSpecifiedMonth(string $tenantId, string $meteringUnitName, string $month)
    {
        $client = new \AntiPatternInc\Saasus\Api\Client();
        $pricingApi = $client->getPricingClient();
        $unitCount = $pricingApi->getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(
            $tenantId, $meteringUnitName, $month
        );

        return [
            'count' => $unitCount->getCount(),
            'month' => $unitCount->getMonth(),
            'meteringUnitName' => $unitCount->getMeteringUnitName(),
        ];
    }

    /**
     * Retrieve all unit counts for the specified date
     *
     * @param string $tenantId
     * @param string $date
     * @return \AntiPatternInc\Saasus\Sdk\Pricing\Model\MeteringUnitDateCount[]
     */
    public function getAllMeteringCountOfSpecifiedDate(string $tenantId, string $date)
    {
        $client = new \AntiPatternInc\Saasus\Api\Client();
        $pricingApi = $client->getPricingClient();
        $allMeteringCount = $pricingApi->getMeteringUnitDateCountsByTenantIdAndDate(
            $tenantId, $date
        );

        return array_map(function ($unitCount) {
            return [
                'count' => $unitCount->getCount(),
                'date' => $unitCount->getDate(),
                'meteringUnitName' => $unitCount->getMeteringUnitName(),
            ];
        }, $allMeteringCount->getCounts());
    }

    /**
     * Retrieve all unit counts for the specified month
     *
     * @param string $tenantId
     * @param string $month
     * @return MeteringUnitMonthCount[]
     */
    public function getAllMeteringCountOfSpecifiedMonth(string $tenantId, string $month)
    {
        $client = new \AntiPatternInc\Saasus\Api\Client();
        $pricingApi = $client->getPricingClient();
        $allMeteringCount = $pricingApi->getMeteringUnitMonthCountsByTenantIdAndMonth(
            $tenantId, $month
        );

        return array_map(function ($unitCount) {
            return [
                'count' => $unitCount->getCount(),
                'month' => $unitCount->getMonth(),
                'meteringUnitName' => $unitCount->getMeteringUnitName(),
            ];
        }, $allMeteringCount->getCounts());
    }
}
```

</TabItem>
</Tabs>

</details>
---

# Implementing Authentication Using SaaSus Platform (API Server)

URL: https://www.prisma.io/docs/part-6/implementation-guide/implementing-authentication-using-saasus-platform-apiserver
When configuring the backend as an API server, the following implementations are necessary:
- Store the token (JWT), which is the authentication information for the SaaSus Platform, in the browser's local storage.
- SaaS Platform users authenticate themselves using JWT.
- The frontend is implemented with React, etc.
- The backend API server is implemented in PHP / TypeScript / Go / Python / C# / JAVA, etc.

# Process Flow (Login to User List Display)

![SaaSus Platform API Process Flow](/img/part-6/implementation-guide/implementing-authentication-using-saasus-platform-apiserver/SaaSus_PlatformAPI.png)


# Implementation Sample

## 1. Frontend Implementation

### 1.1. Description of the Implementation Sample

#### 1.1.1. Post-Authentication Redirect Screen

- [React implementation sample](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/pages/Callback.tsx)

When you log in from the login screen generated by the SaaSus Platform, the URL set as the post-authentication redirect is called.

To perform a test run using this implementation sample, set it as `http://localhost:3000/callback`.

![Post-Authentication Redirect](/img/part-6/implementation-guide/implementing-authentication-using-saasus-platform-apiserver/image-02.png)

At the post-authentication redirect, a temporary code necessary for obtaining authentication information is passed in the query parameter (code=xxxxx). Implement the process to obtain JWT using this temporary code and save it in local storage.

#### 1.1.2. Self-Signup Screen

- [React implementation sample](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/pages/SelfSignUp.tsx)

It is necessary to check if the user is logged in, so call the API to get user information and confirm that the user is logged in.  
Use the JWT stored in local storage for the API call.  
By being able to obtain user information, you can confirm that the user is logged in.

The process for self-signup should be implemented according to whether self-signup is used or not.  
If self-signup is not used, the screen for self-signup is not needed.

If self-signup is used, the process for self-signup will only be executed during the first login.  
Whether it is the first login can be determined by whether the logging-in user is linked to a tenant.

#### 1.1.3. User List Screen (Homepage)

- [React implementation sample](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/pages/UserPage.tsx)

Regarding the use of user information obtained from the /userinfo endpoint:

- **tenants array**:  
  In the design of your SaaS,  
  if it is fixed to 1 tenant per 1 user, use `tenants[0]` fixed.  
  If a user belongs to multiple tenants, it is necessary to decide which tenant to use.  
  Example: Users linked to multiple tenants will see a tenant selection screen after logging in to choose a tenant.

- **envs array**:  
  id(name)【1(dev), 2(stg), 3(prod)】  
  dev, stg, prod do not refer to your SaaS's environments.  
  Example: In your SaaS's production environment, if users use test users as a sandbox, use 1(dev), 2(stg). Normally, use 3(prod).

- **roles array**:  
  In the design of your SaaS,  
  if it is fixed to 1 role per 1 user, use `roles[0]` fixed.  
  If a user has multiple roles, an implementation to check all roles is needed.  
  Example: If it is possible to assign two permissions such as a general user and administrator,  
  when displaying an admin-only management screen, an implementation to reference all roles is needed.

### 1.2. How to Use the Implementation Sample

- [React](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/README.md)

## 2. Backend Implementation

### 2.1. Description of the Implementation Sample

#### 2.1.1. JWT Retrieval API
- [Go(echo) implementation sample](https://github.com/saasus-platform/implementation-sample-api-go/blob/main/main.go#L118)  
  `e.GET("/credentials", getCredentials)`
- [Python(FastAPI) implementation sample](https://github.com/saasus-platform/implementation-sample-api-python/blob/main/main.py#L85)  
  `@app.get("/credentials")`
- [Java(Maven) implementation sample](https://github.com/saasus-platform/implementation-sample-api-java/blob/main/src/main/java/implementsample/controller/SampleController.java#L85)  
  `@GetMapping(value = "/credentials", produces = "application/json")`
- [C#(.NET 8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet8/Program.cs#L148)  
  `app.MapGet("/credentials")`
- [C#(.NET Framework 4.8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet48/Controllers/MainController.cs#L80)  
  `[HttpGet, Route("credentials")]`

#### 2.1.2. User Information Retrieval API
- [Go(echo) implementation sample](https://github.com/saasus-platform/implementation-sample-api-go/blob/main/main.go#L180)  
  `e.GET("/userinfo", getMe, authMiddleware)`
- [Python(FastAPI) implementation sample](https://github.com/saasus-platform/implementation-sample-api-python/blob/main/main.py#L90)  
  `@app.get("/userinfo")`
- [Java(Maven) implementation sample](https://github.com/saasus-platform/implementation-sample-api-java/blob/main/src/main/java/implementsample/controller/SampleController.java#L131)  
  `@GetMapping(value = "/userinfo", produces = "application/json")`
- [C#(.NET 8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet8/Program.cs#L195)  
  `app.MapGet("/userinfo")`
- [C#(.NET Framework 4.8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet48/Controllers/MainController.cs#L127)  
  `[HttpGet, Route("userinfo")]`

#### 2.1.3. Self-Signup API

- [Go(echo) implementation sample](https://github.com/saasus-platform/implementation-sample-api-go/blob/main/main.go#L618")  
  `e.POST("/self_sign_up", selfSignup, authMiddleware)`
- [Python(FastAPI) implementation sample](https://github.com/saasus-platform/implementation-sample-api-python/blob/main/main.py#L372")  
  `@app.post("/self_sign_up")`
- [Java(Maven) implementation sample](https://github.com/saasus-platform/implementation-sample-api-java/blob/main/src/main/java/implementsample/controller/SampleController.java#L570")  
  `@PostMapping(value = "/self_sign_up", produces = "application/json")`
- [C#(.NET 8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet8/Program.cs#L632")  
  `app.MapPost("/self_sign_up")`
- [C#(.NET Framework 4.8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet48/Controllers/MainController.cs#L537")  
  `[HttpPost, Route("self_sign_up")]`

In order to confirm that the API request is from the user who logged into the SaaSus Platform, it is always necessary to confirm the login by retrieving the user information. The self-signup process is as follows:
  - Prerequisite) The user who self-signs up becomes the administrator of the new tenant:
    - a. Tenant creation
    - b. Link the logged-in user to the created tenant
    - c. Set the logged-in user as the admin of the tenant

#### 2.1.4. User List Retrieval API
- [Go(echo) implementation sample](https://github.com/saasus-platform/implementation-sample-api-go/blob/main/main.go#L192)  
  `e.GET("/users", getUsers, authMiddleware)`
- [Python(FastAPI) implementation sample](https://github.com/saasus-platform/implementation-sample-api-python/blob/main/main.py#L95)  
  `@app.get("/users")`
- [Java(Maven) implementation sample](https://github.com/saasus-platform/implementation-sample-api-java/blob/main/src/main/java/implementsample/controller/SampleController.java#L154)  
  `@GetMapping(value = "/users", produces = "application/json")`
- [C#(.NET 8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet8/Program.cs#L219)  
  `app.MapGet("/users")`
- [C#(.NET Framework 4.8) implementation sample](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/SampleWebAppDotNet48/Controllers/MainController.cs#L147)  
  `[HttpGet, Route("users")]`

It is always necessary to confirm the login by retrieving the user information to verify that the API request originates from the user that is logged into SaaSus Platform.

#### 2.2. How to use the implementation example
- [Go(echo)](https://github.com/saasus-platform/implementation-sample-api-go/blob/main/README.md)
- [Python(FastAPI)](https://github.com/saasus-platform/implementation-sample-api-python)
- [Java(Maven)](https://github.com/saasus-platform/implementation-sample-api-java)
- [C#(.NET 8)](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/README.md)
- [C#(.NET Framework 4.8)](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/README.md)

---

# Implementation using SaaSus Platform (Serverless)

URL: https://www.prisma.io/docs/part-6/implementation-guide/implementing-authentication-using-saasus-serverless

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

When configuring the backend as serverless, the following implementations are required:
- Store the token (JWT), which is the authentication information for the SaaSus Platform, in the browser's local storage.
- SaaS Platform users authenticate themselves using the JWT.
- The frontend is implemented with React, etc.
- The backend is implemented using serverless services such as Lambda.

# Flow (JWT Acquisition ~ Tenant Onboarding)

![](/img/part-6/implementation-guide/implementing-authentication-using-saasus-serverless/image-01.png)

# Implementation Samples

## 1. Frontend Implementation

### 1.1. Explanation of the Implementation Sample

#### 1.1.1. Post-Authentication Transition Destination Screen

After logging in from the login screen generated by the SaaSus Platform, the URL set as the post-authentication redirect will be called.

To test using this implementation sample, please set the redirect to `http://localhost:3000/callback`.

![](/img/part-6/implementation-guide/implementing-authentication-using-saasus-serverless/image-02.png)

After authentication, a temporary code (code=xxxxx) necessary for retrieving authentication information is passed in the query parameters of the redirect URL. Please implement a process to retrieve the JWT using this temporary code and save the JWT to local storage.

- [React implementation sample](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/pages/Callback.tsx)

#### 1.1.2. Tenant Onboarding Screen

It is necessary to check if the user is logged in. Therefore, implement as follows:
Set `jwttoken` to the JWT stored in local storage.
You can confirm that the user is logged in if data is retrievable.

After login confirmation, implement the screen according to whether self-signup is used or not.
  - With self-signup: Implement a screen for tenant onboarding.
  - Without self-signup: Implement a screen to display after login.

<Tabs>
<TabItem value="jsx" label="React">

```jsx
try {
  const jwtToken = window.localStorage.getItem('SaaSusIdToken');
  const apiConfig = new Configuration({
    accessToken: jwtToken || 'dummyToken',
    basePath: 'https://xxxxx.lambda-url.ap-northeast-1.on.aws',
  });

  const userInfoApi = new UserInfoApi(apiConfig);
  const { data } = await userInfoApi.getLoginUser();
  return data;
} catch (e: any) {
  return thunkAPI.rejectWithValue(e);
}
```

</TabItem>
</Tabs>

#### 1.1.3. User List Screen (Top Page)

- [React Implementation Sample](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/pages/UserPage.tsx)

### 1.2. How to Use the Implementation Sample

- [React](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/README.md)

## 2. Backend Implementation

### 2.1. Explanation of the Implementation Sample

#### 2.1.1. JWT Retrieval API


<Tabs>
<TabItem value="typescript" label="TypeScript">

```typescript
import { AuthClient } from "saasus-sdk";

export const handler = async (event: any): Promise<any> => {
  const authClient = new AuthClient();

  const code = event.queryStringParameters.code;

  const res = await authClient.credentialApi.getAuthCredentials(code);
  const token = res.data.id_token;

  return {
    statusCode: res.status,
    body: JSON.stringify({
      id_token: await token,
    }),
  };
};
```

</TabItem>
</Tabs>


#### 2.1.2. User Information Retrieval API

<Tabs>
<TabItem value="typescript" label="TypeScript">

```typescript
import { AuthClient } from "saasus-sdk";

export const handler = async (event: any): Promise<any> => {
  const authClient = new AuthClient();

  const token = event.headers.authorization.replace("Bearer ", "");
  const userinfo = await authClient.userInfoApi.getUserInfo(token);

  let response = "";
  if (userinfo.data.tenants.length == 0) {
    response = JSON.stringify({
      id: await userinfo.data.id,
      email: await userinfo.data.email,
      completed_sign_up: false,
    });
  } else {
    response = JSON.stringify({
      completed_sign_up: true,
    });
  }

  return {
    statusCode: userinfo.status,
    body: response,
  };
};
```

</TabItem>
</Tabs>

#### 2.1.3. Tenant Onboarding API
To confirm that the API request comes from a user logged into the SaaSus Platform, always confirm login by retrieving user information.

The self-signup process is as follows:

Prerequisite) The self-signup user becomes the administrator of the new tenant:
a. Create a tenant.
b. Link the logged-in user to the created tenant.
c. Set the logged-in user as the administrator of the tenant.

<Tabs>
<TabItem value="typescript" label="TypeScript">

```typescript
import { AuthClient } from "saasus-sdk";

export const handler = async (event: any): Promise<any> => {
  const body = JSON.parse(event.body);

  const authClient = new AuthClient();

  const token = event.headers.authorization.replace("Bearer ", "");
  const userinfo = await authClient.userInfoApi.getUserInfo(token);

  // Create tenant
  // Tenant name: Tenant name entered on screen
  // Back office staff email: Email of the person logged in
  // Connect instance ID: Connect instance ID entered on screen
  // AWS account ID: AWS account ID entered on screen
  // IAM role ARN: IAM role ARN entered on screen
  const tenantProps: TenantProps = {
    name: body.tenant_name,
    back_office_staff_email: userinfo.data.email,
    attributes: {
      connect_instance_id: body.connect_instance_id,
      aws_account_id: body.aws_account_id,
      iam_role_arn_for_cdk: body.iam_role_arn_for_cdk,
    },
  };
  const createTenant = await authClient.tenantApi.createTenant(tenantProps);

  // Link tenant to user
  // Connect user ID: Connect user ID entered on screen
  const createTenantUserParam: CreateTenantUserParam = {
    attributes: { connect_user_id: body.connect_user_id },
    email: userinfo.data.email,
  };
  await authClient.tenantUserApi.createTenantUser(
    createTenant.data.id,
    createTenantUserParam
  );

  // Set roles
  const createTenantUserRolesParam: CreateTenantUserRolesParam = {
    role_names: ["admin"],
  };
  await authClient.tenantUserApi.createTenantUserRoles(
    createTenant.data.id,
    userinfo.data.id,
    3,
    createTenantUserRolesParam
  );

  return {
    statusCode: userinfo.status,
    body: "",
  };
};
```

</TabItem>
</Tabs>

#### 2.1.4. User List Retrieval API

To confirm that the API request is from a user logged into the SaaSus Platform,  
please always perform a login check by retrieving user information.

- React Implementation Sample (In Preparation)

### 2.2. Implementation Sample

- React (In Preparation)

---

# Implementing Multi-Factor Authentication (API Server)

URL: https://www.prisma.io/docs/part-6/implementation-guide/implementing-multi-factor-authentication-apiserver

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

This document provides sample implementations for Multi-Factor Authentication (MFA) in a SaaS application.

For detailed API specifications, please refer to the API Documentation.

# **MFA Implementation Samples**

## **1. Frontend Implementation**

### **1.1. Added Components**

To manage MFA authentication settings, the following components have been added.

#### **1.1.1. MFA Settings Dialog**
- [React Sample Implementation](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/components/dialogs/UserMfaSettingDialog.tsx)  
  → A dialog component that allows users to enable/disable MFA and check MFA status.

#### **1.1.2. Header User Menu**
- [React Sample Implementation](https://github.com/saasus-platform/implementation-sample-front-react/blob/main/src/components/header/HeaderUserbox.tsx)  
  → Added an item to open the MFA settings dialog in the user menu.

### 1.2. How to Use the Sample Implementation

- <a href="https://github.com/saasus-platform/implementation-sample-front-react/blob/main/README.md" target="_blank">React</a>

## **2. Backend Implementation**

To implement MFA functionality, the following endpoints have been added.

### **2.1. Added Endpoints**

#### **2.1.1. Get MFA Status API**

<Tabs>
<TabItem value="go" label="Go" default>

`e.GET("/mfa_status", getMfaStatus, authMiddleware)`

```go
// Retrieve MFA status (enabled/disabled)
func getMfaStatus(c echo.Context) error {
	// Retrieve user information from context
	userInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)
	if !ok {
		c.Logger().Error("Failed to get user info")
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})
	}

	// Use the SaaSus API to get the user's MFA status
	response, err := authClient.GetUserMfaPreferenceWithResponse(context.Background(), userInfo.Id)
	if err != nil || response.JSON200 == nil {
		c.Logger().Errorf("Failed to get MFA status: %v", err)
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve MFA status"})
	}

	// Return MFA enabled/disabled status
	return c.JSON(http.StatusOK, map[string]bool{"enabled": response.JSON200.Enabled})
}
```

</TabItem>

<TabItem value="python" label="Python">

`@app.get("/mfa_status")`

```python
# Retrieve MFA status (enabled/disabled)
def get_mfa_status(auth_user: dict = Depends(fastapi_auth), request: Request = None):
    try:
        # Use the SaaSus API to retrieve the user's MFA preference
        response = SaasUserApi(api_client=api_client).get_user_mfa_preference(user_id=auth_user.id)
        # Return the MFA enabled/disabled status
        return {"enabled": response.enabled}
    except Exception as e:
        print(e)
        raise HTTPException(status_code=500, detail=str(e))
```

</TabItem>

<TabItem value="java" label="Java">

`@GetMapping(value = "/mfa_status", produces = "application/json")`

```java
    /**
     * Retrieve MFA status (enabled/disabled)
     */
    public ResponseEntity<?> getMfaStatus(HttpServletRequest request) {
        try {
            // Initialize the SaaSus API client
            AuthApiClient apiClient = new Configuration().getAuthApiClient();
            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));

            // Retrieve user information
            UserInfoApi userInfoApi = new UserInfoApi(apiClient);
            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));

            // Retrieve MFA status
            SaasUserApi saasUserApi = new SaasUserApi(apiClient);
            Boolean enabled = saasUserApi.getUserMfaPreference(userInfo.getId()).getEnabled();

            Map<String, Boolean> result = new HashMap<>();
            result.put("enabled", enabled);
            return ResponseEntity.ok(result);
        } catch (ApiException e) {
            System.err.println("API Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        } catch (Exception e) {
            System.err.println("Unexpected Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        }
    }
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

`app.MapGet("/mfa_status")`
```csharp
            app.MapGet("/mfa_status", async (HttpContext context) =>
            {
                // Get bearer token from Authorization header
                var token = GetBearerToken(context);
                if (string.IsNullOrEmpty(token))
                {
                    return Results.Unauthorized();
                }

                try
                {
                    // Initialize SaaSus API client and retrieve user info
                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
                    var userInfoApi = new UserInfoApi(authApiClientConfig);
                    var userInfo = await userInfoApi.GetUserInfoAsync(token);

                    // Retrieve MFA preference
                    var saasUserApi = new SaasUserApi(authApiClientConfig);
                    var mfaPref = await saasUserApi.GetUserMfaPreferenceAsync(userInfo.Id);

                    // Return result in JSON
                    return Results.Json(new { enabled = mfaPref.Enabled });
                }
                catch (Exception ex)
                {
                    return HandleApiException(ex);
                }
            });
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

`[HttpGet, Route("mfa_status")]`

```csharp
        // Retrieve MFA status (enabled/disabled)
        public async Task<IHttpActionResult> GetMfaStatus()
        {
            try
            {
                // Get bearer token from Authorization header
                var token = GetBearerToken(Request);

                // Initialize the SaaSus API client
                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());

                // Retrieve user information
                var userInfoApi = new UserInfoApi(authApiClientConfig);
                var userInfo = await userInfoApi.GetUserInfoAsync(token);

                // Retrieve MFA preference
                var saasUserApi = new SaasUserApi(authApiClientConfig);
                var mfaPref = await saasUserApi.GetUserMfaPreferenceAsync(userInfo.Id);

                // Return result
                return Ok(new { enabled = mfaPref.Enabled });
            }
            catch (Exception ex)
            {
                return HandleApiException(ex);
            }
        }
```

</TabItem>
</Tabs>

#### **2.1.2. Generate Secret Code for MFA App Registration API**

<Tabs>
<TabItem value="go" label="Go" default>

`e.GET("/mfa_setup", getMfaSetup, authMiddleware)`

```go
// Retrieve MFA setup information (generate QR code)
// The frontend application must include X-Access-Token in the request header
func getMfaSetup(c echo.Context) error {
	// Retrieve X-Access-Token from the request header
	accessToken := c.Request().Header.Get("X-Access-Token")
	if accessToken == "" {
		return c.JSON(http.StatusUnauthorized, map[string]string{"error": "Access token is missing"})
	}

	// Retrieve user information from context
	userInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)
	if !ok {
		c.Logger().Error("Failed to get user info")
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})
	}

	// Use the SaaSus API to generate a secret code for MFA authentication app registration
	response, err := authClient.CreateSecretCodeWithResponse(context.Background(), userInfo.Id, authapi.CreateSecretCodeJSONRequestBody{
		AccessToken: accessToken,
	})
	if err != nil || response.JSON201 == nil {
		c.Logger().Errorf("Failed to create secret code: %v", err)
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to generate QR code"})
	}

	// Generate a QR code URL for Google Authenticator and other authentication apps
	qrCodeUrl := "otpauth://totp/SaaSusPlatform:" + userInfo.Email + "?secret=" + response.JSON201.SecretCode + "&issuer=SaaSusPlatform"

	// Return the QR code URL
	return c.JSON(http.StatusOK, map[string]string{
		"qrCodeUrl": qrCodeUrl,
	})
}
```

</TabItem>
<TabItem value="python" label="Python">

`@app.get("/mfa_setup")`

```python
# Retrieve MFA setup information (generate QR code)
# The frontend application must include X-Access-Token in the request header
def get_mfa_setup(request: Request, auth_user: dict = Depends(fastapi_auth)):
    # Get X-Access-Token from request headers
    access_token = request.headers.get("X-Access-Token")
    if not access_token:
        # Return 401 if access token is missing
        raise HTTPException(status_code=401, detail="Access token is missing")

    try:
        create_secret_code_param = CreateSecretCodeParam(access_token=access_token)
        # Use the SaaSus API to generate a secret code for MFA authentication app registration
        response = SaasUserApi(api_client=api_client).create_secret_code(user_id=auth_user.id, create_secret_code_param=create_secret_code_param)
        # Generate a QR code URL for Google Authenticator and other authentication apps
        qr_code_url = f"otpauth://totp/SaaSusPlatform:{auth_user.email}?secret={response.secret_code}&issuer=SaaSusPlatform"
        # Return the QR code URL
        return {"qrCodeUrl": qr_code_url}
    except Exception as e:
        print(e)
        raise HTTPException(status_code=500, detail=str(e))
```

</TabItem>

<TabItem value="java" label="Java">

`@GetMapping(value = "/mfa_setup", produces = "application/json")`

```java
    /**
     * Retrieve MFA setup information (generate QR code)
     */
    public ResponseEntity<?> getMfaSetup(HttpServletRequest request) {
        try {
            // Get access token from request header
            String accessToken = request.getHeader("X-Access-Token");
            if (accessToken == null || accessToken.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Access token is missing");
            }

            // Initialize the SaaSus API client and retrieve user info
            AuthApiClient apiClient = new Configuration().getAuthApiClient();
            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));
            UserInfoApi userInfoApi = new UserInfoApi(apiClient);
            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));

            // Generate secret code
            SaasUserApi saasUserApi = new SaasUserApi(apiClient);
            SoftwareTokenSecretCode code = saasUserApi.createSecretCode(
                userInfo.getId(),
                new CreateSecretCodeParam().accessToken(accessToken)
            );

            // Generate a QR code URL for Google Authenticator and other authentication apps
            String qrCodeUrl = "otpauth://totp/SaaSusPlatform:" + userInfo.getEmail() +
                    "?secret=" + code.getSecretCode() + "&issuer=SaaSusPlatform";
                    
            Map<String, String> result = new HashMap<>();
            result.put("qrCodeUrl", qrCodeUrl);
            return ResponseEntity.ok(result);
        } catch (ApiException e) {
            System.err.println("API Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        } catch (Exception e) {
            System.err.println("Unexpected Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        }
    }
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

`app.MapGet("/mfa_setup")`

```csharp
            app.MapGet("/mfa_setup", async (HttpContext context) =>
            {
                // Get access token and ID token
                var token = GetBearerToken(context);
                var accessToken = context.Request.Headers["X-Access-Token"].FirstOrDefault();
                if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(accessToken))
                {
                    return Results.Unauthorized();
                }

                try
                {
                    // Initialize API client and retrieve user info
                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
                    var userInfoApi = new UserInfoApi(authApiClientConfig);
                    var userInfo = await userInfoApi.GetUserInfoAsync(token);

                    // Generate secret code
                    var saasUserApi = new SaasUserApi(authApiClientConfig);
                    var secretCode = await saasUserApi.CreateSecretCodeAsync(
                        userInfo.Id,
                        new CreateSecretCodeParam(accessToken)
                    );

                    // Generate a QR code URL for Google Authenticator and other authentication apps
                    var qrCodeUrl = $"otpauth://totp/SaaSusPlatform:{userInfo.Email}?secret={secretCode.SecretCode}&issuer=SaaSusPlatform";

                    return Results.Json(new { qrCodeUrl });
                }
                catch (Exception ex)
                {
                    return HandleApiException(ex);
                }
            });
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

`[HttpGet, Route("mfa_setup")]`

```csharp
        // Retrieve MFA setup information (generate QR code)
        public async Task<IHttpActionResult> SetupMfa()
        {
            try
            {
                // Get token and access token
                var token = GetBearerToken(Request);
                var accessToken = HttpContext.Current.Request.Headers.Get("X-Access-Token");

                if (string.IsNullOrEmpty(accessToken))
                {
                    return Content(HttpStatusCode.Unauthorized, "Missing X-Access-Token header");
                }

                // Initialize API client
                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());

                // Retrieve user info
                var userInfoApi = new UserInfoApi(authApiClientConfig);
                var userInfo = await userInfoApi.GetUserInfoAsync(token);

                // Generate secret code
                var saasUserApi = new SaasUserApi(authApiClientConfig);
                var secretCode = await saasUserApi.CreateSecretCodeAsync(
                    userInfo.Id,
                    new CreateSecretCodeParam(accessToken)
                );

                // Generate a QR code URL for Google Authenticator and other authentication apps
                var qrCodeUrl = $"otpauth://totp/SaaSusPlatform:{userInfo.Email}?secret={secretCode.SecretCode}&issuer=SaaSusPlatform";

                return Ok(new { qrCodeUrl });
            }
            catch (Exception ex)
            {
                return HandleApiException(ex);
            }
        }
```

</TabItem>
</Tabs>

#### **2.1.3. Verify MFA Authentication Code API**

<Tabs>
<TabItem value="go" label="Go" default>

`e.POST("/mfa_verify", verifyMfa, authMiddleware)`

```go
// Verify the user's MFA authentication code
// The frontend application must include X-Access-Token in the request header
func verifyMfa(c echo.Context) error {
	// Retrieve user information from context
	userInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)
	if !ok {
		c.Logger().Error("Failed to get user info")
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})
	}

	// Retrieve X-Access-Token from the request header
	accessToken := c.Request().Header.Get("X-Access-Token")
	if accessToken == "" {
		return c.JSON(http.StatusUnauthorized, map[string]string{"error": "Access token is missing"})
	}

	// Retrieve the verification code from the request body
	var requestBody struct {
		VerificationCode string `json:"verification_code"`
	}
	if err := c.Bind(&requestBody); err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid request: malformed JSON or incorrect parameters"})
	}
	if requestBody.VerificationCode == "" {
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Verification code is required"})
	}

	// Use the SaaSus API to register the authentication application
	response, err := authClient.UpdateSoftwareTokenWithResponse(context.Background(), userInfo.Id, authapi.UpdateSoftwareTokenJSONRequestBody{
		AccessToken:      accessToken,
		VerificationCode: requestBody.VerificationCode,
	})
	if err != nil || response.StatusCode() != http.StatusOK {
		c.Logger().Errorf("MFA verification failed: Status Code %d, Response %s", response.StatusCode(), string(response.Body))
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "MFA verification failed"})
	}

	return c.JSON(http.StatusOK, map[string]string{"message": "MFA verification successful"})
}
```

</TabItem>

<TabItem value="python" label="Python">

`@app.post("/mfa_verify")`

```python
# Verify the user's MFA authentication code
# The frontend application must include X-Access-Token in the request header
def verify_mfa(request: Request, mfa_request: VerifyMfaRequest, auth_user: dict = Depends(fastapi_auth)):
    # Get X-Access-Token from request headers
    access_token = request.headers.get("X-Access-Token")
    if not access_token:
        # Return 401 if access token is missing
        raise HTTPException(status_code=401, detail="Access token is missing")

    try:
        update_software_token_param = UpdateSoftwareTokenParam(
            access_token=access_token,
            verification_code=mfa_request.verification_code
        )

        # Use the SaaSus API to register the authentication application
        SaasUserApi(api_client=api_client).update_software_token(
            user_id=auth_user.id, 
            update_software_token_param=update_software_token_param
        )

        return {"message": "MFA verification successful"}
    except Exception as e:
        print(e)
        raise HTTPException(status_code=500, detail=str(e))
```

</TabItem>

<TabItem value="java" label="Java">

`@PostMapping(value = "/mfa_verify", produces = "application/json")`

```java
    /**
     * Verify the user's MFA authentication code
     */
    public ResponseEntity<?> verifyMfa(@RequestBody Map<String, String> requestBody, HttpServletRequest request) {
        try {
            // Get access token and verification code
            String accessToken = request.getHeader("X-Access-Token");
            if (accessToken == null || accessToken.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Access token is missing");
            }

            String verificationCode = requestBody.get("verification_code");
            if (verificationCode == null || verificationCode.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Verification code is required");
            }

            // Initialize the SaaSus API client and retrieve user info
            AuthApiClient apiClient = new Configuration().getAuthApiClient();
            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));
            UserInfoApi userInfoApi = new UserInfoApi(apiClient);
            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));

            // Use the SaaSus API to verify the code and register the software token
            SaasUserApi saasUserApi = new SaasUserApi(apiClient);
            saasUserApi.updateSoftwareToken(
                userInfo.getId(),
                new UpdateSoftwareTokenParam()
                    .accessToken(accessToken)
                    .verificationCode(verificationCode)
            );

            Map<String, String> successResponse = new HashMap<>();
            successResponse.put("message", "MFA verification successful");
            return ResponseEntity.ok(successResponse);
        } catch (ApiException e) {
            System.err.println("API Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        } catch (Exception e) {
            System.err.println("Unexpected Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        }
    }
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

`app.MapPost("/mfa_verify")`

```csharp
            app.MapPost("/mfa_verify", async ([FromBody] MfaVerifyRequest requestBody, HttpContext context) =>
            {
                // Get tokens and verification code
                var token = GetBearerToken(context);
                var accessToken = context.Request.Headers["X-Access-Token"].FirstOrDefault(); 
                string verificationCode = requestBody.VerificationCode;

                if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(verificationCode))
                {
                    return Results.BadRequest("Missing required information.");
                }

                try
                {
                    // Initialize API client and retrieve user info
                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
                    var userInfoApi = new UserInfoApi(authApiClientConfig);
                    var userInfo = await userInfoApi.GetUserInfoAsync(token);

                    // Use the SaaSus API to verify the code and register the software token
                    var saasUserApi = new SaasUserApi(authApiClientConfig);
                    await saasUserApi.UpdateSoftwareTokenAsync(
                        userInfo.Id,
                        new UpdateSoftwareTokenParam(accessToken, verificationCode)
                    );

                    return Results.Ok(new { message = "MFA verification successful" });
                }
                catch (Exception ex)
                {
                    return HandleApiException(ex);
                }
            });
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

`[HttpPost, Route("mfa_verify")]`

```csharp
        // Verify the user's MFA authentication code
        public async Task<IHttpActionResult> VerifyMfa([FromBody] MfaVerifyRequest request)
        {
            try
            {
                // Get token and access token
                var token = GetBearerToken(Request);
                var accessToken = HttpContext.Current.Request.Headers.Get("X-Access-Token");
                var verificationCode = request.VerificationCode;

                if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(verificationCode))
                {
                    return BadRequest("Missing accessToken or verificationCode");
                }

                // Initialize API client and retrieve user info
                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());
                var userInfoApi = new UserInfoApi(authApiClientConfig);
                var userInfo = await userInfoApi.GetUserInfoAsync(token);

                // Use the SaaSus API to verify the code and register the software token
                var saasUserApi = new SaasUserApi(authApiClientConfig);
                await saasUserApi.UpdateSoftwareTokenAsync(
                    userInfo.Id,
                    new UpdateSoftwareTokenParam(accessToken, verificationCode)
                );

                return Ok(new { message = "MFA verification successful" });
            }
            catch (Exception ex)
            {
                return HandleApiException(ex);
            }
        }
```

</TabItem>
</Tabs>

#### **2.1.4. Enable MFA API**

<Tabs>
<TabItem value="go" label="Go" default>

`e.POST("/mfa_enable", enableMfa, authMiddleware)`

```go
// Enable MFA for the user
func enableMfa(c echo.Context) error {
	// Retrieve user information from context
	userInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)
	if !ok {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})
	}

	// Create request body to enable MFA
	method := authapi.SoftwareToken
	requestBody := authapi.UpdateUserMfaPreferenceJSONRequestBody{
		Enabled: true,
		Method:  &method,
	}

	// Use the SaaSus API to enable MFA
	_, err := authClient.UpdateUserMfaPreferenceWithResponse(context.Background(), userInfo.Id, requestBody)
	if err != nil {
		c.Logger().Errorf("Failed to enable MFA: %v", err)
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to enable MFA"})
	}

	return c.JSON(http.StatusOK, map[string]string{"message": "MFA has been enabled"})
}
```

</TabItem>

<TabItem value="python" label="Python">

`@app.post("/mfa_enable")`

```python
# Enable MFA for the user
def enable_mfa(auth_user: dict = Depends(fastapi_auth)):
    try:
        # Create request body to enable MFA
        body = MfaPreference(enabled=True, method='softwareToken')

        # Use the SaaSus API to enable MFA
        SaasUserApi(api_client=api_client).update_user_mfa_preference(user_id=auth_user.id, body=body)

        return {"message": "MFA has been enabled"}
    except Exception as e:
        print(e)
        raise HTTPException(status_code=500, detail=str(e))
```

</TabItem>

<TabItem value="java" label="Java">

`@PostMapping(value = "/mfa_enable", produces = "application/json")`

```java
    /**
     * Enable MFA for the user
     */
    public ResponseEntity<?> enableMfa(HttpServletRequest request) {
        try {
            // Initialize the SaaSus API client and retrieve user info
            AuthApiClient apiClient = new Configuration().getAuthApiClient();
            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));
            UserInfoApi userInfoApi = new UserInfoApi(apiClient);
            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));

            // Create request body to enable MFA
            MfaPreference mfaPreference = new MfaPreference()
                .enabled(true)
                .method(MfaPreference.MethodEnum.SOFTWARETOKEN);

            SaasUserApi saasUserApi = new SaasUserApi(apiClient);
            saasUserApi.updateUserMfaPreference(userInfo.getId(), mfaPreference);

            Map<String, String> successResponse = new HashMap<>();
            successResponse.put("message", "MFA has been enabled");
            return ResponseEntity.ok(successResponse);
        } catch (ApiException e) {
            System.err.println("API Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        } catch (Exception e) {
            System.err.println("Unexpected Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        }
    }
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

`app.MapPost("/mfa_enable")`

```csharp
            app.MapPost("/mfa_enable", async (HttpContext context) =>
            {
                // Retrieve ID token
                var token = GetBearerToken(context);
                if (string.IsNullOrEmpty(token))
                {
                    return Results.Unauthorized();
                }

                try
                {
                    // Initialize API client and retrieve user info
                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
                    var userInfoApi = new UserInfoApi(authApiClientConfig);
                    var userInfo = await userInfoApi.GetUserInfoAsync(token);

                    // Send request to enable MFA
                    var saasUserApi = new SaasUserApi(authApiClientConfig);
                    var mfaPreference = new MfaPreference(enabled: true, method: MfaPreference.MethodEnum.SoftwareToken);
                    await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);

                    return Results.Ok(new { message = "MFA has been enabled" });
                }
                catch (Exception ex)
                {
                    return HandleApiException(ex);
                }
            });
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

`[HttpPost, Route("mfa_enable")]`

```csharp
        // Enable MFA endpoint
        public async Task<IHttpActionResult> EnableMfa()
        {
            try
            {
                var token = GetBearerToken(Request);
                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());
                var userInfoApi = new UserInfoApi(authApiClientConfig);
                var userInfo = await userInfoApi.GetUserInfoAsync(token);

                var saasUserApi = new SaasUserApi(authApiClientConfig);
                var mfaPreference = new MfaPreference(enabled: true, method: MfaPreference.MethodEnum.SoftwareToken);
                await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);

                return Ok(new { message = "MFA has been enabled" });
            }
            catch (Exception ex)
            {
                return HandleApiException(ex);
            }
        }
```

</TabItem>
</Tabs>

#### **2.1.5. Disable MFA API**

<Tabs>
<TabItem value="go" label="Go" default>

`e.POST("/mfa_disable", disableMfa, authMiddleware)`

```go
// Disable MFA for the user
func disableMfa(c echo.Context) error {
	// Retrieve user information from context
	userInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)
	if !ok {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to retrieve user information"})
	}

	// Create request body to disable MFA
	method := authapi.SoftwareToken
	requestBody := authapi.UpdateUserMfaPreferenceJSONRequestBody{
		Enabled: false,
		Method:  &method,
	}

	// Use the SaaSus API to disable MFA
	_, err := authClient.UpdateUserMfaPreferenceWithResponse(context.Background(), userInfo.Id, requestBody)
	if err != nil {
		c.Logger().Errorf("Failed to disable MFA: %v", err)
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to disable MFA"})
	}

	return c.JSON(http.StatusOK, map[string]string{"message": "MFA has been disabled"})
}
```

</TabItem>

<TabItem value="python" label="Python">

`@app.post("/mfa_disable")`
```python
# Disable MFA for the user
def disable_mfa(auth_user: dict = Depends(fastapi_auth)):
    try:
        # Create request body to disable MFA
        body = MfaPreference(enabled=False, method='softwareToken')

        # Use the SaaSus API to disable MFA
        SaasUserApi(api_client=api_client).update_user_mfa_preference(user_id=auth_user.id, body=body)

        return {"message": "MFA has been disabled"}
    except Exception as e:
        print(e)
        raise HTTPException(status_code=500, detail=str(e))
```

</TabItem>

<TabItem value="java" label="Java">

`@PostMapping(value = "/mfa_disable", produces = "application/json")`

```java
    /**
     * Disable MFA for the user
     */
    public ResponseEntity<?> disableMfa(HttpServletRequest request) {
        try {
            // Initialize the SaaSus API client and retrieve user info
            AuthApiClient apiClient = new Configuration().getAuthApiClient();
            apiClient.setReferer(request.getHeader("X-Saasus-Referer"));
            UserInfoApi userInfoApi = new UserInfoApi(apiClient);
            UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));

            // Create request body to disable MFA
            MfaPreference mfaPreference = new MfaPreference()
                .enabled(false)
                .method(MfaPreference.MethodEnum.SOFTWARETOKEN);

            SaasUserApi saasUserApi = new SaasUserApi(apiClient);
            saasUserApi.updateUserMfaPreference(userInfo.getId(), mfaPreference);

            Map<String, String> successResponse = new HashMap<>();
            successResponse.put("message", "MFA has been disabled");
            return ResponseEntity.ok(successResponse);
        } catch (ApiException e) {
            System.err.println("API Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        } catch (Exception e) {
            System.err.println("Unexpected Exception: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);
        }
    }
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

`app.MapPost("/mfa_disable")`

```csharp
            app.MapPost("/mfa_disable", async (HttpContext context) =>
            {
                // Retrieve ID token
                var token = GetBearerToken(context);
                if (string.IsNullOrEmpty(token))
                {
                    return Results.Unauthorized();
                }

                try
                {
                    // Initialize API client and retrieve user info
                    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
                    var userInfoApi = new UserInfoApi(authApiClientConfig);
                    var userInfo = await userInfoApi.GetUserInfoAsync(token);

                    // Send request to disable MFA
                    var saasUserApi = new SaasUserApi(authApiClientConfig);
                    var mfaPreference = new MfaPreference(enabled: false, method: MfaPreference.MethodEnum.SoftwareToken);
                    await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);

                    return Results.Ok(new { message = "MFA has been disabled" });
                }
                catch (Exception ex)
                {
                    return HandleApiException(ex);
                }
            });
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

`[HttpPost, Route("mfa_disable")]`

```csharp
        // Disable MFA endpoint
        public async Task<IHttpActionResult> DisableMfa()
        {
            try
            {
                var token = GetBearerToken(Request);
                var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());
                var userInfoApi = new UserInfoApi(authApiClientConfig);
                var userInfo = await userInfoApi.GetUserInfoAsync(token);

                var saasUserApi = new SaasUserApi(authApiClientConfig);
                var mfaPreference = new MfaPreference(enabled: false, method: MfaPreference.MethodEnum.SoftwareToken);
                await saasUserApi.UpdateUserMfaPreferenceAsync(userInfo.Id, mfaPreference);

                return Ok(new { message = "MFA has been disabled" });
            }
            catch (Exception ex)
            {
                return HandleApiException(ex);
            }
        }
```

</TabItem>
</Tabs>

## **3. How to Use the Sample Implementation**

- [Go (Echo)](https://github.com/saasus-platform/implementation-sample-api-go/blob/main/README.md)
- [Python(FastAPI)](https://github.com/saasus-platform/implementation-sample-api-python)
- [Java(Maven)](https://github.com/saasus-platform/implementation-sample-api-java)
- [C#(.NET 8)](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/README.md)
- [C#(.NET Framework 4.8)](https://github.com/saasus-platform/implementation-sample-api-csharp/blob/main/README.md)

---

# Metering API Implementation Sample and Examples of Use (Laravel)

URL: https://www.prisma.io/docs/part-6/implementation-guide/meteringapisamplelaravelandusecase
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

We will describe Laravel implementation samples for each Metering API using SDK and an example of a feature using the Metering API.

Please check the API documentation for details of each API.

# Laravel Implementation Sample

## Get the Metering Unit Count for a Specified Date

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate)

### Use Case

Please use this when you want to show usage to tenants.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php PHP
/**
 * Get the Metering Unit Count for a Specified Date
 *
 * @param string $tenantId Tenant ID
 * @param string $meteringUnitName Metering Unit Name
 * @param string $date Date in yyyy-mm-dd format
 * @return array
 */
public function getCountOfSpecifiedDate(string $tenantId, string $meteringUnitName, string $date)
{
    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $unitCount = $pricingApi->getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(
        $tenantId,
        $meteringUnitName,
        $date
    );
  
    return [
        'count' => $unitCount->getCount(),
        'date' => $unitCount->getDate(),
        'meteringUnitName' => $unitCount->getMeteringUnitName(),
    ];
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Get the metering unit count for a specified date
// tenantId: Tenant ID
// unit: Metering unit name
// date: date in yyyy-MM-dd format
// returns: {"count": int, "date": string, "meteringUnitName": string}
func getCountOfSpecifiedDate(c echo.Context) error {
    tenantId := c.Param("tenantId")
    unit := c.Param("unit")
    date := c.Param("date")

    resp, err := pricingClient.
        GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithResponse(
            c.Request().Context(), tenantId, unit, date,
        )
    if err != nil || resp.JSON200 == nil {
        return c.String(http.StatusInternalServerError, "pricing API error")
    }

    return c.JSON(http.StatusOK, echo.Map{
        "count":            resp.JSON200.Count,
        "date":             resp.JSON200.Date,
        "meteringUnitName": resp.JSON200.MeteringUnitName,
    })
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Get the metering unit count for a specified date
# tenant_id: Tenant ID
# unit: Metering unit name
# date: date in yyyy-MM-dd format
# returns: {"count": int, "date": str, "meteringUnitName": str}
def get_count_of_specified_date(tenant_id: str, unit: str, date: str) -> Dict:
    metering_api = MeteringApi(api_client=pricing_api_client)
    cnt = metering_api.get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date(
        tenant_id=tenant_id,
        metering_unit_name=unit,
        var_date=date,
    )
    return {
        "count": cnt.count,
        "date": cnt.var_date,
        "meteringUnitName": cnt.metering_unit_name,
    }
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Get the metering unit count for a specified date
// tenantId: Tenant ID
// unit: Metering unit name
// date: date in yyyy-MM-dd format
@GetMapping("/tenants/{tenant_id}/metering/{unit:^(?!date$|month$).+}/date/{date}/count")
public ResponseEntity<?> getUnitDateCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String unit,
        @PathVariable String date
) {
    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        MeteringUnitDateCount cnt = meteringApi
            .getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId, unit, date);

        Map<String, Object> resp = new HashMap<>();
        resp.put("count", cnt.getCount());
        resp.put("date", cnt.getDate());
        resp.put("meteringUnitName", cnt.getMeteringUnitName());
        return ResponseEntity.ok(resp);

    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Get the metering unit count for a specified date</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="date">Date (yyyy-MM-dd)</param>
/// <returns>JSON { count:int, date:string, meteringUnitName:string }</returns>
app.MapGet("/tenants/{tenant_id}/metering/{unit}/date/{date}/count",
    async (HttpContext context, string tenant_id, string unit, string date) =>
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateAsync(
            tenant_id, unit, date);
        return Results.Json(new {
            count            = cnt.Count,
            date             = cnt.Date,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Get the metering unit count for a specified date
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="date">Date (yyyy-MM-dd)</param>
/// <returns>JSON { count:int, date:string, meteringUnitName:string }</returns>
[HttpGet]
[Route("tenants/{tenant_id}/metering/{unit}/date/{date}/count")]
public async Task<IHttpActionResult> GetUnitDateCount(
    string tenant_id,
    string unit,
    string date)
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateAsync(
            tenant_id, unit, date);
        return Ok(new
        {
            count            = cnt.Count,
            date             = cnt.Date,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>
## Update the Metering Unit Count for a Specified Timestamp

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/UpdateMeteringUnitTimestampCount)

### Use Case

Please use this for adjustments in case of mistakes in usage updates in past data.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Update the Metering Unit Count for a Specified Timestamp
 *
 * @param string $tenantId Tenant ID
 * @param string $meteringUnitName Metering Unit Name
 * @param int $timestamp Timestamp in seconds
 * @param Request $request
 * @return array
 */
public function updateCountOfSpecifiedTimestamp(string $tenantId, string $meteringUnitName, int $timestamp, Request $request)
{
    // Retrieve the update method and count from the request
    ['method' => $method, 'count' => $count] = $request->only(['method', 'count']);
    $updateMeteringUnitTimeStampParam = new UpdateMeteringUnitTimestampCountParam();
    $updateMeteringUnitTimeStampParam->setMethod($method)
        ->setCount($count);
    $unitCount = $this->saasusClient->getPricingClient()->updateMeteringUnitTimestampCount(
        $tenantId, $meteringUnitName, $timestamp,
        $updateMeteringUnitTimeStampParam
    );
  
    return [
        'count' => $unitCount->getCount(),
        'timestamp' => $unitCount->getTimestamp(),
        'meteringUnitName' => $unitCount->getMeteringUnitName(),
     ];
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Update the metering unit count for a specified timestamp
// tenantId: Tenant ID
// unit: Metering unit name
// ts: Timestamp in seconds
// body: {"method": "add|sub|direct", "count": int}
// returns: {"count": int, "timestamp": int, "meteringUnitName": string}
func updateCountOfSpecifiedTS(c echo.Context) error {
	tenantId := c.Param("tenantId")
	unit := c.Param("unit")
	ts, err := strconv.ParseInt(c.Param("ts"), 10, 64)
	if err != nil {
		return c.String(http.StatusBadRequest, "timestamp must be int")
	}

	var body struct {
		Method string `json:"method"` // add | sub | direct
		Count  int    `json:"count"`
	}
	if err := c.Bind(&body); err != nil {
		return c.String(http.StatusBadRequest, "invalid body")
	}

	method := pricingapi.UpdateMeteringUnitTimestampCountMethod(body.Method)
	switch method {
	case pricingapi.Add, pricingapi.Sub, pricingapi.Direct:
	default:
		return c.String(http.StatusBadRequest, "method must be add/sub/direct")
	}

	param := pricingapi.UpdateMeteringUnitTimestampCountParam{Method: method, Count: body.Count}

	resp, err := pricingClient.
		UpdateMeteringUnitTimestampCountWithResponse(
			c.Request().Context(), tenantId, unit, int(ts), param)
	if err != nil || resp.JSON200 == nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}
	return c.JSON(http.StatusOK, resp.JSON200)
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Update the metering unit count for a specified timestamp
# tenant_id: Tenant ID
# unit: Metering unit name
# ts: Timestamp (seconds)
# req: UpdateCountRequest(method="add|sub|direct", count=int)
# returns: UpdateMeteringUnitTimestampCountParam response model
def update_count_of_specified_ts(tenant_id: str, unit: str, ts: int, req: UpdateCountRequest):
    metering_api = MeteringApi(api_client=pricing_api_client)
    param = UpdateMeteringUnitTimestampCountParam(
        method=UpdateMeteringUnitTimestampCountMethod(req.method),
        count=req.count,
    )
    return metering_api.update_metering_unit_timestamp_count(
        tenant_id=tenant_id,
        metering_unit_name=unit,
        timestamp=ts,
        update_metering_unit_timestamp_count_param=param,
    )
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Update the metering unit count for a specified timestamp
// tenantId: Tenant ID
// unit: Metering unit name
// ts: Timestamp (seconds)
// body: {"method":"add|sub|direct","count":int}
@PutMapping("/tenants/{tenant_id}/metering/{unit}/timestamp/{ts}/count")
public ResponseEntity<?> updateUnitTimestampCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String unit,
        @PathVariable long ts,
        @RequestBody Map<String,Object> body
) {
    String method = (String) body.get("method");
    Object cntVal = body.get("count");
    if (!Arrays.asList("add","sub","direct").contains(method) || !(cntVal instanceof Number)) {
        throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
            "request body must include method(add/sub/direct) & count(int)");
    }

    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        UpdateMeteringUnitTimestampCountParam param = new UpdateMeteringUnitTimestampCountParam()
            .method(UpdateMeteringUnitTimestampCountMethod.fromValue(method))
            .count(((Number)cntVal).intValue());

        MeteringUnitTimestampCount res = meteringApi
            .updateMeteringUnitTimestampCount(tenantId, unit, (int) ts, param);

        return ResponseEntity.ok(res.toJson());
    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Update the metering unit count for a specified timestamp</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="ts">Timestamp (seconds)</param>
/// <param name="body">{"method":"add|sub|direct","count":int}</param>
/// <returns>The updated MeteringUnitTimestampCount object</returns>
app.MapPut("/tenants/{tenant_id}/metering/{unit}/timestamp/{ts}/count",
    async (HttpContext context, string tenant_id, string unit, int ts, JsonElement body) =>
{
    try
    {
        var method = body.GetProperty("method").GetString()!;
        var count  = body.GetProperty("count").GetInt32();
        if (!new[] { "add", "sub", "direct" }.Contains(method))
            return Results.BadRequest("method は add|sub|direct のいずれか。");

        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var param = new UpdateMeteringUnitTimestampCountParam(
            method: Enum.Parse<UpdateMeteringUnitTimestampCountMethod>(method, true),
            count:  count
        );
        var res = await metering.UpdateMeteringUnitTimestampCountAsync(
            tenant_id, unit, ts, param);
        return Results.Json(res);
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Update the metering unit count for a specified timestamp
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="ts">Timestamp (seconds)</param>
/// <param name="body">{"method":"add|sub|direct","count":int}</param>
/// <returns>The updated MeteringUnitTimestampCount object</returns>
[HttpPut]
[Route("tenants/{tenant_id}/metering/{unit}/timestamp/{ts}/count")]
public async Task<IHttpActionResult> UpdateUnitTimestampCount(
    string tenant_id,
    string unit,
    int ts,
    [FromBody] UpdateRequestBody body)
{
    if (body == null || !new[] { "add", "sub", "direct" }.Contains(body.method))
        return BadRequest("body must include method(add/sub/direct) & count(int)");

    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var param = new UpdateMeteringUnitTimestampCountParam(
            method: (UpdateMeteringUnitTimestampCountMethod)Enum.Parse(
                typeof(UpdateMeteringUnitTimestampCountMethod), body.method, true),
            count: body.count
        );
        var res = await metering.UpdateMeteringUnitTimestampCountAsync(
            tenant_id, unit, ts, param);
        return Ok(res);
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>
## Delete the Metering Unit Count for a Specified Timestamp

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/DeleteMeteringUnitTimestampCount)

### Use Case

Please use this for adjustments in case of mistakes in usage updates in past data.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Delete the Metering Unit Count for a Specified Timestamp
 *
 * @param string $tenantId Tenant ID
 * @param string $meteringUnitName Metering Unit Name
 * @param int $timestamp Timestamp in seconds
 * @return array
 */
public function deleteCountOfSpecifiedTimestamp(string $tenantId, string $meteringUnitName, int $timestamp)
{
    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $pricingApi->deleteMeteringUnitTimestampCount(
        $tenantId, $meteringUnitName, $timestamp
    );

    return ['status' => 'success'];
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Delete the metering unit count for a specified timestamp
// tenantId: Tenant ID
// unit: Metering unit name
// ts: Timestamp in seconds
// returns: {"status":"success"}
func deleteCountOfSpecifiedTS(c echo.Context) error {
	tenantId := c.Param("tenantId")
	unit := c.Param("unit")
	ts, err := strconv.ParseInt(c.Param("ts"), 10, 64)
	if err != nil {
		return c.String(http.StatusBadRequest, "timestamp must be int")
	}

	_, err = pricingClient.
		DeleteMeteringUnitTimestampCountWithResponse(
			c.Request().Context(), tenantId, unit, int(ts))
	if err != nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}
	return c.JSON(http.StatusOK, echo.Map{"status": "success"})
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Delete the metering unit count for a specified timestamp
# tenant_id: Tenant ID
# unit: Metering unit name
# ts: Timestamp in seconds
# returns: {"status": "success"}
def delete_count_of_specified_ts(tenant_id: str, unit: str, ts: int) -> Dict:
    metering_api = MeteringApi(api_client=pricing_api_client)
    metering_api.delete_metering_unit_timestamp_count(
        tenant_id=tenant_id,
        metering_unit_name=unit,
        timestamp=ts,
    )
    return {"status": "success"}
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Delete the metering unit count for a specified timestamp
// tenantId: Tenant ID
// unit: Metering unit name
// ts: Timestamp (seconds)
@DeleteMapping("/tenants/{tenant_id}/metering/{unit}/timestamp/{ts}/count")
public ResponseEntity<?> deleteUnitTimestampCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String unit,
        @PathVariable long ts
) {
    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        meteringApi.deleteMeteringUnitTimestampCount(tenantId, unit, (int) ts);

        Map<String,String> resp = new HashMap<>();
        resp.put("status", "success");
        return ResponseEntity.ok(resp);

    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Delete the metering unit count for a specified timestamp</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="ts">Timestamp (seconds)</param>
/// <returns>{"status":"success"}</returns>
app.MapDelete("/tenants/{tenant_id}/metering/{unit}/timestamp/{ts}/count",
    async (HttpContext context, string tenant_id, string unit, int ts) =>
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        await metering.DeleteMeteringUnitTimestampCountAsync(tenant_id, unit, ts);
        return Results.Json(new { status = "success" });
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Delete the metering unit count for a specified timestamp
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="ts">Timestamp (seconds)</param>
/// <returns>{"status":"success"}</returns>
[HttpDelete]
[Route("tenants/{tenant_id}/metering/{unit}/timestamp/{ts}/count")]
public async Task<IHttpActionResult> DeleteUnitTimestampCount(
    string tenant_id,
    string unit,
    int ts)
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        await metering.DeleteMeteringUnitTimestampCountAsync(tenant_id, unit, ts);
        return Ok(new { status = "success" });
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>

## Get the Metering Unit Count for Today

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/GetMeteringUnitDateCountByTenantIdAndUnitNameToday)

### Use Case

Please use this when you want to show the usage to tenants.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Get the Metering Unit Count for Today
 *
 * @param string $tenantId Tenant ID
 * @param string $meteringUnitName Metering Unit Name
 * @return array
 */
public function getCountOfCurrentDay(string $tenantId, string $meteringUnitName)
{
    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $unitCount = $pricingApi->getMeteringUnitDateCountByTenantIdAndUnitNameToday(
        $tenantId, $meteringUnitName
    );

    return [
        'count' => $unitCount->getCount(),
        'date' => $unitCount->getDate(),
        'meteringUnitName' => $unitCount->getMeteringUnitName(),
    ];
}
```
</TabItem>
<TabItem value="go" label="Go">

```go
// Get the metering unit count for today
// tenantId: Tenant ID
// unit: Metering unit name
// returns: {"count": int, "date": string, "meteringUnitName": string}
func getCountOfCurrentDay(c echo.Context) error {
	tenantId := c.Param("tenantId")
	unit := c.Param("unit")

	resp, err := pricingClient.
		GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithResponse(
			c.Request().Context(), tenantId, unit)
	if err != nil || resp.JSON200 == nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}
	return c.JSON(http.StatusOK, echo.Map{
		"count":            resp.JSON200.Count,
		"date":             resp.JSON200.Date,
		"meteringUnitName": resp.JSON200.MeteringUnitName,
	})
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Get the metering unit count for today
# tenant_id: Tenant ID
# unit: Metering unit name
# returns: {"count": int, "date": str, "meteringUnitName": str}
def get_count_of_current_day(tenant_id: str, unit: str) -> Dict:
    metering_api = MeteringApi(api_client=pricing_api_client)
    cnt = metering_api.get_metering_unit_date_count_by_tenant_id_and_unit_name_today(
      tenant_id=tenant_id,
      metering_unit_name=unit,
    )
    return {
        "count": cnt.count,
        "date": cnt.var_date,
        "meteringUnitName": cnt.metering_unit_name,
    }
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Get the metering unit count for today
// tenantId: Tenant ID
// unit: Metering unit name
@GetMapping("/tenants/{tenant_id}/metering/{unit:^(?!date$|month$).+}/date/today/count")
public ResponseEntity<?> getUnitTodayCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String unit
) {
    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        MeteringUnitDateCount cnt = meteringApi
            .getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId, unit);

        Map<String, Object> resp = new HashMap<>();
        resp.put("count", cnt.getCount());
        resp.put("date", cnt.getDate());
        resp.put("meteringUnitName", cnt.getMeteringUnitName());
        return ResponseEntity.ok(resp);

    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Get the metering unit count for today</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <returns>JSON { count:int, date:string, meteringUnitName:string }</returns>
app.MapGet("/tenants/{tenant_id}/metering/{unit}/date/today/count",
    async (HttpContext context, string tenant_id, string unit) =>
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitDateCountByTenantIdAndUnitNameTodayAsync(
            tenant_id, unit);
        return Results.Json(new {
            count            = cnt.Count,
            date             = cnt.Date,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Get the metering unit count for today
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <returns>JSON { count:int, date:string, meteringUnitName:string }</returns>
[HttpGet]
[Route("tenants/{tenant_id}/metering/{unit}/date/today/count")]
public async Task<IHttpActionResult> GetUnitTodayCount(
    string tenant_id,
    string unit)
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitDateCountByTenantIdAndUnitNameTodayAsync(
            tenant_id, unit);
        return Ok(new
        {
            count            = cnt.Count,
            date             = cnt.Date,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>

## Update the Current Time Metering Unit Count

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/UpdateMeteringUnitTimestampCountNow)

### Use Case

Please use this when updating the unit count, such as at times of changes in usage like the number of users.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Update the Current Time Metering Unit Count
 * 
 * @param string $tenantId Tenant ID
 * @param string $meteringUnitName Metering Unit Name
 * @param Request $request
 * @return array
 */
public function updateCountOfNow(string $tenantId, string $meteringUnitName, Request $request)
{
    // Retrieve the update method and count from the request
    ['method' => $method, 'count' => $count] = $request->only(['method', 'count']);
    $updateMeteringUnitTimeStampNowParam = new UpdateMeteringUnitTimestampCountNowParam();
    $updateMeteringUnitTimeStampNowParam->setMethod($method)
        ->setCount($count);

    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $count = $pricingApi->updateMeteringUnitTimestampCountNow(
        $tenantId, $meteringUnitName, $updateMeteringUnitTimeStampNowParam
    );

    return [
        'count' => $count->getCount(),
        'timestamp' => $count->getTimestamp(),
        'meteringUnitName' => $count->getMeteringUnitName(),
    ];
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Update the metering unit count at the current time
// tenantId: Tenant ID
// unit: Metering unit name
// body: {"method": "add|sub|direct", "count": int}
// returns: {"count": int, "timestamp": int, "meteringUnitName": string}
func updateCountOfNow(c echo.Context) error {
	tenantId := c.Param("tenantId")
	unit := c.Param("unit")

	var body struct {
		Method string `json:"method"`
		Count  int    `json:"count"`
	}
	if err := c.Bind(&body); err != nil {
		return c.String(http.StatusBadRequest, "invalid body")
	}

	method := pricingapi.UpdateMeteringUnitTimestampCountMethod(body.Method)
	switch method {
	case pricingapi.Add, pricingapi.Sub, pricingapi.Direct:
	default:
		return c.String(http.StatusBadRequest, "method must be add/sub/direct")
	}

	param := pricingapi.UpdateMeteringUnitTimestampCountNowParam{Method: method, Count: body.Count}

	resp, err := pricingClient.
		UpdateMeteringUnitTimestampCountNowWithResponse(
			c.Request().Context(), tenantId, unit, param)
	if err != nil || resp.JSON200 == nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}
	return c.JSON(http.StatusOK, resp.JSON200)
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Update the metering unit count at the current time
# tenant_id: Tenant ID
# unit: Metering unit name
# req: UpdateCountRequest(method="add|sub|direct", count=int)
# returns: UpdateMeteringUnitTimestampCountNowParam response model
def update_count_of_now(tenant_id: str, unit: str, req: UpdateCountRequest):
    metering_api = MeteringApi(api_client=pricing_api_client)
    param = UpdateMeteringUnitTimestampCountNowParam(
        method=UpdateMeteringUnitTimestampCountMethod(req.method),
        count=req.count,
    )
    return metering_api.update_metering_unit_timestamp_count_now(
        tenant_id=tenant_id,
        metering_unit_name=unit,
        update_metering_unit_timestamp_count_now_param=param,
    )
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Update the metering unit count at the current time
// tenantId: Tenant ID
// unit: Metering unit name
// body: {"method":"add|sub|direct","count":int}
@PutMapping("/tenants/{tenant_id}/metering/{unit}/timestamp/now/count")
public ResponseEntity<?> updateUnitNowCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String unit,
        @RequestBody Map<String,Object> body
) {
    String method = (String) body.get("method");
    Object cntVal = body.get("count");
    if (!Arrays.asList("add","sub","direct").contains(method) || !(cntVal instanceof Number)) {
        throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
            "request body must include method(add/sub/direct) & count(int)");
    }

    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        UpdateMeteringUnitTimestampCountNowParam param = new UpdateMeteringUnitTimestampCountNowParam()
            .method(UpdateMeteringUnitTimestampCountMethod.fromValue(method))
            .count(((Number)cntVal).intValue());

        MeteringUnitTimestampCount res = meteringApi
            .updateMeteringUnitTimestampCountNow(tenantId, unit, param);

        return ResponseEntity.ok(res.toJson());
    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>
/// Update the metering unit count at the current time
/// </summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="body">{"method":"add|sub|direct","count":int}</param>
/// <returns>The updated MeteringUnitTimestampCount object</returns>
app.MapPut("/tenants/{tenant_id}/metering/{unit}/timestamp/now/count",
    async (HttpContext context, string tenant_id, string unit, JsonElement body) =>
{
    try
    {
        var method = body.GetProperty("method").GetString()!;
        var count  = body.GetProperty("count").GetInt32();
        if (!new[] { "add", "sub", "direct" }.Contains(method))
            return Results.BadRequest("method は add|sub|direct のいずれか。");

        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var param = new UpdateMeteringUnitTimestampCountNowParam(
            method: Enum.Parse<UpdateMeteringUnitTimestampCountMethod>(method, true),
            count:  count
        );
        var res = await metering.UpdateMeteringUnitTimestampCountNowAsync(
            tenant_id, unit, param);
        return Results.Json(res);
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Update the metering unit count at the current time
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="body">{"method":"add|sub|direct","count":int}</param>
/// <returns>The updated MeteringUnitTimestampCount object</returns>
[HttpPut]
[Route("tenants/{tenant_id}/metering/{unit}/timestamp/now/count")]
public async Task<IHttpActionResult> UpdateUnitNowCount(
    string tenant_id,
    string unit,
    [FromBody] UpdateRequestBody body)
{
    if (body == null || !new[] { "add", "sub", "direct" }.Contains(body.method))
        return BadRequest("body must include method(add/sub/direct) & count(int)");

    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var param = new UpdateMeteringUnitTimestampCountNowParam(
            method: (UpdateMeteringUnitTimestampCountMethod)Enum.Parse(
                typeof(UpdateMeteringUnitTimestampCountMethod), body.method, true),
            count: body.count
        );
        var res = await metering.UpdateMeteringUnitTimestampCountNowAsync(
            tenant_id, unit, param);
        return Ok(res);
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>

## Get the Metering Unit Count for the Current Month

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth)

### Use Case

Please use this when you want to show usage to tenants.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Get the Metering Unit Count for the Current Month
 *
 * @param string $tenantId Tenant ID
 * @param string $meteringUnitName Metering Unit Name
 * @return array
 */
public function getCountOfCurrentMonth(string $tenantId, string $meteringUnitName)
{
    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $unitCount = $pricingApi->getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth($tenantId, $meteringUnitName);

    return [
        'count' => $unitCount->getCount(),
        'month' => $unitCount->getMonth(),
        'meteringUnitName' => $unitCount->getMeteringUnitName(),
    ];
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Get the metering unit count for the current month
// tenantId: Tenant ID
// unit: Metering unit name
// returns: {"count": int, "month": string, "meteringUnitName": string}
func getCountOfCurrentMonth(c echo.Context) error {
	tenantId := c.Param("tenantId")
	unit := c.Param("unit")

	resp, err := pricingClient.
		GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithResponse(
			c.Request().Context(), tenantId, unit)
	if err != nil || resp.JSON200 == nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}
	return c.JSON(http.StatusOK, echo.Map{
		"count":            resp.JSON200.Count,
		"month":            resp.JSON200.Month,
		"meteringUnitName": resp.JSON200.MeteringUnitName,
	})
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Get the metering unit count for the current month
# tenant_id: Tenant ID
# unit: Metering unit name
# returns: {"count": int, "month": str, "meteringUnitName": str}
def get_count_of_current_month(tenant_id: str, unit: str) -> Dict:
    metering_api = MeteringApi(api_client=pricing_api_client)
    cnt = metering_api.get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month(
      tenant_id=tenant_id,
      metering_unit_name=unit,
    )
    return {
        "count": cnt.count,
        "month": cnt.month,
        "meteringUnitName": cnt.metering_unit_name,
    }
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Get the metering unit count for the current month
// tenantId: Tenant ID
// unit: Metering unit name
@GetMapping("/tenants/{tenant_id}/metering/{unit:^(?!date$|month$).+}/month/this/count")
public ResponseEntity<?> getUnitThisMonthCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String unit
) {
    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        MeteringUnitMonthCount cnt = meteringApi
            .getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId, unit);

        Map<String, Object> resp = new HashMap<>();
        resp.put("count", cnt.getCount());
        resp.put("month", cnt.getMonth());
        resp.put("meteringUnitName", cnt.getMeteringUnitName());
        return ResponseEntity.ok(resp);

    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Get the metering unit count for the current month</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <returns>JSON { count:int, month:string, meteringUnitName:string }</returns>
app.MapGet("/tenants/{tenant_id}/metering/{unit}/month/this/count",
    async (HttpContext context, string tenant_id, string unit) =>
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthAsync(
            tenant_id, unit);
        return Results.Json(new {
            count            = cnt.Count,
            month            = cnt.Month,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Get the metering unit count for the current month
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <returns>JSON { count:int, month:string, meteringUnitName:string }</returns>
[HttpGet]
[Route("tenants/{tenant_id}/metering/{unit}/month/this/count")]
public async Task<IHttpActionResult> GetUnitThisMonthCount(
    string tenant_id,
    string unit)
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthAsync(
            tenant_id, unit);
        return Ok(new
        {
            count            = cnt.Count,
            month            = cnt.Month,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>

## Get the Metering Unit Count for a Specified Month

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth)

### Use Case

Please use this when you want to show usage to tenants.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Get the Metering Unit Count for a Specified Month
 *
 * @param string $tenantId Tenant ID
 * @param string $meteringUnitName Metering Unit Name
 * @param string $month Month in yyyy-mm format
 * @return array
 */
public function getCountOfSpecifiedMonth(string $tenantId, string $meteringUnitName, string $month)
{
    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $unitCount = $pricingApi->getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(
        $tenantId, $meteringUnitName, $month
    );

    return [
        'count' => $unitCount->getCount(),
        'month' => $unitCount->getMonth(),
        'meteringUnitName' => $unitCount->getMeteringUnitName(),
    ];
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Get the metering unit count for a specified month
// tenantId: Tenant ID
// unit: Metering unit name
// month: Month in yyyy-MM format
// returns: {"count": int, "month": string, "meteringUnitName": string}
func getCountOfSpecifiedMonth(c echo.Context) error {
	tenantId := c.Param("tenantId")
	unit := c.Param("unit")
	month := c.Param("month") // yyyy-MM

	resp, err := pricingClient.
		GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithResponse(
			c.Request().Context(), tenantId, unit, month)
	if err != nil || resp.JSON200 == nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}

	return c.JSON(http.StatusOK, echo.Map{
		"count":            resp.JSON200.Count,
		"month":            resp.JSON200.Month,
		"meteringUnitName": resp.JSON200.MeteringUnitName,
	})
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Get the metering unit count for a specified month
# tenant_id: Tenant ID
# unit: Metering unit name
# month: Month in yyyy-MM format
# returns: {"count": int, "month": str, "meteringUnitName": str}
def get_count_of_specified_month(tenant_id: str, unit: str, month: str) -> Dict:
    metering_api = MeteringApi(api_client=pricing_api_client)
    cnt = metering_api.get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month(
        tenant_id=tenant_id,
        metering_unit_name=unit,
        month=month,
    )
    return {
        "count": cnt.count,
        "month": cnt.month,
        "meteringUnitName": cnt.metering_unit_name,
    }
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Get the metering unit count for a specified month
// tenantId: Tenant ID
// unit: Metering unit name
// month: Month in yyyy-MM format
@GetMapping("/tenants/{tenant_id}/metering/{unit:^(?!date$|month$).+}/month/{month}/count")
public ResponseEntity<?> getUnitMonthCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String unit,
        @PathVariable String month
) {
    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        MeteringUnitMonthCount cnt = meteringApi
            .getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId, unit, month);

        Map<String, Object> resp = new HashMap<>();
        resp.put("count", cnt.getCount());
        resp.put("month", cnt.getMonth());
        resp.put("meteringUnitName", cnt.getMeteringUnitName());
        return ResponseEntity.ok(resp);

    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Get the metering unit count for a specified month</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="month">Month (yyyy-MM)</param>
/// <returns>JSON { count:int, month:string, meteringUnitName:string }</returns>
app.MapGet("/tenants/{tenant_id}/metering/{unit}/month/{month}/count",
    async (HttpContext context, string tenant_id, string unit, string month) =>
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthAsync(
            tenant_id, unit, month);
        return Results.Json(new {
            count            = cnt.Count,
            month            = cnt.Month,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Get the metering unit count for a specified month
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="unit">Metering unit name</param>
/// <param name="month">Month (yyyy-MM)</param>
/// <returns>JSON { count:int, month:string, meteringUnitName:string }</returns>
[HttpGet]
[Route("tenants/{tenant_id}/metering/{unit}/month/{month}/count")]
public async Task<IHttpActionResult> GetUnitMonthCount(
    string tenant_id,
    string unit,
    string month)
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var cnt = await metering.GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthAsync(
            tenant_id, unit, month);
        return Ok(new
        {
            count            = cnt.Count,
            month            = cnt.Month,
            meteringUnitName = cnt.MeteringUnitName
        });
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>

## Get All Metering Unit Counts for a Specified Date

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/GetMeteringUnitDateCountsByTenantIdAndDate)

### Use Case

Please use this when you want to show usage to tenants.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Get All Metering Unit Counts for a Specified Date
 *
 * @param string $tenantId Tenant ID
 * @param string $date Date in yyyy-mm-dd format
 * @return \AntiPatternInc\Saasus\Sdk\Pricing\Model\MeteringUnitDateCount[]
 */
public function getAllMeteringCountOfSpecifiedDate(string $tenantId, string $date)
{
    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $allMeteringCount = $pricingApi->getMeteringUnitDateCountsByTenantIdAndDate(
        $tenantId, $date
    );

    return array_map(function ($count) {
        return [
            'count' => $unitCount->getCount(),
            'date' => $unitCount->getDate(),
            'meteringUnitName' => $unitCount->getMeteringUnitName(),
        ];
    }, $allMeteringCount->getCounts());
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Get all metering unit counts for a specified date
// tenantId: Tenant ID
// date: Date in yyyy-MM-dd format
// returns: []{"count": int, "date": string, "meteringUnitName": string}
func getAllCountsOfSpecifiedDate(c echo.Context) error {
	tenantId := c.Param("tenantId")
	date := c.Param("date")

	resp, err := pricingClient.
		GetMeteringUnitDateCountsByTenantIdAndDateWithResponse(
			c.Request().Context(), tenantId, date)
	if err != nil || resp.JSON200 == nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}

	out := make([]map[string]interface{}, len(resp.JSON200.Counts))
	for i, v := range resp.JSON200.Counts {
		out[i] = map[string]interface{}{
			"count":            v.Count,
			"date":             v.Date,
			"meteringUnitName": v.MeteringUnitName,
		}
	}
	return c.JSON(http.StatusOK, out)
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Get all metering unit counts for a specified date
# tenant_id: Tenant ID
# date: Date in yyyy-MM-dd format
# returns: List[{"count": int, "date": str, "meteringUnitName": str}]
def get_all_counts_of_specified_date(tenant_id: str, date: str) -> List[Dict]:
    metering_api = MeteringApi(api_client=pricing_api_client)
    all_counts = metering_api.get_metering_unit_date_counts_by_tenant_id_and_date(
        tenant_id=tenant_id,
        date=date,
    )
    return [
        {"count": v.count, "date": v.date, "meteringUnitName": v.metering_unit_name}
        for v in all_counts.counts
    ]
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Get all metering unit counts for a specified date
// tenantId: Tenant ID
// date: Date in yyyy-MM-dd format
@GetMapping("/tenants/{tenant_id}/metering/date/{date}/count")
public ResponseEntity<?> getAllUnitsDateCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String date
) {
    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        MeteringUnitDateCounts all = meteringApi
            .getMeteringUnitDateCountsByTenantIdAndDate(tenantId, date);

        List<Map<String,Object>> list = new ArrayList<>();
        for (MeteringUnitDateCount e : all.getCounts()) {
            Map<String,Object> m = new HashMap<>();
            m.put("count", e.getCount());
            m.put("date",  e.getDate());
            m.put("meteringUnitName", e.getMeteringUnitName());
            list.add(m);
        }
        return ResponseEntity.ok(list);

    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Get all metering unit counts for a specified date</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="date">Date (yyyy-MM-dd)</param>
/// <returns>JSON[] of { count:int, date:string, meteringUnitName:string }</returns>
app.MapGet("/tenants/{tenant_id}/metering/date/{date}/count",
    async (HttpContext context, string tenant_id, string date) =>
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var all = await metering.GetMeteringUnitDateCountsByTenantIdAndDateAsync(
            tenant_id, date);
        var list = all.Counts.Select(v => new {
            count            = v.Count,
            date             = v.Date,
            meteringUnitName = v.MeteringUnitName
        });
        return Results.Json(list);
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Get all metering unit counts for a specified date
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="date">Date (yyyy-MM-dd)</param>
/// <returns>JSON[] of { count:int, date:string, meteringUnitName:string }</returns>
[HttpGet]
[Route("tenants/{tenant_id}/metering/date/{date}/count")]
public async Task<IHttpActionResult> GetAllUnitsDateCount(
    string tenant_id,
    string date)
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var all = await metering.GetMeteringUnitDateCountsByTenantIdAndDateAsync(
            tenant_id, date);
        var list = all.Counts
            .Select(v => new
            {
                count            = v.Count,
                date             = v.Date,
                meteringUnitName = v.MeteringUnitName
            })
            .ToList();
        return Ok(list);
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>
## Get All Metering Unit Counts for a Specified Month

[API Documentation](/docs/reference/pricing-api#tag/metering/operation/GetMeteringUnitMonthCountsByTenantIdAndMonth)

### Use Case

Please use this when you want to show usage to tenants.

### Implementation Sample

<Tabs>
<TabItem value="php" label="PHP">

```php
/**
 * Get All Metering Unit Counts for a Specified Month
 *
 * @param string $tenantId Tenant ID
 * @param string $month Month in yyyy-mm format
 * @return MeteringUnitMonthCount[]
 */
public function getAllMeteringCountOfSpecifiedMonth(string $tenantId, string $month)
{
    $client = new \AntiPatternInc\Saasus\Api\Client();
    $pricingApi = $client->getPricingClient();
    $allMeteringCount = $pricingApi->getMeteringUnitMonthCountsByTenantIdAndMonth(
        $tenantId, $month
    );

    return array_map(function ($unitCount) {
        return [
            'count' => $unitCount->getCount(),
            'month' => $unitCount->getMonth(),
            'meteringUnitName' => $unitCount->getMeteringUnitName(),
        ];
    }, $allMeteringCount->getCounts());
}
```

</TabItem>
<TabItem value="go" label="Go">

```go
// Get all metering unit counts for a specified month
// tenantId: Tenant ID
// month: Month in yyyy-MM format
// returns: []{"count": int, "month": string, "meteringUnitName": string}
func getAllCountsOfSpecifiedMonth(c echo.Context) error {
	tenantId := c.Param("tenantId")
	month := c.Param("month")

	resp, err := pricingClient.
		GetMeteringUnitMonthCountsByTenantIdAndMonthWithResponse(
			c.Request().Context(), tenantId, month)
	if err != nil || resp.JSON200 == nil {
		return c.String(http.StatusInternalServerError, "pricing API error")
	}

	out := make([]map[string]interface{}, len(resp.JSON200.Counts))
	for i, v := range resp.JSON200.Counts {
		out[i] = map[string]interface{}{
			"count":            v.Count,
			"month":            v.Month,
			"meteringUnitName": v.MeteringUnitName,
		}
	}
	return c.JSON(http.StatusOK, out)
}
```

</TabItem>
<TabItem value="python" label="Python">

```python
# Get all metering unit counts for a specified month
# tenant_id: Tenant ID
# month: Month in yyyy-MM format
# returns: List[{"count": int, "month": str, "meteringUnitName": str}]
def get_all_counts_of_specified_month(tenant_id: str, month: str) -> List[Dict]:
    metering_api = MeteringApi(api_client=pricing_api_client)
    all_counts = metering_api.get_metering_unit_month_counts_by_tenant_id_and_month(
        tenant_id=tenant_id,
        month=month,
    )
    return [
        {"count": v.count, "month": v.month, "meteringUnitName": v.metering_unit_name}
        for v in all_counts.counts
    ]
```

</TabItem>
<TabItem value="java" label="Java">

```java
// Get all metering unit counts for a specified month
// tenantId: Tenant ID
// month: Month in yyyy-MM format
@GetMapping("/tenants/{tenant_id}/metering/month/{month}/count")
public ResponseEntity<?> getAllUnitsMonthCount(
        HttpServletRequest request,
        @PathVariable("tenant_id") String tenantId,
        @PathVariable String month
) {
    try {
        PricingApiClient pricingClient = new Configuration().getPricingApiClient();
        pricingClient.setReferer(request.getHeader("X-Saasus-Referer"));
        MeteringApi meteringApi = new MeteringApi(pricingClient);

        MeteringUnitMonthCounts all = meteringApi
            .getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId, month);

        List<Map<String,Object>> list = new ArrayList<>();
        for (MeteringUnitMonthCount e : all.getCounts()) {
            Map<String,Object> m = new HashMap<>();
            m.put("count", e.getCount());
            m.put("month",  e.getMonth());
            m.put("meteringUnitName", e.getMeteringUnitName());
            list.add(m);
        }
        return ResponseEntity.ok(list);

    } catch (saasus.sdk.pricing.ApiException e) {
        throw new ResponseStatusException(
            HttpStatus.INTERNAL_SERVER_ERROR,
            "Pricing API error: " + e.getMessage(), e
        );
    }
}
```

</TabItem>
<TabItem value="csharp" label="C#(.Net8)">

```csharp
/// <summary>Get all metering unit counts for a specified month</summary>
/// <param name="context">HTTP context</param>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="month">Month (yyyy-MM)</param>
/// <returns>JSON[] of { count:int, month:string, meteringUnitName:string }</returns>
app.MapGet("/tenants/{tenant_id}/metering/month/{month}/count",
    async (HttpContext context, string tenant_id, string month) =>
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var metering = new MeteringApi(cfg);
        var all = await metering.GetMeteringUnitMonthCountsByTenantIdAndMonthAsync(
            tenant_id, month);
        var list = all.Counts.Select(v => new {
            count            = v.Count,
            month            = v.Month,
            meteringUnitName = v.MeteringUnitName
        });
        return Results.Json(list);
    }
    catch (Exception ex) { return HandleApiException(ex); }
});
```

</TabItem>
<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
/// <summary>
/// Get all metering unit counts for a specified month
/// </summary>
/// <param name="tenant_id">Tenant ID</param>
/// <param name="month">Month (yyyy-MM)</param>
/// <returns>JSON[] of { count:int, month:string, meteringUnitName:string }</returns>
[HttpGet]
[Route("tenants/{tenant_id}/metering/month/{month}/count")]
public async Task<IHttpActionResult> GetAllUnitsMonthCount(
    string tenant_id,
    string month)
{
    try
    {
        var cfg = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var metering = new MeteringApi(cfg);
        var all = await metering.GetMeteringUnitMonthCountsByTenantIdAndMonthAsync(
            tenant_id, month);
        var list = all.Counts
            .Select(v => new
            {
                count            = v.Count,
                month            = v.Month,
                meteringUnitName = v.MeteringUnitName
            })
            .ToList();
        return Ok(list);
    }
    catch (Exception ex) { return HandleApiException(ex); }
}
```

</TabItem>
</Tabs>

---

# Step-by-Step Guide to Setting Up Complicated Pricing Plans

URL: https://www.prisma.io/docs/part-6/usecase/about-rate-plans/basic-charge-preference
# Step-by-Step Guide to Setting Up Complicated Pricing Plans

## Metering Units

### Example: Comment Count

| Unit Name    | Unit Display Name   | Unit Description |
|:-----------|:-------------|:-----------------|
| comment_count | Comment Count | Comment Count    |

![08](/img/part-6/usecase/about-rate-plans/basic-charge-preference-08.png)

## Measurement Unit

### Basic Pricing

Measurement Unit: Fixed Unit

| Measurement Unit Name | Measurement Unit Display Name | Measurement Unit Description | Amount | Reoccurance Period | Currency |
| :-------------------- | :---------------------------- | :--------------------------- | :----- | :----------------- | :------- |
| individual_base         | Individual Plan Base Fee        | Individual Plan Base Fee       | 3000   | Month              | JPY      |
| enterprise_base       | Enterprise Plan Base Fee      | Enterprise Plan Base Fee     | 50000  | Month              | JPY      |

![01](/img/part-6/usecase/about-rate-plans/basic-charge-preference-01.png)

![02](/img/part-6/usecase/about-rate-plans/basic-charge-preference-02.png)

#### Individual Plan – Tiered Usage Unit

Unit of Measure: Tiered Usage Unit

| Measurement Unit Name | Measurement Unit Display Name       | Measurement Unit Description        | Target Meter Name | Currency | Range           | Upper Limit |
| :-------------------- | :---------------------------------- | :---------------------------------- | :---------------- | :------- | :-------------- | ----------: |
| individual_comment      | number of comments in Individual plan | number of comments in Individual plan | Comment Count     | JPY      | see table below |           0 |

| More than | Less than | Unit amount | Fixed amount |
| --------: | --------: | ----------: | -----------: |
|         0 |        10 |           5 |            0 |
|        11 |       100 |           2 |            0 |
|       101 |           |           1 |            0 |

![03](/img/part-6/usecase/about-rate-plans/basic-charge-preference-03.png)

#### Enterprise Plan – Usage Unit

Measurement Unit: Usage Unit

| Measurement Unit  Name | Measurement Unit Display Name | Measurement Unit Description | Target Meter Name | Amount per Unit Usage | Limit | Currency |
| :--------------------- | :---------------------------- | :--------------------------- | :---------------- | :-------------------- | :---- | :------- |
| enterprise_comment     | number of comments in Enterprise plan      | number of comments in Enterprise plan     | Comment Count      | 0                     | 0     | JPY      |

![05](/img/part-6/usecase/about-rate-plans/basic-charge-preference-05.png)

## Feature Menu

| Feature Menu Name | Feature Menu Display Name  | Feature Menu Description   | Measurement Unit                                                               |
| :---------------- | :------------------------- | :------------------------- | :----------------------------------------------------------------------------- |
| individual_menu     | Individual Plan Basic Menu   | Individual Plan Basic Menu   | Individual Plan Base Fee<br/>number of comments in Individual plan       |
| enterprise_menu   | Enterprise Plan Basic Menu | Enterprise Plan Basic Menu | Enterprise Plan Base Fee<br/>number of comments in Enterprise plan |

![06](/img/part-6/usecase/about-rate-plans/basic-charge-preference-06.png)

Please configure the Enterprise plan in the same way as the Individual plan.

## Pricing Plan

| Pricing plan Name | Pricing Plan Display Name | Pricing Plan Description | Feature Menu               |
| :---------------- | :------------------------ | :----------------------- | :------------------------- |
| individual_plan     | Individual Plan             | Individual Plan            | Individual Plan Basic Menu   |
| enterprise_plan   | Enterprise Plan           | Enterprise Plan          | Enterprise Plan Basic Menu |

![07](/img/part-6/usecase/about-rate-plans/basic-charge-preference-07.png)

Please configure the Enterprise plan in the same way as the Individual plan.
---

# About Rate Plans

URL: https://www.prisma.io/docs/part-6/usecase/about-rate-plans

# About complicated pricing plans

The SaaSus Platform also allows for complex pricing plans using subscription and pay-as-you-go models.

- Individual plan
  - Fixed fee 3,000 yen
  - Comment count tiered usage pricing
    - Up to 10 comments, 5 yen per comment
    - 11 to 100 comments, 2 yen per comment
    - 101 comments and above, 1 yen per comment
- Enterprise plan
  - Fixed fee 50,000 yen
  - Comment count Free

<div className="table-scroll">
<table className="nowrap-table">
  <thead>
    <tr>
      <th>Plan</th>
      <th className="text-right">Base Fee</th>
      <th>Comment Count Billing</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Individual</td>
      <td className="text-right">3,000 yen</td>
      <td className="no-p-margin">
        Tiered usage pricing (per comment)<br />
        0–10 items = 5 yen/item<br />
        11–100 items = 2 yen/item<br />
        101 items〜 = 1 yen/item
      </td>
    </tr>
    <tr>
      <td>Enterprise</td>
      <td className="text-right">50,000 yen</td>
      <td>Unlimited</td>
    </tr>
  </tbody>
</table>
</div>

\*This time we will use a complicated rate plan as an example, but please do not set up such a complicated rate plan unless there is a deep reason.
SaaS usage fees should not be considered based on cost, but rather on how much value the customer will receive.
Therefore, complex pricing will force customers to make complex calculations and forecasts, and while using SaaS will reduce the burden on customers, it will place a burden on them for pricing calculations and forecasts.
You should create a pricing plan that is as simple and easy to understand as possible.

[Click here for settings (images) of metering units, measurement units, function menus, and price plan settings for Individual and Enterprise plans.](./about-rate-plans/basic-charge-preference)

## Metering Units

### Example: Comment Count

| Unit Name    | Unit Display Name   | Unit Description |
|:-----------|:-------------|:-----------------|
| comment_count | Comment Count | Comment Count    |

## Measurement Unit

### Basic Pricing

Measurement Unit: Fixed Units

| Measurement Unit Name | Measurement Unit Display Name | Measurement Unit Description | Amount |       |     |
| :-------------------- | :---------------------------- | :--------------------------- | :----- | :---- | :-- |
| individual_base         | Individual Plan Base Fee        | Individual Plan Base Fee       | 3000   | Month | JPY |
| enterprise_base       | Enterprise Plan Base Fee      | Enterprise Plan Base Fee     | 50000  | Month | JPY |

#### Individual Plan – Tiered Usage Unit

Measurement Unit: Tiered Usage Unit

| Measurement Unit Name | Measurement Unit Display Name       | Measurement Unit Description        | Target Meter Name | Currency | Range           | Limit |
| :-------------------- | :---------------------------------- | :---------------------------------- | :---------------- | :------- | :-------------- | ----: |
| individual_comment      | number of comments in Individual plan | number of comments in Individual plan | Comment Count     | JPY      | see table below |     0 |

Range

| More than | Less than | Unit Amount | Fixed Amount |
| --------: | --------: | ----------: | -----------: |
|         0 |        10 |           5 |            0 |
|        11 |       100 |           2 |            0 |
|       101 |           |           1 |            0 |

#### Enterprise Plan – Usage Unit

Measurement Unit: Usage Unit

| Measurement Unit Name | Measurement Unit Display Name | Measurement Unit Description | Target Meter Name | Amount per Unit Usage | Limit | Currency |
| :-------------------- | :---------------------------- | :--------------------------- | :---------------- | :-------------------- | :---- | :------- |
| enterprise_comment    | number of comments in Enterprise plan      | number of comments in Enterprise plan     | Comment Count      | 0                     | 0     | JPY      |

## Feature Menu

| Feature Menu Name | Feature Menu Display Name  | Feature Menu Description   | Measurement Unit                                                               |
| :---------------- | :------------------------- | :------------------------- | :----------------------------------------------------------------------------- |
| individual_menu     | Individual plan basic menu   | Individual plan basic menu   | Individual plan basic fee<br/>Individual plan comments       |
| enterprise_menu   | Enterprise plan basic menu | Enterprise plan basic menu | Enterprise plan basic fee<br/>Enterprise plan comments |

## Pricing Plan

| Pricing Plan Name | Pricing Plan Display Name | Pricing Plan Description | Feature Menu               |
| :---------------- | :------------------------ | :----------------------- | :------------------------- |
| Individual plan     | Individual plan             | Individual plan            | Individual plan basic menu   |
| Enterprise plan   | Enterprise plan           | Enterprise plan          | Enterprise plan basic menu |
---

# Assigning Users to Tenants and Setting Roles

URL: https://www.prisma.io/docs/part-6/usecase/about-saas-user-accounts/add-tenant-user
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

After a tenant has been created, you can then associate the self-signed up user with the tenant.

Please append the following to the tenant creation source code:

<Tabs>
<TabItem value="php" label="PHP">

```php
    // Retrieve user attribute information
    $userAttributesResponse = $authClient->getUserAttributes();
    $userAttributes = $userAttributesResponse->getUserAttributes();
    foreach ($userAttributes as $attribute) {
        $attributeName = $attribute->getAttributeName();
        $attributeType = $attribute->getAttributeType();

        // Replace if a number type is defined in the user attribute information
        if (isset($userAttributeValues[$attributeName]) && $attributeType === 'number') {
            $userAttributeValues[$attributeName] = (int) $userAttributeValues[$attributeName];
        }
    }

    // Create parameters for tenant user registration
    $createTenantUserParam = new CreateTenantUserParam();
    $createTenantUserParam
        ->setEmail($email)
        ->setAttributes($userAttributeValues);

    // Add a SaaS user to the tenant users
    $tenantUser = $authClient->createTenantUser($tenantId, $createTenantUserParam);
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
    // Retrieve user attribute information
    const userAttributesObj = (await client.userAttributeApi.getUserAttributes()).data
    const userAttributes = userAttributesObj.user_attributes
    let userAttributeValuesCopy = userAttributeValues || {}

    // Replace if a number type is defined in the user attribute information
    userAttributes.forEach((attribute) => {
      const attributeName = attribute.attribute_name
      const attributeType = attribute.attribute_type

      if (userAttributeValuesCopy[attributeName] && attributeType === 'number') {
        userAttributeValuesCopy[attributeName] = parseInt(userAttributeValuesCopy[attributeName], 10);
      }
    });

    // Create parameters for tenant user registration
    const createTenantUserParam: CreateTenantUserParam = {
      email: userInfo.email,
      attributes: userAttributeValuesCopy
    }

    // Add a SaaS user to the tenant users
    const tenantUser = (await client.tenantUserApi.createTenantUser(tenantId, createTenantUserParam)).data
```

</TabItem>

<TabItem value="go" label="Go">

```go
    // Retrieve user attribute information
    userAttributesResp, err := authClient.GetUserAttributesWithResponse(context.Background())
    if err != nil {
        c.Logger().Errorf("Failed to retrieve user attributes: %v", err)
        return c.JSON(http.StatusInternalServerError, echo.Map{"error": "Failed to retrieve user attributes"})
    }

    userAttributes := userAttributesResp.JSON200
    if userAttributeValues == nil {
        userAttributeValues = make(map[string]interface{})
    }

    // Replace if a number type is defined in the user attribute information
    if userAttributes != nil {
        for _, attribute := range userAttributes.UserAttributes {
            attributeName := attribute.AttributeName
            attributeType := attribute.AttributeType
            if value, ok := userAttributeValues[attributeName]; ok && attributeType == "number" {
                userAttributeValues[attributeName], err = strconv.Atoi(value.(string))
                if err != nil {
                    c.Logger().Errorf("Invalid user attribute value: %v", err)
                    return c.JSON(http.StatusBadRequest, echo.Map{"error": "Invalid user attribute value"})
                }
            }
        }
    }

    // Create parameters for tenant user registration
    createTenantUserParam := authapi.CreateTenantUserParam{
        Email:      userInfo.Email,
        Attributes: userAttributeValues,
    }

    // Add a SaaS user to the tenant users
    tenantUserResp, err := authClient.CreateTenantUserWithResponse(context.Background(), tenantID, createTenantUserParam)
```

</TabItem>

<TabItem value="python" label="Python">

```python
        # Retrieve user attribute information
        user_attributes_obj = UserAttributeApi(api_client=api_client).get_user_attributes()

        # Replace if a number type is defined in the user attribute information
        if user_attribute_values is None:
            user_attribute_values = {}
        else:
            user_attributes = user_attributes_obj.user_attributes
            for attribute in user_attributes:
                attribute_name = attribute.attribute_name
                attribute_type = attribute.attribute_type.value

                if attribute_name in user_attribute_values:
                    if attribute_type == "number":
                        user_attribute_values[attribute_name] = int(user_attribute_values[attribute_name])

        # Create parameters for tenant user registration
        create_tenant_user_param = CreateTenantUserParam(
            email=auth_user.email,  # 登録者自身のメールアドレス
            attributes=user_attribute_values
        )

        # Add a SaaS user to the tenant users
        tenant_user = TenantUserApi(api_client=api_client).create_tenant_user(
            tenant_id=tenant_id,
            create_tenant_user_param=create_tenant_user_param
        )
```

</TabItem>

<TabItem value="java" label="Java">

```java
        // Retrieve user attribute information
        UserAttributeApi userAttributeApi = new UserAttributeApi(apiClient);
        UserAttributes userAttributes = userAttributeApi.getUserAttributes();

        // Replace if a number type is defined in the user attribute information
        for (Attribute attribute : userAttributes.getUserAttributes()) {
            String attributeName = attribute.getAttributeName();
            String attributeType = attribute.getAttributeType().getValue();

            if (userAttributeValues.containsKey(attributeName)) {
                Object attributeValue = userAttributeValues.get(attributeName);

                if ("number".equalsIgnoreCase(attributeType)) {
                    try {
                        int numericValue = Integer.parseInt(attributeValue.toString());
                        userAttributeValues.put(attributeName, numericValue);
                    } catch (NumberFormatException e) {
                        System.err.println("Invalid value for user attribute: " + attributeName);
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                                "Invalid value for user attribute: " + attributeName);
                    }
                }
            }
        }

        // Create parameters for tenant user registration
        CreateTenantUserParam createTenantUserParam = new CreateTenantUserParam()
                .email(userInfo.getEmail())
                .attributes(userAttributeValues);

        // Add a SaaS user to the tenant users
        TenantUserApi tenantUserApi = new TenantUserApi(apiClient);
        User tenantUser = tenantUserApi.createTenantUser(tenantId, createTenantUserParam);
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
        // Retrieve user attribute information
        var userAttributeApi = new UserAttributeApi(authApiClientConfig);
        var userAttributes = await userAttributeApi.GetUserAttributesAsync();

        // Replace if a number type is defined in the user attribute information
        foreach (var attribute in userAttributes.VarUserAttributes)
        {
            var attributeName = attribute.AttributeName;
            var attributeType = attribute.AttributeType.ToString();

            if (userAttributeValues.ContainsKey(attributeName))
            {
                userAttributeValues[attributeName] = ConvertToExpectedType(userAttributeValues[attributeName], attributeType);
            }
        }

        // Create parameters for tenant user registration
        var createTenantUserParam = new CreateTenantUserParam(userInfo.Email, userAttributeValues);

        // Add a SaaS user to the tenant users
        var tenantUserApi = new TenantUserApi(authApiClientConfig);
        var tenantUser = await tenantUserApi.CreateTenantUserAsync(tenantId, createTenantUserParam);
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
        // Retrieve user attribute information
        var userAttributeApi = new UserAttributeApi(authApiClientConfig);
        var userAttributes = await userAttributeApi.GetUserAttributesAsync();

        // Replace if a number type is defined in the user attribute information
        foreach (var attribute in userAttributes.VarUserAttributes)
        {
            var attributeName = attribute.AttributeName;
            var attributeType = attribute.AttributeType.ToString();

            if (userAttributeValues.ContainsKey(attributeName) && attributeType.ToLower() == "number")
            {
                if (int.TryParse(userAttributeValues[attributeName]?.ToString(), out int numericValue))
                {
                    userAttributeValues[attributeName] = numericValue;
                }
                else
                {
                    return BadRequest("Invalid attribute value");
                }
            }
        }

        // Create parameters for tenant user registration
        var createTenantUserParam = new CreateTenantUserParam(userInfo.Email, userAttributeValues);

        // Add a SaaS user to the tenant users
        var tenantUserApi = new TenantUserApi(authApiClientConfig);
        var tenantUser = await tenantUserApi.CreateTenantUserAsync(tenantId, createTenantUserParam);
```

</TabItem>
</Tabs>

Please use the CreateTenantUserParam object.

setAttributes sets the attribute information of the tenant defined in <a href="/docs/tutorial/prepare-saas-platform#defining-additional-attributes-for-a-tenant" target="_blank">Defining Additional Attributes for a Tenant</a>.

Next, set the role.

Please append the following code:

<Tabs>
<TabItem value="php" label="PHP">

```php
    // Create parameters for role configuration
    $create_tenant_user_roles_param = new CreateTenantUserRolesParam();
    $create_tenant_user_roles_param->setRoleNames(['admin']);

    // Assign a role to the created tenant user
    $auth_api_client->createTenantUserRoles($tenant->getId(), $request['userinfo']['id'], getenv('DEFAULT_SAASUSER_ENV'), $create_tenant_user_roles_param);
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
    // Create parameters for role configuration
    const createTenantUserRolesParam: CreateTenantUserRolesParam = {
      role_names: ['admin']
    }

    // Assign a role to the created tenant user
    await client.tenantUserApi.createTenantUserRoles(tenantId, tenantUser.id, 3, createTenantUserRolesParam)
```

</TabItem>

<TabItem value="go" label="Go">

```go
    // Create parameters for role configuration
    createTenantUserRolesParam := authapi.CreateTenantUserRolesParam{
        RoleNames: []string{"admin"},
    }

    // Assign a role to the created tenant user
    _, err = authClient.CreateTenantUserRolesWithResponse(context.Background(), tenantID, tenantUserResp.JSON201.Id, 3, createTenantUserRolesParam)
```

</TabItem>

<TabItem value="python" label="Python">

```python
        # Create parameters for role configuration
        create_tenant_user_roles_param = CreateTenantUserRolesParam(role_names=["admin"])

        # Assign a role to the created tenant user
        TenantUserApi(api_client=api_client).create_tenant_user_roles(tenant_id=tenant_id, user_id=tenant_user.id, env_id=3, create_tenant_user_roles_param=create_tenant_user_roles_param)
```

</TabItem>

<TabItem value="java" label="Java">

```java
        // Create parameters for role configuration
        CreateTenantUserRolesParam createTenantUserRolesParam = new CreateTenantUserRolesParam();
        createTenantUserRolesParam.setRoleNames(Arrays.asList("admin"));

        // Assign a role to the created tenant user
        tenantUserApi.createTenantUserRoles(tenantId, tenantUser.getId(), 3, createTenantUserRolesParam);
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
        // Create parameters for role configuration
        var createTenantUserRolesParam = new CreateTenantUserRolesParam(new List<string> { "admin" });

        // Assign a role to the created tenant user
        await tenantUserApi.CreateTenantUserRolesAsync(tenantId, tenantUser.Id, 3, createTenantUserRolesParam);
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
        // Create parameters for role configuration
        var createTenantUserRolesParam = new CreateTenantUserRolesParam(new List<string> { "admin" });

        // Assign a role to the created tenant user
        await tenantUserApi.CreateTenantUserRolesAsync(tenantId, tenantUser.Id, 3, createTenantUserRolesParam);
```

</TabItem>
</Tabs>

Please use the CreateTenantUserRolesParam object.

setRoleNames allows you to specify multiple roles.


The values that can be specified are the "Role Name" that you created in <a href="/docs/tutorial/prepare-saas-platform#role-definition" target="_blank">Role Definition</a>.

You can check whether the tenant user was registered via API in "SaaS Operation Console > User Management".

![user](/img/part-6/usecase/about-saas-user-accounts/add-tenant-user/user.png)

---

# Creating a Tenant

URL: https://www.prisma.io/docs/part-6/usecase/about-saas-user-accounts/create-tenant
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Once self-signup is complete, the next step is to create a tenant.

In this case, the <a href="/docs/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans" target="_blank">Free Plan</a> created in the tutorial will be automatically applied when creating a tenant.

<Tabs>
<TabItem value="php" label="PHP">

```php
    // Retrieving validated data
    $validated = $request->validated();

    // Using the SaaSusSDK
    $client = new ApiClient();
    $authClient = $this->client->getAuthClient();
    $pricingClient = $this->client->getPricingClient();

    // Searching for pricing plans
    $pricingPlans = $pricingClient->getPricingPlans();
    $nextPlanId = "";
    foreach ($pricingPlans->getPricingPlans() as $pricingPlan) {
        if ($pricingPlan['display_name'] == 'Free Plan') {
            $nextPlanId = $pricingPlan['id'];
        }
    }

    // Raise an error if the plan id could not be obtained
    if (empty($nextPlanId)) {
        return response()->json(['detail' => 'Failed to retrieve plan information.'], Response::HTTP_INTERNAL_SERVER_ERROR);
    }

    // Tenant creation
    // Tenant name: Name entered on the screen
    // Back office staff email: Logged-in user's email address
    $tenant = $authClient->createTenant((object)array(
        'name' => $tenantName,
        'back_office_staff_email' => $email,
    ));

    // Retrieve the ID of the created tenant
    $tenantId = $tenant->getId();

    // Specify a time at least 5 minutes in the future from the current time when changing the plan
    $currentTimeWith5MinutesAfterUnixTime = Carbon::now('UTC')->addMinutes(5)->timestamp;

    // Update plan information
    $authClient->updateTenantPlan($tenantId, (object)array(
        'next_plan_id' => $nextPlanId,
        'using_next_plan_from' => $currentTimeWith5MinutesAfterUnixTime,
    ));
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
    // Retrieving validated data
    const { tenantName, userAttributeValues }: SelfSignUpRequest = request.body;
    if (!tenantName) {
    return response.status(400).send({ message: 'Missing required fields' });
    }

    const userInfo = request.userInfo
    if (userInfo === undefined) {
    return response.status(400).json({ detail: 'No user' })
    }

    // Searching for pricing plans
    const pricingClient = new PricingClient()
    const pricingPlans = (await pricingClient.pricingPlansApi.getPricingPlans()).data.pricing_plans
    let nextPlanId = ""
    for (const pricingPlan of pricingPlans) {
        if (pricingPlan.display_name === "Free Plan") {
            nextPlanId = pricingPlan.id;
        }
    }

    // Raise an error if the plan id could not be obtained
    if (!nextPlanId) {
        return response.status(400).send({ message: 'Failed to retrieve plan information.' });
    }

    // Tenant creation
    // Tenant name: Name entered on the screen
    // Back office staff email: Logged-in user's email address
    const tenantProps: TenantProps = {
        name: tenantName,
        attributes: [],
        back_office_staff_email: userInfo.email
    }
    const client = new AuthClient()
    const createdTenant = (await client.tenantApi.createTenant(tenantProps)).data

    // Retrieve the ID of the created tenant
    const tenantId = createdTenant.id

    // Specify a time at least 5 minutes in the future from the current time when changing the plan
    const currentTimeWith5MinutesAfterUnixTime = dayjs().add(5, 'minute').unix()
    const planReservation: PlanReservation = {
        next_plan_id: nextPlanId,
        using_next_plan_from: currentTimeWith5MinutesAfterUnixTime
    }

    // Update plan information
    await client.tenantApi.updateTenantPlan(tenantId, planReservation)
```

</TabItem>

<TabItem value="go" label="Go">

```go
	// Retrieving validated data
	var request SelfSignupRequest
	tenantName := request.TenantName
	userAttributeValues := request.UserAttributeValues

	// Searching for pricing plans
	pricingPlans, err := pricingClient.GetPricingPlansWithResponse(context.Background())
	var nextPlanId string
	if pricingPlans.JSON200 != nil {
		for _, pricingPlan := range pricingPlans.JSON200.PricingPlans {
			if pricingPlan.DisplayName == "Free Plan" {
				nextPlanId = pricingPlan.Id
				break
			}
		}
	}

	// Raise an error if the plan id could not be obtained
	if nextPlanId == "" {
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": "Failed to retrieve plan information."})
	}

	// Tenant creation
	// Tenant name: Name entered on the screen
	// Back office staff email: Logged-in user's email address
	tenantProps := authapi.CreateTenantParam{
		Name:                 tenantName,
		BackOfficeStaffEmail: userInfo.Email,
	}

	tenantResp, err := authClient.CreateTenantWithResponse(context.Background(), tenantProps)
	if err != nil {
		c.Logger().Errorf("Failed to create tenant: %v", err)
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": "Failed to create tenant"})
	}

	// Retrieve the ID of the created tenant
	tenantID := tenantResp.JSON201.Id

	// Specify a time at least 5 minutes in the future from the current time when changing the plan
	currentTimeWith5MinutesAfterUnixTime := time.Now().Add(5 * time.Minute).Unix()

	// Convert int64 to int  
	usingNextPlanFrom := int(currentTimeWith5MinutesAfterUnixTime)

	planReservation := authapi.PlanReservation{
		NextPlanId:        &nextPlanId,
		NextPlanTaxRateId: nil,
		UsingNextPlanFrom: &usingNextPlanFrom,
	}

	// Update plan information
	authClient.UpdateTenantPlan(context.Background(), tenantID, planReservation)
```

</TabItem>

<TabItem value="python" label="Python">

```python
    # Retrieving validated data
    tenant_name = request.tenantName
    user_attribute_values = request.userAttributeValues

    try:
        # Searching for pricing plans
        pricing_plan_api = PricingPlansApi(api_client=pricing_api_client)
        pricing_plans = pricing_plan_api.get_pricing_plans().to_dict()
        next_plan_id = ""
        for pricing_plan in pricing_plans["pricing_plans"]:
            if pricing_plan["display_name"] == "Free Plan":
                next_plan_id = pricing_plan["id"]

        # Raise an error if the plan id could not be obtained
        if not next_plan_id:
            raise HTTPException(status_code=500, detail="Failed to retrieve plan information.")

        # Tenant creation
        # Tenant name: Name entered on the screen
        # Back office staff email: Logged-in user's email address
        tenant_props = TenantProps(
            name=tenant_name,
            attributes={},
            back_office_staff_email=auth_user.email
        )

        tenant_api = TenantApi(api_client=api_client)
        created_tenant = tenant_api.create_tenant(body=tenant_props)

        # Retrieve the ID of the created tenant
        tenant_id = created_tenant.id

        # Get JST (Japan Standard Time) timezone
        jst = pytz.timezone('Asia/Tokyo')

        # Get the current local time (JST)
        local_time = datetime.now(jst)

        # Specify a time at least 5 minutes in the future from the current time when changing the plan
        current_time_with_5_minutes_after_unix_time = int((local_time + timedelta(minutes=5)).timestamp())
        plan_reservation = PlanReservation(
            next_plan_id = next_plan_id,
            using_next_plan_from = current_time_with_5_minutes_after_unix_time
        )

        # Update plan information
        TenantApi(api_client=api_client).update_tenant_plan(
            tenant_id=tenant_id,
            body=plan_reservation
        )
```

</TabItem>

<TabItem value="java" label="Java">

```java
    // Retrieving validated data
    String tenantName = (String) requestBody.get("tenantName");
    Map<String, Object> userAttributeValues = requestBody.get("userAttributeValues") != null
            ? (Map<String, Object>) requestBody.get("userAttributeValues")
            : new HashMap<>();

    AuthApiClient apiClient = new Configuration().getAuthApiClient();
    apiClient.setReferer(request.getHeader("Referer"));
    UserInfoApi userInfoApi = new UserInfoApi(apiClient);
    UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));

    if (userInfo.getTenants() != null && !userInfo.getTenants().isEmpty()) {
        System.err.println("User is already associated with a tenant");
        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User is already associated with a tenant");
    }

    // Searching for pricing plans
    PricingApiClient pricingApiClient = new Configuration().getPricingApiClient();
    pricingApiClient.setReferer(request.getHeader("Referer"));
    PricingPlansApi pricingPlansApi = new PricingPlansApi(pricingApiClient);
    PricingPlans pricingPlans = null;
    pricingPlans = pricingPlansApi.getPricingPlans();
    String nextPlanId = "";
    for (PricingPlan pricingPlan : pricingPlans.getPricingPlans()) {
        if ("Free Plan".equals(pricingPlan.getDisplayName())) {
            nextPlanId = pricingPlan.getId();
            break;
        }
    }

    // Raise an error if the plan id could not be obtained
    if (nextPlanId == null || nextPlanId.isEmpty()) {
        return ResponseEntity
            .status(HttpStatus.HTTP_INTERNAL_SERVER_ERROR)
            .body("Failed to retrieve plan information.");
    }

    TenantApi tenantApi = new TenantApi(apiClient);
    
    // Tenant creation
    // Tenant name: Name entered on the screen
    // Back office staff email: Logged-in user's email address
    TenantProps tenantProps = new TenantProps()
            .name(tenantName)
            .backOfficeStaffEmail(userInfo.getEmail());
    
    Tenant createdTenant = tenantApi.createTenant(tenantProps);

    // Retrieve the ID of the created tenant
    String tenantId = createdTenant.getId();

    // Specify a time at least 5 minutes in the future from the current time when changing the plan
    long currentTimeWith5MinutesAfterUnixTime = Instant.now()
        .plus(5, ChronoUnit.MINUTES)
        .getEpochSecond();

    PlanReservation planReservation = new PlanReservation()
            .nextPlanId(nextPlanId)
            .usingNextPlanFrom((int) currentTimeWith5MinutesAfterUnixTime);

    // Update plan information
    tenantApi.updateTenantPlan(tenantId, planReservation);
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
        // Retrieving validated data
        string tenantName = requestBody.TenantName;
        var userAttributeValues = requestBody.UserAttributeValues ?? new Dictionary<string, object>();

        // Searching for pricing plans
        var pricingClientConfig = CreateClientConfiguration(c => c.GetPricingApiClientConfig(), context);
        var pricingPlansApi = new PricingPlansApi(pricingClientConfig);
        var pricingPlans = pricingPlansApi.GetPricingPlans();
        string nextPlanId = "";
        foreach (var pricingPlan in pricingPlans.VarPricingPlans)
        {
            if (pricingPlan.DisplayName == "Free Plan")
            {
                nextPlanId = pricingPlan.Id;
                break;
            }
        }

        // Raise an error if the plan id could not be obtained
        if (string.IsNullOrEmpty(nextPlanId))
        {
            Results.Problem(detail: "Failed to retrieve plan information.", statusCode: 500);
        }

        // Tenant creation
        // Tenant name: Name entered on the screen
        // Back office staff email: Logged-in user's email address
        var tenantApi = new TenantApi(authApiClientConfig);
        var tenantProps = new TenantProps(
            name: tenantName,
            attributes: new Dictionary<string, object>(),
            backOfficeStaffEmail: userInfo.Email
        );
        var createdTenant = await tenantApi.CreateTenantAsync(tenantProps);

        // Retrieve the ID of the created tenant
        var tenantId = createdTenant.Id;

        // Specify a time at least 5 minutes in the future from the current time when changing the plan
        var currentTimeWith5MinutesAfterUnixTime = DateTimeOffset.UtcNow.AddMinutes(5).ToUnixTimeSeconds();
        var planReservation = new PlanReservation
        {
            NextPlanId = nextPlanId,
            UsingNextPlanFrom = (int)currentTimeWith5MinutesAfterUnixTime
        };

        // Update plan information
        tenantApi.UpdateTenantPlan(tenantId, planReservation);
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
        // Retrieving validated data
        string tenantName = request.TenantName;
        var userAttributeValues = request.UserAttributeValues ?? new Dictionary<string, object>();
        
        // Searching for pricing plans
        var pricingApiClientConfig = CreateClientConfiguration(c => c.GetPricingApiClientConfig());
        var pricingPlansApi = new PricingPlansApi(pricingApiClientConfig);
        pricingapi.Model.PricingPlans pricingPlans = await pricingPlansApi.GetPricingPlansAsync();
        string nextPlanId = "";
        foreach (var pricingPlan in pricingPlans.VarPricingPlans)
        {
            if (pricingPlan.DisplayName == "Free Plan")
            {
                nextPlanId = pricingPlan.Id;
                break;
            }
        }

        // Raise an error if the plan id could not be obtained
        if (string.IsNullOrEmpty(nextPlanId))
        {
            return InternalServerError();
        }

        // Tenant creation
        // Tenant name: Name entered on the screen
        // Back office staff email: Logged-in user's email address
        var tenantProps = new TenantProps(
            name: tenantName,
            attributes: new Dictionary<string, object>(),
            backOfficeStaffEmail: userInfo.Email
        );
        var createdTenant = await tenantApi.CreateTenantAsync(tenantProps);

        // Retrieve the ID of the created tenant
        var tenantId = createdTenant.Id;

        // Specify a time at least 5 minutes in the future from the current time when changing the plan
        var currentTimeWith5MinutesAfterUnixTime = new DateTimeOffset(DateTime.UtcNow.AddMinutes(5)).ToUnixTimeSeconds();
        var planReservation = new PlanReservation(
            nextPlanId: nextPlanId,
            usingNextPlanFrom: (int)currentTimeWith5MinutesAfterUnixTime
        );

        // Update plan information
        tenantApi.UpdateTenantPlan(tenantId, planReservation);
```

</TabItem>
</Tabs>

You can check if the tenant was created successfully using the API by visiting "SaaS Operation Console > Tenant Management".

![tenant](/img/part-6/usecase/about-saas-user-accounts/create-tenant/tenant.png) 

---

# About SaaS User Accounts

URL: https://www.prisma.io/docs/part-6/usecase/about-saas-user-accounts
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

This document will explain how SaaS user accounts are managed on the SaaSus Platform.

## 1. Components of an Account

An account consist of the following elements, which must all be set to allow usage:

- SaaS User  
  Stores the authentication data (ID, Password) for the SaaS
- Tenant User  
  Stores which tenant the SaaS user belongs to
- Role  
  Stores which permissions the tenant user has

## 2. About Relations

A SaaS user can belong to multiple tenants.  
Also, a user can have multiple roles within a tenant.

Example)  
User A belongs to tenant A and has the role of Administrator.  
User A also belongs to tenant B and has roles of both Administrator and Regular User.  
It can be expressed diagrammatically as follows:


![relation](/img/part-6/usecase/about-saas-user-accounts/relation.svg)


## 3. About Account Creation Patterns

- Case of Self-Signup  
  Example)  
  The user who wants to use the SaaS creates their own account from a self-signup page.  
  The tenant is created at the time of account creation, and the user becomes the administrator of that tenant.
- Case where the SaaS has a User Creation Function Implemented  
  Example)  
  The tenant's administrator creates roles of "Administrator" and "Regular User" using the user creation function.
- Case where an Account is Created from the SaaS Operation Console  
  Example)  
  Upon request from a user, the SaaS administrator creates an account from the SaaS Operation Console.  
  sign in information is notified to the user via email or EventBridge integration, and the user starts using the account.

### 3.1. Implementation for Self-Signup Case

#### 3.1.1. Allow User Self-Signup

SaaS Development Console - Authentication Authorization - Advanced Settings - Authentication Tab - Self-Signup (new registration by the user)  
Enable "Users can register themselves".

![self-sign-up-setting](/img/part-6/usecase/about-saas-user-accounts/self-sign-up-setting.png)

When allowing self-signup, "Sign up here" will be displayed on the sign in page generated by the SaaSus Platform.

![self-sign-up](/img/part-6/usecase/about-saas-user-accounts/self-sign-up.png)


The users can create accounts from this link.  
What gets created here is the 'SaaS User' in the components of an account.

#### 3.1.2. Implement Handling of Post-Self-Signup Process

When self-signup is completed, the user transitions to your SaaS in a sign in state.
The transition page can be set at:  
SaaS Development Console - Basics - Auth Transition - Callback URL

When self-signup is enabled, the following judgement needs to be made at the Callback URL.  
This verification can be performed by checking whether the tenants information is included within the UserInfo array obtained from the SaaSus Platform.

<Tabs>
<TabItem value="php" label="PHP">

```php
        // Implement self-signup process if tenant registration isn't done
        if (empty($request->userinfo['tenants']))
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
        const userInfo = request.userInfo

        // Implement self-signup process if tenant registration isn't done
        if (!userInfo.tenants || userInfo.tenants.length === 0)
```

</TabItem>

<TabItem value="go" label="Go">

```go
        userInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)

        // Implement self-signup process if tenant registration isn't done
        if len(userInfo.Tenants) == 0 
```

</TabItem>

<TabItem value="python" label="Python">

```python
        // Implement self-signup process if tenant registration isn't done
        if not auth_user.tenants:
```

</TabItem>

<TabItem value="java" label="Java">

```java
        // Implement self-signup process if tenant registration isn't done
        if (userInfo.getTenants() == null || userInfo.getTenants().isEmpty())
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
        // Implement self-signup process if tenant registration isn't done
        if (userInfo.Tenants == null || !userInfo.Tenants.Any())
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
        // Implement self-signup process if tenant registration isn't done
        if (userInfo.Tenants == null || !userInfo.Tenants.Any())
```

</TabItem>
</Tabs>

#### 3.1.3. Implementation Sample

Try modifying the <a href="/docs/part-6/usecase/about-saas-user-accounts/create-tenant" target="blank">Creating a Tenant</a>, so that tenant registration can be done.

Once tenant registration can be done, let's <a href="/docs/part-6/usecase/about-saas-user-accounts/add-tenant-user" target="_blank">assign a user to a tenant and set a role</a>.

After creating a tenant and a tenant user, verify whether the configured tenant information appears in the tenants array within UserInfo.

<Tabs>
<TabItem value="php" label="PHP">

```php
dd($request->userinfo['tenants']);
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
        const userInfo = request.userInfo
        console.log(userInfo.tenants)
```

</TabItem>

<TabItem value="go" label="Go">

```go
        fmt.Printf("Tenants: %+v\n", tenants)
```

</TabItem>

<TabItem value="python" label="Python">

```python
        print(auth_user.tenants)
```

</TabItem>

<TabItem value="java" label="Java">

```java
        UserInfo userInfo = null;
        userInfo = userInfoApi.getUserInfo(getIDToken(request));
        System.out.println(userInfo);
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
        var userInfoApi = new UserInfoApi(authApiClientConfig);
        var userInfo = await userInfoApi.GetUserInfoAsync(token);
        Console.WriteLine(string.Join("\n", userInfo.Tenants.Select(tenant => tenant.ToString())));
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());
        var userInfoApi = new UserInfoApi(authApiClientConfig);
        var userInfo = await userInfoApi.GetUserInfoAsync(token);
        foreach (var tenant in userInfo.Tenants)
        {
            Console.WriteLine(tenant.ToString());
        }
```

</TabItem>
</Tabs>

Once the tenant information can be obtained, and the tenant user has been created, try to sign in through a normal sign in flow to verify if it works.

### 3.2. Implementation for the Case where SaaS have User Creation Feature

Let's implement the case where the administrator, who self-signed up, creates a new user.

Firstly, register a new user on SaaS.

<Tabs>
<TabItem value="php" label="PHP">

```php
        $client = new ApiClient();
        $authApiClient = $client->getAuthClient();

        $createSaasUserParam = new CreateSaasUserParam();
        $createSaasUserParam
            ->setEmail($inputs['email'])
            ->setPassword($inputs['password']);

        $authApiClient->createSaasUser($createSaasUserParam);
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
        const client = new AuthClient()

        const createSaasUserParam: CreateSaasUserParam = {
          email,
          password
        }

        await client.saasUserApi.createSaasUser(createSaasUserParam)
```

</TabItem>

<TabItem value="go" label="Go">

```go
        var authClient *authapi.ClientWithResponses

        createSaasUserParam := authapi.CreateSaasUserJSONRequestBody{
          Email:    email,
          Password: password,
        }

        _, err = authClient.CreateSaasUser(context.Background(), createSaasUserParam)
```

</TabItem>

<TabItem value="python" label="Python">

```python
        from saasus_sdk_python.src.auth import SaasUserApi, CreateSaasUserParam

        api_client = SignedAuthApiClient()
        
        create_saas_user_param = CreateSaasUserParam(email=email, password=password)

        SaasUserApi(api_client=api_client).create_saas_user(create_saas_user_param=create_saas_user_param)
```

</TabItem>

<TabItem value="java" label="Java">

```java
        AuthApiClient apiClient = new Configuration().getAuthApiClient();
        apiClient.setReferer(request.getHeader("Referer"));
        
        CreateSaasUserParam createSaasUserParam = new CreateSaasUserParam().email(email).password(password);
        saasUserApi.createSaasUser(createSaasUserParam);
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
        var saasUserApi = new SaasUserApi(authApiClientConfig);

        var createSaasUserParam = new CreateSaasUserParam(email, password);
        
        await saasUserApi.CreateSaasUserAsync(createSaasUserParam);
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
        var saasUserApi = new SaasUserApi(authApiClientConfig);

        var createSaasUserParam = new CreateSaasUserParam(email, password);
        
        await saasUserApi.CreateSaasUserAsync(createSaasUserParam);
```

</TabItem>
</Tabs>

Once user registration is successful on SaaS, retrieve the tenant information from the registrant's `request->userinfo['tenants']`, and <a href="/docs/part-6/usecase/about-saas-user-accounts/add-tenant-user" target="_blank">assign a user to a tenant and set a role</a>.

### 3.3. Implementation for the Case where Account Creation is done from SaaS Operation Console

Coming soon.

---

# Authentication Methods

URL: https://www.prisma.io/docs/part-6/usecase/authentication-methods
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Authentication Methods
In web applications, including SaaS, there are two main authentication methods:<br/>
・Session-based authentication<br/>
・Token-based authentication<br/>

SaaSus Platform adopts **token-based authentication**.<br/>
The following sections provide an overview of each authentication method.


# Types of Authentication
### Session-Based Authentication
Session-based authentication is a method in which the client authenticates using a **session ID generated by the server.**<br/>
This method allows **for stateful communication**; however, it **places a higher load on the server compared to token-based authentication**.
![01](/img/part-6/usecase/authentication-methods/authentication-methods-01.png)

### Token-Based Authentication
Token-based authentication is a method in which the client authenticates using **token information**.<br/>
This method does not require the server to store authentication information, making **it lower in server load compared to session-based authentication** and enabling **stateless communication**.
![02](/img/part-6/usecase/authentication-methods/authentication-methods-02.png)

### Differences Between Session-Based and Token-Based Authentication
Session-based authentication **stores authentication information on the server**, whereas token-based authentication **does not store authentication information on the server and relies solely on token validation for authentication**.<br/>


# Authentication in SaaSus Platform
SaaSus Platform adopts **token-based authentication**.<br/>
Token generation and validation are performed using the SaaSus SDK, which calls the SaaSus Platform API.
![03](/img/part-6/usecase/authentication-methods/authentication-methods-03.png)

# Authentication Timing
When executing processes that require login, authentication must be performed at the time the server receives the request.

In SaaSus Platform, authentication is carried out for each request using the SaaSus SDK.<br/>
By executing the user information retrieval process in the SDK, the following information can be obtained:<br/>
・Token validation<br/>
・Retrieval of logged-in user information (user data, tenant data, permissions)<br/>

If there are multiple processes that require login, it is necessary to check the login status by retrieving user information using the SaaSus SDK at the start of each process.
![04](/img/part-6/usecase/authentication-methods/authentication-methods-04.png)

As the number of processes increases, implementing authentication individually becomes challenging.<br/>
Therefore, it is recommended to utilize the middleware functionality of the framework to introduce a unified authentication check mechanism.
![05](/img/part-6/usecase/authentication-methods/authentication-methods-05.png)

# Types of Tokens
SaaSus Platform generates the following three types of tokens:<br/>
・ID Token<br/>
・Access Token<br/>
・Refresh Token<br/>

### ID Token
The ID token is used for authentication and has a validity period of one hour.<br/>
Once the token expires, it becomes invalid, and the SaaS user will be logged out.
<Tabs>
<TabItem value="php" label="PHP">

```php
// In the case of Laravel, use the standard Auth Middleware of the SaaSus SDK in the routing file.
// Define routes for features that require authentication on the SaaSus Platform.
Route::middleware(\AntiPatternInc\Saasus\Laravel\Middleware\Auth::class)->group(function () {
    Route::get('/userinfo', [IndexController::class, 'userinfo']);
    Route::get('/users', [IndexController::class, 'users']);
    Route::get('/tenant_attributes', [IndexController::class, 'tenantAttributes']);
    Route::get('/user_attributes', [IndexController::class, 'userAttributes']);
    Route::post('/user_register', [IndexController::class, 'userRegister']);
    Route::delete('/user_delete', [IndexController::class, 'userDelete']);
    Route::get('/delete_user_log', [IndexController::class, 'deleteUserLog']);
    Route::get('/pricing_plan', [IndexController::class, 'pricingPlan']);
    Route::get('/tenant_attributes_list', [IndexController::class, 'tenantAttributesList']);
    Route::post('/self_sign_up', [IndexController::class, 'selfSignUp']);
    Route::post('/logout', [IndexController::class, 'logout']);
});
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
// In the case of Express, use the standard AuthMiddleware of the SaaSus SDK.
// Define routes for features that require authentication on the SaaSus Platform.
import { AuthMiddleware } from 'saasus-sdk'

app.use([
  '/userinfo', 
  '/users', 
  '/tenant_attributes', 
  '/user_register', 
  '/user_delete', 
  '/delete_user_log', 
  '/pricing_plan', 
  '/tenant_attributes_list', 
  '/self_sign_up'
], AuthMiddleware)
```

</TabItem>

<TabItem value="go" label="Go">

```go
// By using the created authMiddlewareEcho, user authentication is performed, and UserInfo is set in the context.
authMiddleware := authMiddlewareEcho(idTokenGetter)

e.GET("/userinfo", getMe, authMiddleware)
e.GET("/users", getUsers, authMiddleware)
e.GET("/tenant_attributes", getTenantAttributes, authMiddleware)
e.GET("/user_attributes", getUserAttributes, authMiddleware)
e.GET("/pricing_plan", getPricingPlan, authMiddleware)
e.POST("/user_register", userRegister, authMiddleware)
e.DELETE("/user_delete", userDelete, authMiddleware)
e.GET("/delete_user_log", getDeleteUserLogs, authMiddleware)
e.POST("/self_sign_up", selfSignup, authMiddleware)
e.POST("/logout", logout, authMiddleware)

func authMiddlewareEcho(getter middleware.IDTokenGetter) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			userInfo, err := middleware.Authenticate(c.Request().Context(), getter.GetIDToken(c.Request()))
			if err != nil {
				http.Error(c.Response().Writer, "Unauthorized "+err.Error(), http.StatusUnauthorized)
				return nil
			}

			c.Set(string(ctxlib.UserInfoKey), userInfo)
			return next(c)
		}
	}
}
```

</TabItem>


<TabItem value="python" label="Python">

```python
# In the case of FastAPI, create an authentication method.
def fastapi_auth(request: Request) -> Union[dict, HTTPException]:
    auth_header = request.headers.get("Authorization", "")
    token = auth_header.replace("Bearer ", "") if "Bearer " in auth_header else ""
    referer = request.headers.get("Referer", "")
    user_info, error = auth.authenticate(id_token=token, referer=referer)
    if error:
        raise HTTPException(status_code=401, detail=str(error))
    return user_info

# Call the created authentication method in routes that require authentication.
@app.get("/userinfo")
def get_user_info(user_info: dict = Depends(fastapi_auth)):
    return user_info
```

</TabItem>

<TabItem value="java" label="Java">

```java
// Create a method to obtain the ID token
public static String getIDToken(HttpServletRequest request) {
    String authHeader = request.getHeader("Authorization");
    if (authHeader != null) {
        StringTokenizer st = new StringTokenizer(authHeader);
        if (st.countTokens() == 2 && st.nextToken().equalsIgnoreCase("Bearer")) {
            return st.nextToken();
        }
    }
    return "";
}

@GetMapping(value = "/userinfo", produces = "application/json")
public ResponseEntity<?> getMe(HttpSession session, HttpServletRequest request) throws Exception {
    AuthApiClient apiClient = new Configuration().getAuthApiClient();
    apiClient.setReferer(request.getHeader("Referer"));

    UserInfoApi userInfoApi = new UserInfoApi(apiClient);
    UserInfo userInfo = null;
    try {
        // Call the created method to obtain the ID token when executing authentication-required processes.
        userInfo = userInfoApi.getUserInfo(getIDToken(request));
        System.out.println(userInfo);
    } catch (ApiException e) {
        System.err.println("Exception when calling UserInfoApi#getUserInfo");
        System.err.println("Status code: " + e.getCode());
        System.err.println("Reason: " + e.getResponseBody());
        System.err.println("Response headers: " + e.getResponseHeaders());
        e.printStackTrace();
        throw e;
    }

    System.out.println(userInfo.toJson());
    return ResponseEntity.ok(userInfo.toJson());
}
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
// Create a method to obtain the ID token
string? GetBearerToken(HttpContext context)
{
    if (context.Request.Headers.TryGetValue("Authorization", out var authHeader) &&
        authHeader.ToString().StartsWith("Bearer "))
    {
        return authHeader.ToString().Substring("Bearer ".Length).Trim();
    }
    return null;
}

app.MapGet("/userinfo", async (HttpContext context) =>
{
    // Call the created method to obtain the ID token when executing authentication-required processes.
    var token = GetBearerToken(context);
    if (string.IsNullOrEmpty(token))
    {
        return Results.Unauthorized();
    }

    try
    {
        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
        var userInfoApi = new UserInfoApi(authApiClientConfig);
        var userInfo = await userInfoApi.GetUserInfoAsync(token);

        var jsonResponse = userInfo.ToJson();
        return Results.Text(jsonResponse, "application/json");
    }
    catch (Exception ex)
    {
        return HandleApiException(ex);
    }
});
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
// Create a method to obtain the ID token
private string GetBearerToken(HttpRequestMessage request)
{
    var authHeader = request.Headers.Authorization;
    if (authHeader != null && authHeader.Scheme.Equals("Bearer", StringComparison.OrdinalIgnoreCase))
    {
        return authHeader.Parameter?.Trim() ?? throw new HttpResponseException(HttpStatusCode.Unauthorized);
    }

    throw new HttpResponseException(HttpStatusCode.Unauthorized);
}

[HttpGet]
[Route("userinfo")]
public async Task<IHttpActionResult> GetUserInfo()
{
    try
    {
        // Call the created method to obtain the ID token when executing authentication-required processes.
        var token = GetBearerToken(Request);
        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());
        var userInfoApi = new UserInfoApi(authApiClientConfig);
        var userInfo = await userInfoApi.GetUserInfoAsync(token);

        return Ok(userInfo);
    }
    catch (Exception ex)
    {
        return HandleApiException(ex);
    }
}
```

</TabItem>
</Tabs>

### Refresh Token
If a longer login session is required, the refresh token can be used to regenerate the ID token, enabling continuous login.<br/>
The refresh token has a validity period of one month.
<Tabs>
<TabItem value="php" label="PHP">

```php
public function refresh(Request $request)
{
    // Obtain the refresh token
    $refreshToken = $request->cookie('SaaSusRefreshToken');
    if (!is_string($refreshToken)) {
        return response('Refresh token not found', Response::HTTP_BAD_REQUEST);
    }

    try {
        $authClient = $this->client->getAuthClient();

        // The first argument is for setting the temporary code, so specify Blank.
        // Set the authentication flow to refreshTokenAuth in the second argument, and set the refresh token retrieved from the Cookie in the third argument.
        $response = $authClient->getAuthCredentials([
            '',
            'refreshTokenAuth',
            $refreshToken
        ]);

        return response()->json($response->getBody());
    } catch (\Exception $e) {
        return response('Error occurred', Response::HTTP_INTERNAL_SERVER_ERROR);
    }
}
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
app.get('/refresh', async (request: Request, response: Response) => {
    // Obtain the refresh token
    const refreshToken = request.cookies.SaaSusRefreshToken
    if (typeof refreshToken !== 'string') {
        response.status(400).send('Refresh token not found')
        return
    }

    const client = new AuthClient()
    // The first argument is for setting the temporary code, so specify Blank.
    // Set the authentication flow to refreshTokenAuth in the second argument, and set the refresh token retrieved from the Cookie in the third argument.
    const credentials = (
        await client.credentialApi.getAuthCredentials(
        '',
        'refreshTokenAuth',
        refreshToken
        )
    ).data
    response.send(credentials)
})
```

</TabItem>

<TabItem value="go" label="Go">

```go
func refresh(c echo.Context) error {
    // Obtain the refresh token
	token, err := c.Cookie("SaaSusRefreshToken")
	if err != nil {
		return c.String(http.StatusInternalServerError, "internal server error")
	}
	c.Logger().Error("SaaSusRefreshToken: %v", token.Value)

    // Set the refresh token retrieved from the Cookie in the second argument.
	credentials, err := credential.GetAuthCredentialsWithRefreshTokenAuth(context.Background(), token.Value)
	if err != nil {
		return c.String(http.StatusInternalServerError, "internal server error")
	}

	return c.JSON(http.StatusOK, credentials)
}
```

</TabItem>

<TabItem value="python" label="Python">

```python
@app.get("/refresh")
def refresh(request: Request):
    # Obtain the refresh token
    saasus_refresh_token = request.cookies.get("SaaSusRefreshToken")
    if not saasus_refresh_token:
        raise HTTPException(status_code=400, detail="SaaSusRefreshToken is missing")

    try:
        # Obtain new authentication credentials using the refresh token.
        credentials = callback.get_refresh_token_auth_credentials(saasus_refresh_token)

        return credentials
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

</TabItem>

<TabItem value="java" label="Java">

```java
// Obtain the refresh token from the cookie.
@GetMapping(value = "/refresh", produces = "application/json")
public ResponseEntity<?> refresh(HttpSession session, HttpServletRequest request,
        @CookieValue(name = "SaaSusRefreshToken", defaultValue = "") String cookieValue) throws Exception {
    if (cookieValue == "") {
        return ResponseEntity.badRequest().body("No refresh token found");
    }

    AuthApiClient apiClient = new Configuration().getAuthApiClient();
    apiClient.setReferer(request.getHeader("Referer"));
    CredentialApi apiInstance = new CredentialApi(apiClient);
    Credentials result = null;
    try {
        // Set the first argument to null to specify a temporary code.
        // Set the second argument to refreshTokenAuth for the authentication flow, and set the third argument to the refresh token obtained from the cookie.
        result = apiInstance.getAuthCredentials(null, "refreshTokenAuth", cookieValue);
    } catch (ApiException e) {
        System.err.println("Exception when calling CredentialApi#getAuthCredentials");
        System.err.println("Status code: " + e.getCode());
        System.err.println("Reason: " + e.getResponseBody());
        System.err.println("Response headers: " + e.getResponseHeaders());
        e.printStackTrace();
        throw e;
    }
    return ResponseEntity.ok(result.toJson());
}
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
app.MapGet("/refresh", async (HttpContext context) =>
{
    // Retrieve the refresh token from the cookie.
    var refreshToken = context.Request.Cookies["SaaSusRefreshToken"];
    if (string.IsNullOrEmpty(refreshToken))
    {
        return Results.BadRequest("No refresh token found.");
    }

    try
    {
        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
        var credentialApi = new CredentialApi(authApiClientConfig);
        // Set the first argument to null to specify a temporary code.
        // Set the second argument to refreshTokenAuth for the authentication flow, and set the third argument to the refresh token obtained from the cookie.
        var credentials = await credentialApi.GetAuthCredentialsAsync(null, "refreshTokenAuth", refreshToken);

        var jsonResponse = credentials.ToJson();
        return Results.Text(jsonResponse, "application/json");
    }
    catch (Exception ex)
    {
        return HandleApiException(ex);
    }
});
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
[HttpGet]
[Route("refresh")]
public async Task<IHttpActionResult> Refresh()
{
    try
    {
        // Retrieve the refresh token from the cookie.
        var refreshTokenCookie = Request.Headers.GetCookies("SaaSusRefreshToken").FirstOrDefault();
        if (refreshTokenCookie == null)
        {
            return BadRequest("No refresh token found.");
        }

        var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());
        var credentialApi = new CredentialApi(authApiClientConfig);
        // Set the first argument to null to specify a temporary code.
        // Set the second argument to refreshTokenAuth for the authentication flow, and set the third argument to the refresh token obtained from the cookie.
        var credentials = await credentialApi.GetAuthCredentialsAsync(null, "refreshTokenAuth", refreshTokenCookie["SaaSusRefreshToken"].Value);

        return Ok(credentials);
    }
    catch (Exception ex)
    {
        return HandleApiException(ex);
    }
}
```

</TabItem>
</Tabs>

### Access Token
The access token is required when using features that require authorization.<br/>
For example, it is used for functions that require specific permissions, such as inviting users to a tenant.
<Tabs>
<TabItem value="php" label="PHP">

```php
    // Retrieve information from the request.
    $email = $request->input('email');
    $tenantId = $request->input('tenantId');
    if (!$email || !$tenantId) {
        return response()->json(['message' => 'Missing required fields'], Response::HTTP_BAD_REQUEST);
    }

    // Retrieve UserInfo.
    $userInfo = $request->userinfo;
    if (!$userInfo) {
        return response()->json(['detail' => 'No user'], Response::HTTP_BAD_REQUEST);
    }

    try {
        // Retrieve the access token of the user creating the invitation.
        $accessToken = $request->header('X-Access-Token');

        // If the access token is not included in the request header, return an error.
        if (empty($accessToken)) {
            return response()->json(['error' => 'Access token is missing'], 401);
        }

        // Create the parameters for the tenant invitation.
        $createTenantInvitationParamEnvsItem = new CreateTenantInvitationParamEnvsItem();
        $createTenantInvitationParamEnvsItem
            ->setId(3) // Specify the ID of the production environment: 3.
            ->setRoleNames(['admin']);
        $createTenantInvitationParam = new CreateTenantInvitationParam();
        $createTenantInvitationParam
            ->setEmail($email)
            ->setAccessToken($accessToken)
            ->setEnvs([$createTenantInvitationParamEnvsItem]);

        // Call the tenant invitation API.
        $authClient = $this->client->getAuthClient();
        $authClient->createTenantInvitation(
            $tenantId,
            $createTenantInvitationParam
        );

        return response()->json(['message' => 'Create tenant user invitation successfully']);
    } catch (\Exception $e) {
        Log::error($e->getMessage());
        return response()->json(['detail' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR);
    }
```

</TabItem>

<TabItem value="nodejs" label="Node.js">

```js
    const { email, password, tenantId, userAttributeValues }: UserRegisterRequest = request.body
    if (!email || !password || !tenantId) {
        return response.status(400).send({ message: 'Missing required fields' });
    }

    const userInfo = request.userInfo
    if (userInfo === undefined) {
        return response.status(400).json({ detail: 'No user' })
    }

    try {
        // Retrieve the access token of the user creating the invitation.
        const accessToken = request.header('X-Access-Token')

        // If the access token is not included in the request header, return an error.
        if (!accessToken) {
        return response.status(401).json({ detail: 'Access token is missing' })
        }

        // Create the parameters for the tenant invitation.
        const invitedUserEnvironmentInformationInner: InvitedUserEnvironmentInformationInner = {
        id: 3,  // Specify the ID of the production environment: 3.
        role_names: ['admin']
        }
        const createTenantInvitationParam: CreateTenantInvitationParam = {
        email: email,
        access_token: accessToken,
        envs: [invitedUserEnvironmentInformationInner]
        }

        // Call the tenant invitation API.
        const client = new AuthClient()
        await client.invitationApi.createTenantInvitation(tenantId, createTenantInvitationParam)

        response.json({ message: 'Create tenant user invitation successfully' })
    } catch (error) {
        console.error(error);
        response.status(500).json({ detail: error });
    }
```

</TabItem>

<TabItem value="go" label="Go">

```go
var request UserRegisterRequest
	if err := c.Bind(&request); err != nil {
		return c.JSON(http.StatusBadRequest, echo.Map{"error": "Invalid request"})
	}

	email := request.Email
	tenantID := request.TenantID

	userInfo, ok := c.Get(string(ctxlib.UserInfoKey)).(*authapi.UserInfo)
	if !ok {
		c.Logger().Error("failed to get user info")
		return c.String(http.StatusInternalServerError, "internal server error")
	}

	// Retrieve the access token of the user creating the invitation.
	accessToken := c.Request().Header.Get("X-Access-Token")

	// If the access token is not included in the request header, return an error.
	if accessToken == "" {
		return c.String(http.StatusBadRequest, "Access token is missing")
	}

	// Create the parameters for the tenant invitation.
	createTenantInvitationJSONRequestBody := authapi.CreateTenantInvitationJSONRequestBody{
		AccessToken: accessToken,
		Email:       email,
		Envs: []struct {
			Id        uint64   `json:"id"`
			RoleNames []string `json:"role_names"`
		}{
			{
				Id:        3,                 // Specify the ID of the production environment: 3.
				RoleNames: []string{"admin"},
			},
		},
	}

	// Call the tenant invitation API.
	authClient.CreateTenantInvitation(context.Background(), tenantID, createTenantInvitationJSONRequestBody)

	return c.JSON(http.StatusOK, echo.Map{"message": "Create tenant user invitation successfully"})
```

</TabItem>

<TabItem value="python" label="Python">

```python
# Retrieve information from the request.
email = request.email
tenant_id = request.tenantId

try:
    # Retrieve the access token of the user creating the invitation.
    access_token = fast_request.headers.get("X-Access-Token")

    # If the access token is not included in the request header, return an error.
    if not access_token:
        raise HTTPException(status_code=401, detail="Access token is missing")
    
    # Create the parameters for the tenant invitation.
    invited_user_environment_information_inner = InvitedUserEnvironmentInformationInner(
        id=3, # Specify the ID of the production environment: 3.
        role_names=['admin']
    )
    create_tenant_invitation_param = CreateTenantInvitationParam(
        email=email,
        access_token=access_token,
        envs=[invited_user_environment_information_inner]
    )

    # Call the tenant invitation API.
    InvitationApi(api_client=api_client).create_tenant_invitation(tenant_id=tenant_id, create_tenant_invitation_param=create_tenant_invitation_param)

    return {"message": "Create tenant user invitation successfully"}
except Exception as e:
    print(e)
    raise HTTPException(status_code=500, detail=str(e))
```

</TabItem>

<TabItem value="java" label="Java">

```java
try {
    String email = requestBody.getEmail();
    String tenantId = requestBody.getTenantId();

    AuthApiClient apiClient = new Configuration().getAuthApiClient();
    apiClient.setReferer(request.getHeader("Referer"));

    UserInfoApi userInfoApi = new UserInfoApi(apiClient);
    UserInfo userInfo = userInfoApi.getUserInfo(getIDToken(request));

    // Retrieve the access token from the request header.
    String accessToken = request.getHeader("X-Access-Token");

    // If the access token is not included in the request header, return an error.
    if (accessToken == null || accessToken.isEmpty()) {
        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Access token is missing");
    }

    // Create the parameters for the tenant invitation.
    InvitedUserEnvironmentInformationInner invitedUserEnvironmentInformationInner = new InvitedUserEnvironmentInformationInner()
        .id(3) // Specify the ID of the production environment: 3.
        .addRoleNamesItem("admin");
    CreateTenantInvitationParam createTenantInvitationParam = new CreateTenantInvitationParam()
        .email(email)
        .accessToken(accessToken)
        .addEnvsItem(invitedUserEnvironmentInformationInner);

    // Call the tenant invitation API.
    InvitationApi invitationApi = new InvitationApi(apiClient);
    invitationApi.createTenantInvitation(tenantId, createTenantInvitationParam);

    Map<String, String> successResponse = new HashMap<>();
    successResponse.put("message", "Create tenant user invitation successfully");
    return ResponseEntity.ok(successResponse);
} catch (ApiException e) {
    System.err.println("API Exception: " + e.getMessage());
    throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "API Exception: " + e.getMessage(), e);
} catch (Exception e) {
    System.err.println("Unexpected Exception: " + e.getMessage());
    throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Unexpected Exception: " + e.getMessage(), e);
}
```

</TabItem>

<TabItem value="csharp" label="C#(.Net8)">

```csharp
var validationResults = new List<ValidationResult>();
var validationContext = new ValidationContext(requestBody);
if (!Validator.TryValidateObject(requestBody, validationContext, validationResults, true))
{
    var errors = validationResults.Select(vr => new { Field = vr.MemberNames.FirstOrDefault(), Error = vr.ErrorMessage });
    return Results.BadRequest(new { error = "Validation failed.", details = errors });
}

string email = requestBody.Email;
string tenantId = requestBody.TenantId;

try
{
    // Retrieve the access token from the request header.
    var accessToken = context.Request.Headers["X-Access-Token"].FirstOrDefault();

    // If the access token is not included in the request header, return an error.
    if (string.IsNullOrEmpty(accessToken))
    {
        return Results.Unauthorized();
    }

    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig(), context);
    var invitationApi = new InvitationApi(authApiClientConfig);

    // Create an object to add to the envs.
    var invitedEnv = new InvitedUserEnvironmentInformationInner(
        id: 3, // Specify the ID of the production environment: 3.
        roleNames: new List<string> { "admin" }
    );

    // Create a list of envs
    var envsList = new List<InvitedUserEnvironmentInformationInner> { invitedEnv };

    // Create the parameters for the tenant invitation.
    var createTenantInvitationParam = new CreateTenantInvitationParam(
        email,
        accessToken,
        envsList
    );

    // Call the tenant invitation API.
    invitationApi.CreateTenantInvitation(tenantId, createTenantInvitationParam);

    return Results.Ok(new { message = "Create tenant user invitation successfully" });
}
catch (Exception ex)
{
    Console.Error.WriteLine($"Error: {ex.Message}");
    return Results.Problem(detail: ex.Message, statusCode: 500);
}
```

</TabItem>

<TabItem value="csharp(.Netfw4.8)" label="C#(.Netfw4.8)">

```csharp
if (!ModelState.IsValid)
    return BadRequest(ModelState);

string email = request.Email;
string tenantId = request.TenantId;

try
{
    // Retrieve the access token from the request header.
    var accessToken = HttpContext.Current.Request.Headers.Get("X-Access-Token");

    var authApiClientConfig = CreateClientConfiguration(c => c.GetAuthApiClientConfig());
    var invitationApi = new InvitationApi(authApiClientConfig);

    // Create an object to add to the envs.
    var invitedEnv = new InvitedUserEnvironmentInformationInner(
        id: 3, // Specify the ID of the production environment: 3.
        roleNames: new List<string> { "admin" }
    );

    // Create a list of envs
    var envsList = new List<InvitedUserEnvironmentInformationInner> { invitedEnv };

    // Create the parameters for the tenant invitation.
    var createTenantInvitationParam = new CreateTenantInvitationParam(
        email,
        accessToken,
        envsList
    );

    // Call the tenant invitation API.
    invitationApi.CreateTenantInvitation(tenantId, createTenantInvitationParam);

    return Ok(new { message = "Create tenant user invitation successfully", request });
}
catch (Exception ex)
{
    return HandleApiException(ex);
}
```

</TabItem>
</Tabs>

---

# API / SDK FAQ

URL: https://www.prisma.io/docs/part-7/faq/api-sdk

*Content coming soon. Please check back later.*
---

# Billing FAQ

URL: https://www.prisma.io/docs/part-7/faq/billing

## Using Stripe  
*Content coming soon. Please check back later.*

## Without Stripe  
*Content coming soon. Please check back later.*
---

# SaaSus Platform FAQ

URL: https://www.prisma.io/docs/part-7/faq/saasus-platform

**Q. What countermeasures are available when the service goes down?  
Is it possible to switch and continue business operations?**  
A. The Tokyo region has 3 Availability Zones, and the service will not stop unless all of them experience simultaneous failures.  
AWS has never had a case where all AZs in a region stopped simultaneously, so we consider the risk extremely low.  
A multi-region DR configuration using the Osaka region is also possible, but please consider human resource downtime and cost factors when making decisions based on your requirements.

---

**Q. Can the login screen design be changed?**  
A. Currently, only the "Service Name" and "Icon" can be changed from the SaaS Development Console.  
We may consider CSS customization support in the future.  
Implementation with a custom frontend is also possible, but it is not recommended due to the effort required to keep up with version updates.

---

**Q. What is the relationship between user IDs and tenants?**  
A.  
- One user can belong to multiple tenants  
- One tenant can have multiple users registered  
- Roles can be assigned per tenant, allowing different permission settings for each tenant

---

**Q. Are there any browser restrictions?**  
A. Currently, only Chrome on macOS is guaranteed to work.  
However, we have confirmed operation on the latest versions of major browsers such as Firefox, Edge, and Safari, and there are no special restrictions.

---

**Q. Is it possible to use in an internet-disconnected (intranet-only) environment?**  
A. Currently, the service is premised on internet connection, so it cannot be used in intranet-only environments.

---

**Q. How is security (vulnerability) guaranteed?**  
A.  
- Infrastructure layer: Protected by AWS managed services at the OS level and below  
- Application layer: Dependencies are continuously scanned and updated using vulnerability detection tools  

---

**Q. Is the login screen using a DV certificate? Is the security adequate?**  
A. Yes, we use a DV (Domain Validation) certificate.  
Communication is encrypted, so the security of login information is ensured.  
There is no difference in encryption strength compared to OV certificates.

---

**Q. Is backup and restore possible from the SaaSus Platform console?**  
A. The SaaSus Platform console does not provide arbitrary backup/point-in-time restore functions, so please consider backup via API if needed.

---

**Q. Plans have user number restrictions, but are there no performance issues even with unlimited plans?**  
A. We provide dedicated data stores for each customer as standard, and computational processing auto-scales according to load conditions, so unlimited plans can handle large-scale user numbers.  
If you provide specific performance requirements (user count, access trends, peaks, etc.), we can conduct performance tests and make proposals.

---

**Q. Is there an SLA (availability guarantee)?**  
A. Enterprise plans provide an SLA (Service Quality Guarantee) with 99.99% uptime.  
Pricing is based on individual estimates, so please [contact us](https://saasus.io/pricing#support).

---

**Q. Can SaaSus Platform run on platforms other than AWS?**  
A. Core features can be used without depending on cloud platforms.  
However, the following features are only supported on AWS environments:  
    - Amazon EventBridge integration
    - AWS Marketplace integration
    - SaaS infrastructure management
    - Smart API Gateway features (Smart MCP Server features)

---

**Q. Are there any UI/UX constraints?**  
A. There are no particular constraints. It supports React, Vue.js and other frontend implementations as well as server-side rendering.  
Please [contact us](https://saasus.io/pricing#support) if you have specific requirements.

---

**Q. Are there any microservice adoption examples?**  
A. There are no public examples at this time, but microservicing specific functions such as WMS can be expected to improve scalability. Discussion is possible upon consultation.

---

**Q. Can the SaaSus Platform console be displayed transparently from a specified domain URL?**  
A. It is designed so that customers cannot see through the use of SaaSus Platform.  
However, requests to SaaSus Platform can be confirmed by checking communication content with browser developer tools.

---

**Q. Is user management shared across multiple environments (production/staging)?**  
A. User management is independent for each environment, and users will not be mixed between production and staging.

---

**Q. Please tell me specific use cases for the role management function.**  
A. For example, the following operations are possible:  
- Define roles such as shipper/administrator/worker and control display menus and operation permissions for each role  
- By combining with location information,  
  - Display "worker operation status at location A" to administrators of location A  
  - Allow workers at location A to access only their own location's data  
  - No access to information from other locations  

---

**Q. Can tenant information be referenced on the SaaS side? (Want to use for printing company names and addresses on reports)**  
A. Yes, it is possible.  
By default, detailed information such as addresses and phone numbers is not included,  
but you can add necessary fields (e.g., address, phone number, contact person name, etc.) from "Tenant Attribute Definition" in the SaaS Development Console.  
Added attributes can be retrieved via API or screen display, so they can be used as data for report printing.

---

**Q. Are there limits on the number of tenants and users?**  
A. Upper limits are set according to your plan.  
For specific upper limits, please check the [plan details](https://saasus.io/pricing).  
When the limit is reached, warnings will be displayed on the SaaS Operation Console and notifications will be sent to your registered email address. You can continue using the service for a certain period, but please consider upgrading to a higher plan.

---

# Support

URL: https://www.prisma.io/docs/part-7/support

## Support Channels

SaaSus Platform provides support channels such as Intercom and Slack Connect based on your subscription plan.  
For more details, see our  [pricing plans.](https://saasus.io/en).

| Channel        | Support Level   |
|----------------|-----------------|
| Intercom       | Best Effort     |
| Slack Connect  | Best Effort     |

:::info
"Best Effort" means we will respond as quickly as possible, but it does not include any SLA or uptime guarantee.
:::
---

# Risk Assessment

URL: https://www.prisma.io/docs/part-8/risk-assessment

## Risk Assessment Information

### 1. Commitment to Information Security

- SaaSus Platform is **ISO/IEC 27001 (ISMS) certified**.  
- All employees receive security training compliant with ISO standards.  
- Security Policy: [https://anti-pattern.co.jp/information-security-policy](https://anti-pattern.co.jp/information-security-policy)

### 2. Personal Data & Confidentiality

- **Personal Data Handling**: The operator does **not** use customer-entered data for its own purposes.  
- **Confidentiality**: A non-disclosure clause is defined in the [Terms of Service – Article 25](https://saasus.io/terms).  
- All employees sign an **NDA upon hiring**.

### 3. Management of Sub-processors

- All sub-processors sign an **NDA**.  
- Their security posture is **monitored under ISMS** requirements.

### 4. Service Overview & Operations

| Item                | Details                          |
|---------------------|----------------------------------|
| **Service Name**    | SaaSus Platform                  |
| **Launch Date**     | 24 Dec 2022                      |
| **Service Hours**   | 24 / 7 / 365                     |
| **Customization**   | Not available (SaaS model). Professional Services can assist where needed. |

### 5. Contract & Service Changes

- **Cancellation**: No penalty, no advance notice required.  
- **Service Changes**: Material changes are announced **by e-mail at least one month in advance**.  
- **Data Return at Contract End**:  
  - No obligation to return data  
  - No deletion certificate issued

### 6. Security Measures

- **Transport Encryption**: TLS (SSL/TLS) enforced  
- **Health Monitoring**: AWS CloudWatch  
- **WAF / DDoS / Vulnerability Scans**: Implemented  
- **Application & Infrastructure Logs**: Stored in CloudTrail for 10 years (access limited to our ops team)  
- **API Access Control**: Signed-request authentication prevents misuse

### 7. Availability & Performance

| Metric / Control | Value |
|------------------|-------|
| **Uptime – Design** | 99.95 % |
| **Uptime – Actual** | 99.99 % |
| **Disaster Recovery (DR)** | **RTO** : 4 h &nbsp;/&nbsp; **RPO** : 24 h (DR tests completed) |
| **Backups** | Taken every 24 hours (generation count confidential) |

### 8. Support & Notifications

- **Contact Channels**:  
  - In-console inquiry form  
  - Slack Connect (available on eligible plans)  
- **Incident Notifications**: Sent to the registered representative e-mail address.  
- **Periodic Reports**: Not provided.

---

### Corporate, Financial, and Organizational Information

These details are disclosed individually **only when required** for risk assessments or similar evaluations.

---

# Analysis API

URL: https://www.prisma.io/docs/reference/analysis-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="analysisapi-spec" />

---

# ApiGateway API

URL: https://www.prisma.io/docs/reference/apigateway-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="apigatewayapi-spec" />

---

# Apilog API

URL: https://www.prisma.io/docs/reference/apilog-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="apilogapi-spec" />

---

# Auth API

URL: https://www.prisma.io/docs/reference/auth-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="authapi-spec" />

---

# Awsmarketplace API

URL: https://www.prisma.io/docs/reference/awsmarketplace-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="awsmarketplaceapi-spec" />

---

# Billing API

URL: https://www.prisma.io/docs/reference/billing-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="billingapi-spec" />

---

# Communication API

URL: https://www.prisma.io/docs/reference/communication-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="communicationapi-spec" />

---

# Getting Started

URL: https://www.prisma.io/docs/reference/getting-started-with-your-api
A signature is necessary to call the SaaSus API.

Authorization Header:  
SAASUSSIGV1 Sig=Signature, SaaSID=SaaS ID, APIKey=API Key  

Signature = date and time information + API Key + HTTP method + URL (Host: Port/URI) + Request Body  
Date and time information: YYYYMMDDHHNN (minute information in UTC)  
Obtain HMAC-SHA256 with the above information as a secret key and use it as a signature  

All API responses have an “X-Saasus-Trace-Id” header. This is used to enable API tracing during Amazon EventBridge integration.  
“X-Saasus-Trace-Id” header can also be specified at request time. If specified at request time, the Trace-Id is inherited.

API  
[SaaSus Auth API Schema](/docs/reference/auth-api)  
APIs related to user information, basic information, authentication information, tenant information, role information, etc.

[SaaSus Billing API Schema](/docs/reference/billing-api)  
APIs pertaining to obtaining, updating, and deleting information related to external SaaS used in billing operations.

[SaaSus Pricing API Schema](/docs/reference/pricing-api)  
APIs related to pricing units, feature menus, pricing plans, metering unit count, etc.

[SaaSus Communication API Schema](/docs/reference/communication-api)  
APIs for submitting and retrieving user feedback.

[SaaSus Apilog API Schema](/docs/reference/apilog-api)  
APIs for retrieving and analyzing API execution logs.

[SaaSus Awsmarketplace API Schema](/docs/reference/awsmarketplace-api)  
APIs related to AWS Marketplace integration, customer information management, and plan information management.

[SaaSus Integration API Schema](/docs/reference/integration)  
APIs related to Amazon EventBridge integration.

[SaaSus ApiGateway API Schema](/docs/reference/apigateway-api)  
APIs for configuring, managing, and publishing API Gateway features.

[SaaSus Analysis API Schema](/docs/reference/analysis-api)  
APIs for analyzing user behavior history and data collection.
---

# Integration API

URL: https://www.prisma.io/docs/reference/integration

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="integration-spec" />

---

# Pricing API

URL: https://www.prisma.io/docs/reference/pricing-api

import ApiDocMdx from "@theme/ApiDocMdx";

<ApiDocMdx id="pricingapi-spec" />

---

# Authentication Preference

URL: https://www.prisma.io/docs/tutorial/authentication-preference

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

### Creating a SaaS consumer tenant

First, let's create two tenants for the sample application.

Click “Tenant management” on the side menu.

![01](/img/tutorial/authentication-preference/authentication-preference-01.png)

Click the “Creating a tenant” button to display a pop-up.

The tenant name, addition of representative user, representative email address, representative temporary password, and other tenant attributes added in [Tenant Attributes](/docs/part-4/application-settings/declare-additional-attribute-to-tenant), introduced in Docs are displayed.


First one

- tenant name：Tenant sample 1
- memo：This is the attribute information defined in tenant attributes and can be set freely.
- Add representative user：Create a new user
- Representative email address： [saasus-sample-tenant1@example.com](mailto:saasus-sample-tenant1@example.com)
- Representative's temporary password： Password requirements such as G@2qYPQq

![02](/img/tutorial/authentication-preference/authentication-preference-02.png)

The second one

- tenant name：Sample app tenant 2
- memo：This is the attribute information defined in tenant attributes and can be set freely.
- Add representative user：Create a new user
- Representative email address： [saasus-sample-tenant2@example.com](mailto:saasus-sample-tenant2@example.com)
- Representative's temporary password： Password requirements such as irG_l88r

(There is no set rule, so you can enter other values as well.)

![03](/img/tutorial/authentication-preference/authentication-preference-03.png)

You have now created a tenant and one user belonging to that tenant.

### Creating a SaaS user

Now, let's take a look at the user list. Click "User management" from the side menu.

The user you created earlier is registered as the admin (SaaS administrator) role for each tenant and each environment.

![04](/img/tutorial/authentication-preference/authentication-preference-04.png)

The SaaSus Platform allows the concept of an "environment" to be used as a tenant for SaaS users.

For example, in a SaaS like Stripe that primarily uses APIs, SaaS users will need an environment for testing and developing integrations. <br/>
SaaS administrators can now define multiple environments, such as using an environment called a development environment to perform these tasks and an environment called a production environment for actual operations.

![05](/img/tutorial/authentication-preference/authentication-preference-05.png)

:::info
Depending on SaaS, multiple environments may not be necessary, so if you use a single environment, you only need to be aware of the production environment.
:::

Now, let's register one user for each tenant.

Click the "Create a new user" button in the upper right corner to display a popup.

The email address, password, tenant, and other user attributes added in [User Attributes](/docs/part-4/user-authz-settings/declare-additional-attribute-to-user), introduced in Docs, are displayed.

For now, let's register 4 people.

email address: [user1-1@example.com](mailto:user1-1@example.com)  
password： Meets password requirements  
tenant： Tenant sample 1  
username： User1-1

![06](/img/tutorial/authentication-preference/authentication-preference-06.png)

email address: [user1-2@example.com](mailto:user1-2@example.com)  
password： Meets password requirements  
tenant： Tenant sample 1  
username： User1-2

email address: [user2-1@example.com](mailto:user2-1@example.com)  
password： Meets password requirements  
tenant： Sample app tenant 2  
username： User2-1

email address: [user2-2@example.com](mailto:user2-2@example.com)  
password： Meets password requirements  
tenant： Sample app tenant 2  
username： User2-2

![07](/img/tutorial/authentication-preference/authentication-preference-07.png)

I was able to register 4 additional users.

Please assign appropriate roles to these users using the steps below.

:::caution Required setup before continuing the tutorial
To proceed smoothly with the following tutorial steps, it is essential to assign appropriate roles to users in advance.

Refer to the following page to complete this setup:

- [Roles](/docs/part-4/user-authz-settings/role-definition)
:::

:::info
The following steps require programming knowledge.
:::

### Incorporating an Authentication Module

Integrate the authentication module provided by the SaaSus Platform.

In this application, all URI routes will require authentication. If a user is not authenticated, they will not be able to access the application.

Currently, authentication is handled in the following files:

- For Laravel: `api/routes/web.php`
- For Express: `api/app.ts`

You will replace the existing authentication logic with the one provided by SaaSus.

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)" default>
```

```php
Route::middleware('auth')->group(function () {
   Route::get('/', function () {
       return view('welcome');
   });
   Route::get('/dispatch', 'App\Http\Controllers\DispatchController@index')->name('dispatch');
   Route::get('/board', 'App\Http\Controllers\MessageController@index')->name('board');
   Route::post('/post', 'App\Http\Controllers\MessageController@post')->name('post');
});

require __DIR__ . '/auth.php';
```

```mdx-code-block
</TabItem>
<TabItem value="typescript" label="Express (TS)">
```

```js
app.use(
  session({
    secret: "secret",
    resave: false,
    saveUninitialized: false,
  })
);
app.use(passport.initialize());
app.use(passport.session());
```

```mdx-code-block
</TabItem>
</Tabs>
```

change

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)" default>
```

```php
// Route::middleware('auth')->group(function () {
//     Route::get('/', function () {
//         return view('welcome');
//     });
// Use SaaSus SDK standard Auth Middleware
Route::middleware(\AntiPatternInc\Saasus\Laravel\Middleware\Auth::class)->group(function () {
   Route::get('/dispatch', 'App\Http\Controllers\DispatchController@index')->name('dispatch');
   Route::get('/board', 'App\Http\Controllers\MessageController@index')->name('board');
   Route::post('/post', 'App\Http\Controllers\MessageController@post')->name('post');

   Route::redirect('/', '/board');
});

// require __DIR__ . '/auth.php';
```

```mdx-code-block
</TabItem>
<TabItem value="typescript" label="Express (TS)">
```

```js
import { AuthMiddleware } from "saasus-sdk";
...
// app.use(
//   session({
//     secret: "secret",
//     resave: false,
//     saveUninitialized: false,
//   })
// );
app.use(
  ["/chat", "/api/board", "/api/post", "/api/plan", "/api/tenant"],
  AuthMiddleware
);
// app.use(passport.initialize());
// app.use(passport.session());
```

```mdx-code-block
</TabItem>
</Tabs>
```

### Removing Individual Authentication Logic (Express)

In Express, individual authentication logic was implemented for each route. These need to be removed.

- For Laravel: No changes are required
- For Express: Modify `api/routes/chat.ts`

```mdx-code-block
<Tabs>
<TabItem value="typescript" label="Express (TS)">
```

```ts
router.get(
  "/",
  (req: Request, res: Response, next: NextFunction) => {
    if (req.isAuthenticated()) {
      next();
    } else {
      res.redirect(302, "/login");
    }
  },
  getChats
);
```

```mdx-code-block
</TabItem>
</Tabs>
```

を

```mdx-code-block
<Tabs>
<TabItem value="typescript" label="Express (TS)">
```

```ts
router.get("/", getChats);
```

```mdx-code-block
</TabItem>
</Tabs>
```

### Implementing the Callback URL Handler

Earlier, you defined the callback URL in the SaaS Development Console as:

- For Laravel: [http://localhost/callback](http://localhost/callback)
- For Express: [http://localhost:3000/callback](http://localhost:3000/callback)

Now you need to configure the application to handle requests at `/callback`.

- For Laravel:  
  Add the following line to the end of `api/routes/web.php`.

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)">
```

```php
// Use the SaaSus SDK standard Callback Controller to put the JWT into Cookies or Local Storage
Route::get('/callback', 'AntiPatternInc\Saasus\Laravel\Controllers\CallbackController@index');
```

```mdx-code-block
</TabItem>
</Tabs>
```

Furthermore, to be able to use the View provided by the SaaSus SDK,

Add the path to `api/config/view.php`.

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)" default>
```

```php
   'paths' => [
       resource_path('views'),
       # ↓Add this line: Directory of views provided by SaaSus SDK
       resource_path('../vendor/saasus-platform/saasus-sdk-php/src/Laravel/Views'),
   ],
```

```mdx-code-block
</TabItem>
</Tabs>
```

- For Express:  
  Add an `import` statement and `app.use` to `api/app.ts` to include the router that handles requests to the `/callback` path.

```mdx-code-block
<Tabs>
<TabItem value="typescript" label="Express (TS)">
```

```js
import { router as callbackRouter } from "./routes/callback";

// Other code omitted

app.use("/callback", callbackRouter);
```

```mdx-code-block
</TabItem>
</Tabs>
```

To handle GET requests to `/callback`, create `api/routes/callback.ts` and use the `CallbackRouteFunction` provided by the SaaSus SDK.

```mdx-code-block
<Tabs>
<TabItem value="typescript" label="Express (TS)">
```

```js
import express from "express";
const router = express.Router();
import { CallbackRouteFunction } from "saasus-sdk";

router.get("/", CallbackRouteFunction);

export { router };
```

```mdx-code-block
</TabItem>
</Tabs>
```

Create `views/callback.ejs` as the screen to display after login (in this case, it will redirect to `/chat`).

```mdx-code-block
<Tabs>
<TabItem value="ejs" label="Express (EJS)">
```

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Auth Callback</title>
  </head>

  <body>
    <script>
      location.href = "/chat";
    </script>
  </body>
</html>
```

```mdx-code-block
</TabItem>
</Tabs>
```
Once everything is set up, the authentication information configured in the SaaSus Platform will be passed as part of the request when it reaches your application’s controller.

- For Laravel: Add `Request` as a parameter to the `index` method in `api/app/Http/Controllers/MessageController.php`, and use `dd` to check if `userinfo` is included in `$request`.
- For Express: Inside the `getChats` method in `api/controllers/chat.ts`, use `console.log` to check if `userinfo` is present in `req`.

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)" default>
```

```php
   public function index(Request $request)
   {
       // Check whether user information is being passed from SaaSus Platform
       dd($request->userinfo);
```

```mdx-code-block
</TabItem>
<TabItem value="typescript" label="Express (TS)">
```

```js
const getChats = async (req: Request, res: Response) => {
  // Check whether user information is being passed from SaaSus Platform
  console.dir(req.userInfo,{depth:null});
```

```mdx-code-block
</TabItem>
</Tabs>
```

Up to this point, we have established the basics of collaboration.

Log in from SaaSus Platform and check the operation.

### Verify SaaSus SDK integration

Display the login screen created with SaaSus Platform.

Please display the login screen of the domain you have set, such as [https://auth.sample.saasus.jp](https://auth.sample.saasus.jp).

![09](/img/tutorial/authentication-preference/authentication-preference-09.png)

When you log in with the user email address and password you created earlier, you will be redirected to the URL you set in Callback URL along with your credentials.

For example, let's log in as [user1-1@example.com](mailto:user1-1@example.com).

- For Laravel, if the previous code is working correctly, the user information should be displayed on the screen after login.
- For Express, first run the following command in the terminal to enable log output, then proceed to log in.

```bash
repo$ docker compose logs -f
```

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)" default>
```

```php
array:3 [▼
  "email" => "user1-1@example.com"
  "id" => "f6a02019-1306-431f-b93d-3a756b312481"
  "tenants" => array:1 [▼
    0 => array:7 [▼
      "back_office_staff_email" => "saasus-sample-tenant1@example.com"
      "completed_sign_up" => true
      "envs" => array:1 [▼
        0 => array:3 [▼
          "id" => 1
          "name" => "dev"
          "roles" => array:1 [▼
            0 => array:2 [▼
              "display_name" => "General users"
              "role_name" => "user"
            ]
          ]
        ]
      ]
      "id" => "7b639774-6fba-4b26-b580-f3d755876a4b"
      "name" => "Tenant sample 1"
      "plan_id" => "bc011444-a9f1-41c0-8251-bc8928b09ee7"
      "user_attribute" => array:1 [▼
        "username" => "user1-1"
      ]
    ]
  ]
]
```

```mdx-code-block
</TabItem>
<TabItem value="express-logs" label="Express (Docker Logs)">
```

```js
{
  email: 'user1-1@example.com',
  id: '951fe2e3-b89b-40cf-95db-2fc11f09cbdf',
  tenants: [
    {
      back_office_staff_email: 'saasus-sample-tenant1@example.com',
      completed_sign_up: true,
      envs: [
        {
          id: 3,
          name: 'prod',
          roles: [ { display_name: 'General User', role_name: 'user' } ]
        }
      ],
      id: '2d76c5ed-8462-4de0-b107-97bb97b7e9e2',
      is_paid: true,
      name: 'Tenant Sample 1',
      plan_id: 'ddb8b9e9-5fe4-48cc-846e-b9031552877a',
      user_attribute: { username: 'user1-1' }
    }
  ],
  user_attribute: {}
```

```mdx-code-block
</TabItem>
</Tabs>
```

You can see that the user information and tenant information that were set in SaaSus Platform earlier can be obtained on the application side.

The redirect destination URL is now received by the SaaSus SDK standard Callback process ([http://localhost/callback](http://localhost/callback)), and in that process, the browser's Local Storage or remember authentication information in a cookie.

Then, the SaaSus SDK's Auth Middleware uses the SaaSus Platform to verify the authentication information, retrieve the user information, and pack it into the Request object.

Processing then moves to the application's controller, so at this point the application already has information about the logged-in person.

Now, let's use this information to make our bulletin board application multi-tenant-enabled.

### Multi-tenancy of sample application

- For Laravel: `api/app/Http/Controllers/MessageController.php`
- For Express: `api/controllers/chat.ts`

This is the main process, so let's add the process to make it multi-tenant compatible here.

First, change the display part.
Let's rewrite the whole part below.

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)" default>
```

```php
   public function index(Request $request)
   {
       // Various user information and tenant information are entered in $request->userinfo, so use it
       $messages = Message::where('tenant_id', $request->userinfo['tenants'][0]['id'])->get();
       return view('messageBoard.index', ['messages' => $messages, 'plans' => $this::PLANS, 'tenant_name' => $request->userinfo['tenants'][0]['name']]);
   }
```

```mdx-code-block
</TabItem>
<TabItem value="typescript" label="Express (TS)">
```

```js
const getChats = async (req: Request, res: Response) => {
  try {
    const messages = await db.Messages.findAll({
      where: {
        tenant_id: req.userInfo?.tenants[0].id,
      },
    });
    res.render("chat", {
      messages: messages,
      plans: PLANS,
      tenant_name: req.userInfo?.tenants[0].name,
    });
  } catch (error) {
    console.error(error);
    res.redirect("/chat");
  }
};
```

```mdx-code-block
</TabItem>
</Tabs>
```

In this way, the DB will be searched based on the tenant ID that has been passed.

Next is the posting part.

```mdx-code-block
<Tabs>
<TabItem value="php" label="Laravel (PHP)" default>
```

```php
   public function post(Request $request)
   {
       $validated = $request->validate([
           'message' => 'required|max:255'
       ]);

       // Get various information from userinfo of $request and use it for judgment
       $message = Message::create([
            'tenant_id' => $request->userinfo['tenants'][0]['id'],
            'user_id' => $request->userinfo['tenants'][0]['user_attribute']['username'],
            'message' => $request->message,
        ]);

       $request->session()->regenerateToken();
       return redirect()->route('board');
   }
```

```mdx-code-block
</TabItem>
<TabItem value="typescript" label="Express (TS)">
```

```js
const postChats = async (req: Request, res: Response) => {
  const mes = req.body.message;
  const tenantId = req.userInfo?.tenants[0].id || "";
  const userName =
    req.userInfo?.tenants[0].user_attribute.username;
  try {
    await db.Messages.create({
      tenant_id: tenantId,
      user_id: userName,
      message: mes,
    });
  } catch (error) {
    console.error(error);
  }
  res.redirect("/chat");
};
```

```mdx-code-block
</TabItem>
</Tabs>
```

Based on the passed user attributes, the tenant ID and user name are stored as a set.

Let's try displaying the user ID on the screen display as well.

- For Express: No changes are needed
- For Laravel: Edit `api/resources/views/messageBoard/index.blade.php`

Around line 32, change `$message->user->name` to `$message->user_id`.

Before correction：

```html
                   <div class="mt-4">
                       <p>
                           {{ $message->user->name }}
                           <span class="text-xs text-gray-500">
                               {{ $message->created_at->format('Y/m/d H:i') }}
                           </span>
                       </p>
```

After correction：

```html
                   <div class="mt-4">
                       <p>
                           {{ $message->user_id }}
                           <span class="text-xs text-gray-500">
                               {{ $message->created_at->format('Y/m/d H:i') }}
                           </span>
                       </p>
```

Multi-tenant support is now possible.

Now, let's log in and try it out.

As before, log in from the login screen created with SaaSus Platform.

When you log in, you will see that the tenant name has changed to the one you set earlier in the SaaS Development Console.

![10](/img/tutorial/authentication-preference/authentication-preference-10.png)

I don't have any data yet, so I'll post some.

![11](/img/tutorial/authentication-preference/authentication-preference-11.png)

I have confirmed that the username is also displayed.

Now go back to the login screen, log in as [user1-2@example.com](mailto:user1-2@example.com), and try posting some posts.

![12](/img/tutorial/authentication-preference/authentication-preference-14.png)

Of course it will be reflected on the screen.

Now, let's log in as the user of the other tenant [user2-1@example.com](mailto:user2-1@example.com).

![13](/img/tutorial/authentication-preference/authentication-preference-13.png)

You can see that the tenant name display has changed and the contents are now empty.

I have confirmed that I can only access information for my own tenant.

Now, after making a few posts in the same way, log in as [user2-2@example.com](mailto:user2-2@example.com) and check that you can display information for the same tenant.

![14](/img/tutorial/authentication-preference/authentication-preference-14.png)

In this way, separation of each tenant is completed.

As for the separation method this time, we used a pool type model to perform separation within the same DB and perform tenant separation using a simple method. Even if you select a tenant separation method according to your requirements, such as schema separation or database separation, you can similarly obtain and implement tenant information using the SaaSus SDK.

Now that we have separated the tenants, let's implement the fee-related functions.
---

# Configuring SDK For SaaSus Platform

URL: https://www.prisma.io/docs/tutorial/configuring-sdk-for-saasus-platform

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

### Check your SaaS ID, API key, and client secret

First, view your API key in the **SaaS Development Console**. <br/>
This key is used to configure the application.

A "SaaS ID" is typically generated by default.<br/>
If needed, you can use your existing SaaS ID or generate a new one by clicking the Reissue SaaS ID button.

In the initial state, an "API key" is not automatically generated.<br/>
If necessary, click the "Issue API Key" button to issue a new key.

:::info
Please note that if you reissue the SaaS ID after the SaaS operation has actually started, you will also need to update the SaaS ID used within the SaaS application.

Also, please be extremely careful not to leak your API key to outside parties. The API keys shown in this tutorial are no longer available.
:::

![01](/img/tutorial/configuring-sdk-for-saasus-platform/configuring-sdk-for-saasus-platform-01.png)

![02](/img/tutorial/configuring-sdk-for-saasus-platform/configuring-sdk-for-saasus-platform-02.png)

### Preparing to use SaaSus SDK

Now, let's open the sample application we just prepared in the development environment.

As mentioned at the beginning, the docker container has been started using `init.sh`, and

- For **Laravel**, check that the sample application is running at [http://localhost/board](http://localhost/board).
- For **Express**, check that it is running at [http://localhost/login/](http://localhost/login/).

First, to use the SaaSus Platform, you need to integrate the SaaSus SDK into your application.

- For Laravel, use **Composer**.
- For Express, use **npm**.

Open a terminal and set up the SDK.

```mdx-code-block
<Tabs>
<TabItem value="laravel-bash" label="Laravel (Bash)" default>
```

```bash
repo$ docker compose exec php bash
root@xxx:/var/www# cd api
root@xxx:/var/www/api# composer require saasus-platform/saasus-sdk-php
```

```mdx-code-block
</TabItem>
<TabItem value="express-bash" label="Express (Bash)">
```

```bash
repo$ docker compose exec node bash
root@xxx:/app# npm install saasus-sdk
root@xxx:/app# exit
```

```mdx-code-block
</TabItem>
</Tabs>
```

## Setting Environment Variables

After installing the SaaSus SDK, set the environment variables required to use it.

First, copy the `.env.example` file in the `api` directory to create a `.env` file:

```bash
cp api/.env.example api/.env
```

Next, open the newly created `.env` file and enter the following values:

---

### Environment Variables for the SaaSus Platform

```env
SAASUS_SAAS_ID="Enter your SaaS ID"
SAASUS_API_KEY="Enter your API key"
SAASUS_SECRET_KEY="Enter your client secret"
SAASUS_LOGIN_URL="Enter your login screen URL"
```

You can find these values in the SaaSus development console:

- On the **Basics > API Key** screen: `SAASUS_SAAS_ID`, `SAASUS_API_KEY`, `SAASUS_SECRET_KEY`
- On the **Authentication Authorization > Advanced Settings** screen: `SAASUS_LOGIN_URL`

With this, the basic setup of the SDK is complete.
---

# Implementation of authorization based on tenant information

URL: https://www.prisma.io/docs/tutorial/implementation-of-authorization-based-on-tenant-information
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Implementation of Authorization

### Implementation of comment limits based on pricing plan measurement unit

Let's modify the previous sample application and implement the first step of authorization.

With the SaaS Platform settings so far, which user is logged in, which tenant the user belongs to, what role the user has, which price plan is selected by that tenant, and what menu can be used? can be obtained from the application. We will use that information to limit the application.

For now, focus on "Comments", which is one of the measurement units in the pricing plans.

Earlier, we set a different upper limit for the number of comments for each price plan.

- 10 comments limit on Free plan
- 100 comments limit on Basic plan

Now, get the maximum number associated with this pricing plan for each tenant and set a limit.

- For Laravel, let’s modify the `post` method in `api/app/Http/Controllers/MessageController.php`.
- For Express, let’s add an `import` statement to `api/controllers/chat.ts` and modify the `postChats` method.

<Tabs>
<TabItem value="php" label="Laravel (PHP)">

```php
   public function post(Request $request)
   {
        $validated = $request->validate([
            'message' => 'required|max:255'
        ]);

        $tenant_id = $request->userinfo['tenants'][0]['id'];
        $plan_id = $request->userinfo['tenants'][0]['plan_id'];

        // Use the SaaSus SDK to hit the SaaSus API, acquire various information, and use it for judgment
        $client = new \AntiPatternInc\Saasus\Api\Client();
        $pricingApi = $client->getPricingClient();
        $res = $pricingApi->getPricingPlan($plan_id, $pricingApi::FETCH_RESPONSE);
        $plan = json_decode($res->getBody(), true);

        // use metering meter, comment_count
        $meteringUnitName = "comment_count";
        $res = $pricingApi->getMeteringUnitDateCountByTenantIdAndUnitNameToday($tenant_id, $meteringUnitName, $pricingApi::FETCH_RESPONSE);
        // This time, treat it as the maximum number of comments per day
        $count = json_decode($res->getBody(), true);

        $upper = \AntiPatternInc\Saasus\Api\Lib::findUpperCountByMeteringUnitName($plan, $meteringUnitName);

        // Disable posting if the number of comments exceeds the maximum number of comments for the current contracted price plan
        if ($count['count'] < $upper || $upper === 0) {
            $message = Message::create([
                'tenant_id' => $tenant_id,
                'user_id' => $request->userinfo['tenants'][0]['user_attribute']['username'],
                'message' => $request->message,
            ]);
            // add 1 to the number of comments in the metering API
            $param = new \AntiPatternInc\Saasus\Sdk\Pricing\Model\UpdateMeteringUnitTimestampCountNowParam();
            $param->setMethod('add');
            $param->setCount(1);
            $res = $pricingApi->updateMeteringUnitTimestampCountNow($request->userinfo['tenants'][0]['id'], $meteringUnitName, $param, $pricingApi::FETCH_RESPONSE);
        }

        $request->session()->regenerateToken();
        return redirect()->route('board');
   }
```

</TabItem>

<TabItem value="typescript" label="Express (TS)">
```js
import { UpdateMeteringUnitTimestampCountNowParam } from "saasus-sdk/dist/generated/Pricing";
import { findUpperCountByMeteringUnitName, PricingClient } from "saasus-sdk";

// Other code omitted

const postChats = async (req: Request, res: Response) => {
  const mes = req.body.message;
  const tenantId = req.userInfo?.tenants[0].id || "";
  const planId = req.userInfo?.tenants[0].plan_id || "";
  const userName =
    req.userInfo?.tenants[0].user_attribute.username;
  try {
    const pricingClient = new PricingClient();
    const pricingPlan = await pricingClient.pricingPlansApi.getPricingPlan(
      planId
    );

    // use metering meter, comment_count
    const meteringUnitName = "comment_count";
    const meteringUnitCountData =
      await pricingClient.meteringApi.getMeteringUnitDateCountByTenantIdAndUnitNameToday(
        tenantId,
        meteringUnitName
      );
    
    // This time, treat it as the maximum number of comments per day
    const upper = findUpperCountByMeteringUnitName(
      pricingPlan.data,
      meteringUnitName
    );

    // Disable posting if the number of comments exceeds the maximum number of comments for the current contracted price plan
    if (meteringUnitCountData.data.count < upper || upper === 0) {
      await db.Messages.create({
        tenant_id: tenantId,
        user_id: userName,
        message: mes,
      });

      // add 1 to the number of comments in the metering API
      let param: UpdateMeteringUnitTimestampCountNowParam = {
        method: "add",
        count: 1,
      };
      const res =
        await pricingClient.meteringApi.updateMeteringUnitTimestampCountNow(
          tenantId,
          meteringUnitName,
          param
        );
    }
  } catch (error) {
    console.error(error);
  }
  res.redirect("/chat");
};
```
</TabItem>
</Tabs>


In addition to the previous code, check the maximum number of comments based on the comment count target meter “comment_count”.

Earlier, the measurement unit is set based on “comment_count” in any price plan measurement unit as shown in the screen below.

![](/img/tutorial/implementation-of-authorization-based-on-tenant-information/implementation-of-authorization-based-on-tenant-information-1.png)

In the function,

Get the **price plan** associated with the tenant,

Get the **current value** of the target meter “comment_count”,

Checking the **upper limit** of the upper limit "comment_count" associated with the pricing plan

and if the current value does not exceed the upper limit,

Do the comment writing process as usual,

Add 1 to the **current value** of the target meter "comment_count" and update.

By doing this, it is possible to prevent writing when the upper limit for each pricing plan is exceeded.

In order to simplify the process this time, the program will be limited to stopping additional comments once the maximum number is reached. However, in a real case scenario an error message or a message prompting an upsell should be displayed.

Depending on the function, if it is completely stopped at the upper limit, the value of SaaS may be impaired.  
For example, if we put an upper limit on comments, and it becomes impossible to write completely there, this will not work as a chat application.  
Resulting in this SaaS may going unused until this meter is reset, also taking the risk that there is also the possibility that it will never be used again.  
Therefore, instead of stopping comments completely, it is important to prevent the value of this SaaS itself from being lost, such as issuing a warning about the limit, or adjusting the storage period.

Since this is a tutorial, it is completely unwritable. Now, check to see if writing is not possible at the upper limit.

First, run init.sh to clean up the application, just like when we first initialized the application.

Then, set the Free plan for Tenant 1, log in with [user1-1@example.com](mailto:user1-1@example.com), and write 10 or more items.

This shows that tenant 1 can write a maximum of 10 records.

:::info
This time, the implementation only counts writings after the meter is set. <br/> If you want to take writings before the setting into account, you can also update the meter value directly.
:::

![](/img/tutorial/implementation-of-authorization-based-on-tenant-information/implementation-of-authorization-based-on-tenant-information-2.png)

Next, log in with user [user2-1@example.com](mailto:user2-1@example.com) in tenant 2 and write 10 or more items.

Since the upper limit is 100 here, you should have been able to write more than 10.

![](/img/tutorial/implementation-of-authorization-based-on-tenant-information/implementation-of-authorization-based-on-tenant-information-3.png)

Furthermore, assuming that tenant 1 has upgraded the plan, change the setting from the Free plan to the Basic plan, log in again with [user1-1@example.com](mailto:user1-1@example.com), and write 10 or more items. prize.  
(It takes about 5 minutes to reflect the changed settings.)

![](/img/tutorial/implementation-of-authorization-based-on-tenant-information/implementation-of-authorization-based-on-tenant-information-4.png)

This shows that user1-1 can write more than ten items.

![](/img/tutorial/implementation-of-authorization-based-on-tenant-information/implementation-of-authorization-based-on-tenant-information-5.png)

Using this method it is now possible to meter and limit according to the pricing plan.

---

# Manage Rate Plans

URL: https://www.prisma.io/docs/tutorial/manage-rate-plans/manage-rate-plans
## Structure and Terminology of Pricing Plans

In SaaSus Platform, pricing plans are organized in the following **hierarchical structure**:

![](/img/tutorial/manage-rate-plans/manage-rate-plans-05.png)

- **Metering Unit**: An item used to measure usage, such as the number of comments or users.
- **Measurement Unit**: The smallest unit that serves as the basis for pricing.
  - **Fixed Unit**: A unit where a fixed fee is charged on a regular basis, such as monthly.
  - **Usage Unit**: A unit where a fixed amount is charged per usage.
  - **Tiered Unit**: A unit where a fixed fee is applied based on usage ranges, similar to tiered data charges in mobile plans.
  - **Tiered Usage Unit**: A unit where the per-unit price decreases as usage increases, similar to volume discount pricing.
- **Feature Menu**: A set of one or more measurement units grouped into a feature. Multiple feature menus can be combined to define a pricing plan.
- **Pricing Plan**: The top-level pricing definition assigned to a tenant.
  - A pricing plan consists of one or more function menus.
  - Each tenant can be assigned a specific pricing plan. You can also create a private pricing plan for individual tenants if needed.

---

## Creating a Pricing Plan Using the SaaS Development Console

SaaSus Platform allows you to define pricing plans that support both subscription-based and usage-based billing models.

In this tutorial, we’ll walk through how to configure two example pricing plans:

### Example Pricing Plans

- **Free plan**
  - Number of comments Max 10
- **Basic plan**
  - Fixed fee 500 yen
  - Comment count tiered pricing
    - Up to 10 comments, 500 yen
    - From 11 comments to 50 comments, 1000 yen
    - From 51 comments to 100 comments, 1500 yen
    - Max 100 comments

<div className="table-scroll">
<table className="nowrap-table">
  <thead>
    <tr>
      <th>Plan</th>
      <th>Base Fee</th>
      <th>Comment Count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Free</strong></td>
      <td className="text-center">—</td>
      <td>Max 10 comments</td>
    </tr>
    <tr>
      <td><strong>Basic</strong></td>
      <td className="text-right">500 yen</td>
      <td className="no-p-margin">
        Tiered pricing (Max 100 comments)<br />
        0–10 items = 500 yen<br />
        11–50 items = 1,000 yen<br />
        51–100 items = 1,500 yen
      </td>
    </tr>
  </tbody>
</table>
</div>

## Structure of the Free Plan

The Free Plan is a simple plan that allows up to 10 comments at no cost.

![](/img/tutorial/manage-rate-plans/manage-rate-plans-06.png)

## Structure of the Basic Plan

The Basic Plan combines a fixed monthly fee with tiered usage-based pricing for comment count.

![](/img/tutorial/manage-rate-plans/manage-rate-plans-07.png)

You can create multiple measurement units, each of which can be linked to a metering unit as needed (not required for fixed unit).

Based on this structure, you can use the SaaS Development Console to configure each component: metering units, measurement units, feature menus, and pricing plans.

For detailed input steps and screenshots, please refer to the following guide:

[See the step-by-step guide here (with screenshots)](./setting-measurement-units-function-menus-and-price-plans)

## Applying Rate Plans to Tenants

Log in to the SaaS Operation Console and click Pricing Plan Settings.

![](/img/tutorial/manage-rate-plans/manage-rate-plans-02.png)

Click plan settings for each tenant to change the rate plan.

Set the free plan for tenant sample 1 and the basic plan for sample app tenant 2.

![](/img/tutorial/manage-rate-plans/manage-rate-plans-03.png)

This will change the pricing plan associated with the tenant. When working with Stripe, customer information is created on Stripe and a subscription is also created.

![](/img/tutorial/manage-rate-plans/manage-rate-plans-04.png)

:::info
For details on how to set up Stripe integration,  
please refer to the following SaaS Development Console documentation:  
[Stripe Integration](/docs/part-4/pricing-and-billing/stripe-integration)
:::

Now, using the pricing plans and metering unit information you've configured, let’s implement the first step of authorization processing in the application.

---

# Step-by-Step Guide to Setting Up Pricing Plans

URL: https://www.prisma.io/docs/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans

# Step-by-Step Guide to Setting Up Pricing Plans

This page explains how to configure the following items step by step using the SaaS Development Console:

- Metering Units
- Measurement Units
- Feature Menus
- Pricing Plans

---

## Metering Units

First, create a metering unit that represents what to measure within your application.

### Example: Comment Count

| Unit Name    | Unit Display Name   | Unit Description |
|:-----------|:-------------|:-----------------|
| comment_count | Comment Count | Comment Count    |


![07](/img/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans/setting-measurement-units-function-menus-and-price-plans-07.png)

:::info
The **"Calculation Method"** field is not visible in this screen,  
but it becomes available when **Stripe integration is enabled**, allowing you to choose options such as `sum` (total) or `max` (maximum).

For more details, see the following page:  
[Meter Unit Setting](/docs/part-4/pricing-and-billing/usage-metering)
:::

---

## Measurement Units

### Basic Plan – Fixed Monthly Fee

Measurement Unit Type: Fixed Unit

| Measurement Unit Name | Measurement Unit Display Name | Measurement Unit Description | Amount | Reoccurance Period | Currency |
| :-------------------- | :---------------------------- | :--------------------------- | :----- | :----------------- | :------- |
| basic_base            | Basic Plan Basic Fee          | Basic Plan Basic Fee         | 500    | Month              | JPY      |

![01](/img/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans/setting-measurement-units-function-menus-and-price-plans-01.png)

---

### Free Plan – Tiered Usage Unit

Allows up to 10 comments free of charge.

Measurement Unit Type: Usage-Based Unit

| Measurement Unit Name | Measurement Unit Display Name | Measurement Unit Description | Target Meter Name | Amount per Unit Usage | Limit | Currency |
| :-------------------- | :---------------------------- | :--------------------------- | :---------------- | :-------------------- | :---- | :------- |
| free_comment          | Number of Free Plan Comments  | Number of Free Plan Comments | Comment Count     | 0                     | 10    | JPY      |

![02](/img/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans/setting-measurement-units-function-menus-and-price-plans-02.png)

---

### Basic Plan – Tiered Pricing

Charges vary by number of comments.

Measurement Unit Type: Tiered Unit

| Measurement Unit Name | Measurement Unit Display Name     | Measurement Unit Description      | Target Meter Name | Currency | Range           | Upper Limit |
| :-------------------- | :-------------------------------- | :-------------------------------- | :---------------- | :------- | :-------------- | ----------: |
| basic_comment         | Number of comments for Basic plan | Number of comments for Basic plan | Comment Count     | JPY      | See table below |         100 |


#### Tiered Pricing:

| More than | Less than | Unit amount | Fixed amount |
| --------: | --------: | ----------: | -----------: |
|         0 |        10 |           0 |          500 |
|        11 |        50 |           0 |         1000 |
|        51 |           |           0 |         1500 |

![03](/img/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans/setting-measurement-units-function-menus-and-price-plans-03.png)

---

## Feature Menus

Define which features (composed of measurement units) are included in each plan.

| Feature Menu Name | Feature Menu Display Name  | Feature Menu Description   | Measurement Unit                                                               |
| :---------------- | :------------------------- | :------------------------- | :----------------------------------------------------------------------------- |
| free_menu         | Free Plan Basic Menu       | Free Plan Basic Menu       | Number of Free Plan Comments                                                   |
| basic_menu        | Basic Plan Basic Menu      | Basic Plan Basic Menu      | Basic Plan Basic Fee<br/>Number of comments for Basic plan                     |

![05](/img/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans/setting-measurement-units-function-menus-and-price-plans-05.png)

Please configure the Basic Plan in the same way as the Free Plan.

---

## Pricing Plans

Finally, define pricing plans by combining feature menus.

| Pricing plan Name | Pricing Plan Display Name | Pricing Plan Description | Feature Menu               |
| :---------------- | :------------------------ | :----------------------- | :------------------------- |
| free_plan         | Free Plan                 | Free Plan                | Free Plan Basic Menu       |
| basic_plan        | Basic Plan                | Basic Plan               | Basic Plan Basic Menu      |

![06](/img/tutorial/manage-rate-plans/setting-measurement-units-function-menus-and-price-plans/setting-measurement-units-function-menus-and-price-plans-06.png)

Please configure the Basic Plan in the same way as the Free Plan.

[Return to the original procedure](./manage-rate-plans#applying-rate-plans-to-tenants)


---

# Prepare SaaS Platform

URL: https://www.prisma.io/docs/tutorial/prepare-saasus-platform

### Creating a SaaSus Platform Account

First, let's create an account on SaaSus Platform.

Display the new registration screen and register using your email address.

[https://auth.saasus.io/sign-up](https://auth.saasus.io/sign-up)

Please enter your email address, read the terms of use and privacy policy, and check the box if you agree. Then click the new registration button.

![01](/img/tutorial/prepare-saasus-platform/prepare-saasus-platform-01.png)

A temporary password will be sent to the email address you entered. Enter the temporary password you received and the new password you want to register. Press the "Set new password" button to activate your account.

![02](/img/tutorial/prepare-saasus-platform/prepare-saasus-platform-02.png)

When you register with SaaSus Platform for the first time, we will create a tenant exclusively for you. This will take at least an hour as we are creating an AWS account specifically for you. Once your account creation is complete, you will receive instructions at the email address you provided earlier.

![03](/img/tutorial/prepare-saasus-platform/prepare-saasus-platform-03.png)

### Logging into the SaaSus Platform Console

When you log in after the tenant is created, you will be asked to enter user attributes as shown above, so please enter your company name and name.

![04](/img/tutorial/prepare-saasus-platform/prepare-saasus-platform-04.png)

After entering the information, a transition screen to each console of the tenant will be displayed.

![05](/img/tutorial/prepare-saasus-platform/prepare-saasus-platform-05.png)

**SaaS Development Console** is a console for setting up SaaS construction.

**SaaS Operation Console** is a console for managing SaaS.

:::info About Domain Settings
By setting a domain on the SaaSus Platform, you can define the base domain used for automatically generating the login screen and for sending emails.  
For details on how to set a domain, please see [Domain and Redirect Settings](/docs/part-4/application-settings/domain-and-redirect-settings).
:::

:::info About Customizing the Login Screen
The automatically generated login screen can display your service name and icon, and also include links to your terms of use and privacy policy.  
For customization instructions, please refer to [Basic App Settings](/docs/part-4/application-settings/basic-app-settings).
:::

### Setting destination URL after authentication

Based on the domain name you configured, SaaSus Platform generates a login screen. After logging in, the authentication information is transferred to the SaaS side.<br/>
The URL of the SaaS to be taken over must be registered as the Callback URL.

Click "Transition destination after authentication" from the side menu to display the Callback URL setting screen.

Typically, you set the Callback URL based on the URL of the SaaS offering.<br/>
However, since we will be running the sample application locally this time, we will configure it as follows.

- For Laravel: [http://localhost/callback](http://localhost/callback)
- For Express: [http://localhost:3000/callback](http://localhost:3000/callback)

![06](/img/tutorial/prepare-saasus-platform/prepare-saasus-platform-06.png)

Once you have configured the Callback URL, there are a few additional settings that must be completed before continuing with the tutorial.

:::caution Required Setup Before Starting the Tutorial
To proceed smoothly with the upcoming tutorial steps, it is **essential** to define additional attributes for users and tenants, and to configure roles in advance.

Please complete the following setup beforehand:

- [User Attributes](/docs/part-4/user-authz-settings/declare-additional-attribute-to-user)
- [Tenant Attributes](/docs/part-4/application-settings/declare-additional-attribute-to-tenant)
- [Roles](/docs/part-4/user-authz-settings/role-definition)

The following steps assume that these configurations have already been completed.
:::

Once the SaaSus Platform is ready, we will incorporate it into the sample application.
---

# Prepare a Sample Application(EC2)

URL: https://www.prisma.io/docs/tutorial/prepare-the-sample-application-ec2

Please follow these steps to create a Blade version operating environment using EC2 or Cloud9.

## Preparing the Sample Application

EC2 creation parameters
| Item | Setting |
| --- | --- |
| AMI | Amazon Linux 2023 AMI |
| Key pair | Create a new key pair for each terminal so that keys can be distributed
| Subnet | Place in a public subnet
| Auto-assign public IP | Enable
| Allow HTTP traffic from the internet | Check this option
| Storage configuration | 20GB

:::info

To access an EC2 instance via SSH, inbound traffic on port 22 (SSH) must be allowed.
For Cloud9, the initial disk capacity will not be sufficient, so additional disk capacity is needed to reach 20G.

:::

Connect to EC2 using Session Manager or SSH
For SSH:

```
chmod 600 xxx.pem
ssh -i xxx.pem ec2-user@[EC2's global IP]
```

Commands to execute on EC2:

```
sudo su -

# Install docker
dnf update
dnf install -y docker
systemctl start docker
systemctl enable docker

# Install docker compose
mkdir -p /usr/local/lib/docker/cli-plugins
curl -SL https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

# Install git
dnf install -y git

# Get tutorial materials
git clone https://github.com/saasus-platform/sampleapp-basic-chat

# Build tutorial materials
cd sampleapp-basic-chat/php/laravel
./init.sh

# Address insufficient permissions for storage directory
chmod -R 777 api/storage/
```

After executing the above commands, try accessing the following URL

URL: http<dummy>://</dummy>[EC2's global IP]/board  
Authentication Email: <dummy>user</dummy>@example.com  
Password: password

![Sample](/ja/img/tutorial/prepare-the-sample-application/prepare-the-sample-application-01.png)

In this way, users can freely write messages.

---

# Prepare a Sample Application

URL: https://www.prisma.io/docs/tutorial/prepare-the-sample-application

In this tutorial, we will use SaaSus Platform to turn a simple chat system created as a web application that can post strings into SaaS (Software as a Service).

## Preparing the Sample Application

First, start this sample application.

:::info

If you are using AWS EC2 or Cloud9 to create an operating environment for the Blade version, please follow the steps in [Preparing the Sample Application (EC2)](https://docs.saasus.io/docs/tutorial/prepare-the-sample-application-ec2/).

:::

This simple chat system comes with two configuration options:

1. Laravel + Blade (PHP 8 / Laravel 9 / PostgreSQL 13)  
2. Express + EJS (Node.js / Express 4.16.x / PostgreSQL 13)

In either setup, it is possible to use Next.js as the frontend with additional configuration.  
However, Next.js is not used in this tutorial.

### Prerequisites
- PHP 8 must be installed (for Laravel + Blade).
- Composer must be installed (for Laravel + Blade).
- PostgreSQL 13 must be installed and properly configured.
- Node.js and npm must be installed (for Express + EJS).

First, clone the sample application from the repository below.

```git
git clone https://github.com/saasus-platform/sampleapp-basic-chat
```

After cloning the repository, move to the appropriate application directory and perform the initial setup.

- **Laravel + Blade**: `sampleapp-basic-chat/php/laravel`
- **Express + EJS**: `sampleapp-basic-chat/node/express`

```shell
./init.sh
```

The application was launched locally.

Once launched, try it out by accessing the URL below.

### Laravel + Blade Version

URL: [http://localhost/board](http://localhost/board)  
Authentication  
　Email: [user@example.com](mailto:user@example.com)  
　Password: password

![サンプル](/img/tutorial/prepare-the-sample-application/prepare-the-sample-application-01.png)

### Express + EJS Version

URL: [http://localhost/login/](http://localhost/login/)  
Authentication  
　Email: [user@example.com](mailto:user@example.com)  
　Password: password

:::caution
The Express + EJS version may take several minutes to build. If it doesn't display, wait a few minutes and try to view it again.
:::

![サンプル](/img/tutorial/prepare-the-sample-application/prepare-the-sample-application-02.png)

To allow users to post freely, the Laravel version uses Laravel's standard authentication module, while the Express version uses a custom authentication mechanism to identify users.

By integrating the SaaSus Platform and handling user authentication through it, you can easily identify users and retrieve tenant information associated with them.

There is no need for the SaaS application to design tenant data or manage information.

Additionally, once you set up your pricing plan on the SaaSus Platform, you can start using it right away.

Information held by the SaaSus Platform can be registered, acquired, and updated by SaaS applications via API.

Let's turn this simple web application into SaaS.

\*Please refer to the following for the difference between the source code at the start and end of the tutorial.

**Laravel + Blade**    
[https://github.com/saasus-platform/sampleapp-basic-chat/pull/10/files](https://github.com/saasus-platform/sampleapp-basic-chat/pull/10/files)

**Express + EJS**  
[https://github.com/saasus-platform/sampleapp-basic-chat/pull/11/files](https://github.com/saasus-platform/sampleapp-basic-chat/pull/11/files)

* These differences also include changes required when using Next.js.

---

# Lastly

URL: https://www.prisma.io/docs/tutorial/summarize
Hopefully you have gone through the tutorial and have an idea of what you can do with the SaaSus Platform. In SaaS, there are many features that are not differentiating despite being important features. Instead of spending man-hours on these, use this time to focus on the original value of your company's SaaS.

Also, the hardest part of SaaS is operation rather than development. As you continue to operate, you will need to enhance various features, strengthen security, and make improvements. In addition, as the number of tenants increases, the load increases steadily. It is difficult to notice it until the SaaS operation phase progresses.

Currently, what the SaaS Platform can do is still only the basics of SaaS, but we plan to implement functions that will make SaaS operations smoother in the future. For example, we are working on providing a solution to the well known noisy neighbor problem where on a multi-tenant setup a large customer affects other tenants.

Please refer to the [Implementation Guide](/docs/part-6/implementation-guide), which contains detailed settings for each item.

Please look forward to the future of the SaaSus Platform.


---

# Introduction

URL: https://www.prisma.io/docs/tutorial/tutorial-introduction

This tutorial consists of eight steps.

By following the procedures from Step 1 to Step 8, the basic chat system will undergo a transformation into a Software as a Service (SaaS) model, supporting multi-tenancy and enabling control through pricing plans. The specific details applied at each step will be incorporated into the application in the order depicted in the following diagram.

![サンプル](/img/tutorial/tutorial-introduction/tutorial-introduction-01.png)

This process will result in the development of an enhanced chat system, capable of accommodating diverse user needs through the support of multi-tenancy and flexible control via pricing plans.

Check the diagram to see the difference between the architecture before and after the tutorial.

Before the tutorial
![サンプル](/img/tutorial/tutorial-introduction/tutorial-introduction-02.png)

After the tutorial
![サンプル](/img/tutorial/tutorial-introduction/tutorial-introduction-03.png)

Migration of User and Tenant Information:<br/>
SaaSus Platform manages user information and the tenant information associated with it. Therefore, there is no need for the chat system to maintain this information.

External Delegation of User Authentication:<br/>
User authentication is delegated to SaaSus Platform. The chat system only needs to receive callbacks from SaaSus Platform and perform necessary processing to implement the login functionality.

Changes to Data Model:<br/>
A tenant_id column will be added to the data model previously maintained by the chat system. This enables multi-tenancy support.

By following these steps, the chat system can be SaaS-enabled using SaaSus Platform.